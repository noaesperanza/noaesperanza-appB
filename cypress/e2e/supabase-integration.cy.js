// üóÑÔ∏è TESTE E2E - INTEGRA√á√ÉO SUPABASE N√îA ESPERANZA
// Testa integra√ß√£o completa com banco de dados

describe('Integra√ß√£o Supabase N√¥a Esperanza', () => {
  beforeEach(() => {
    cy.clearTestData()
    cy.mockSpeechRecognition()
    cy.mockSpeechSynthesis()
    cy.visit('/')
    cy.waitForNoaToLoad()
  })

  it('Deve conectar com Supabase e salvar dados', () => {
    // üóÑÔ∏è Testa conex√£o e salvamento de dados
    cy.log('üóÑÔ∏è Testando conex√£o Supabase')
    
    // Verifica se a conex√£o est√° ativa
    cy.window().then((win) => {
      expect(win.supabase).to.exist
    })
    
    // Inicia conversa
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    
    // Verifica se dados foram salvos
    cy.window().then((win) => {
      // Verifica se as fun√ß√µes do Supabase foram chamadas
      expect(win.supabase.rpc).to.have.been.called
    })
  })

  it('Deve salvar conversas na tabela noa_conversations', () => {
    // üóÑÔ∏è Testa salvamento de conversas
    cy.log('üóÑÔ∏è Testando salvamento de conversas')
    
    // Inicia conversa
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    
    // Verifica se conversa foi salva
    cy.window().then((win) => {
      // Verifica se insert foi chamado na tabela noa_conversations
      expect(win.supabase.from).to.have.been.calledWith('noa_conversations')
    })
    
    // Continua conversa
    cy.selectUserType('paciente')
    
    // Verifica se nova conversa foi salva
    cy.window().then((win) => {
      expect(win.supabase.from).to.have.been.calledWith('noa_conversations')
    })
  })

  it('Deve salvar fluxo da conversa na tabela noa_conversation_flow', () => {
    // üóÑÔ∏è Testa salvamento do fluxo
    cy.log('üóÑÔ∏è Testando salvamento do fluxo')
    
    // Inicia avalia√ß√£o
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    cy.selectUserType('paciente')
    cy.startClinicalEvaluation()
    
    // Verifica se fluxo foi salvo
    cy.window().then((win) => {
      // Verifica se insert foi chamado na tabela noa_conversation_flow
      expect(win.supabase.from).to.have.been.calledWith('noa_conversation_flow')
    })
  })

  it('Deve salvar dados de aprendizado da IA', () => {
    // üóÑÔ∏è Testa salvamento de aprendizado
    cy.log('üóÑÔ∏è Testando salvamento de aprendizado da IA')
    
    // Inicia conversa
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    
    // Verifica se dados de aprendizado foram salvos
    cy.window().then((win) => {
      // Verifica se insert foi chamado na tabela ai_learning
      expect(win.supabase.from).to.have.been.calledWith('ai_learning')
    })
  })

  it('Deve salvar relat√≥rio NFT na tabela noa_nft_reports', () => {
    // üóÑÔ∏è Testa salvamento de relat√≥rio NFT
    cy.log('üóÑÔ∏è Testando salvamento de relat√≥rio NFT')
    
    // Completa avalia√ß√£o para gerar NFT
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    cy.selectUserType('paciente')
    cy.startClinicalEvaluation()
    
    // Simula avalia√ß√£o r√°pida
    cy.completeImreBlock('Jo√£o, 30 anos')
    cy.waitForNoaResponse()
    cy.completeImreBlock('n√£o')
    cy.waitForNoaResponse()
    cy.completeImreBlock('dor')
    cy.waitForNoaResponse()
    
    // Acelera processo
    for (let i = 0; i < 8; i++) {
      cy.completeImreBlock('nenhuma')
      cy.waitForNoaResponse()
    }
    
    // Finaliza
    cy.checkNoaMessage('FECHAMENTO CONSENSUAL')
    cy.sendChatMessage('sim')
    cy.waitForNoaResponse()
    
    // Verifica se NFT foi salvo
    cy.window().then((win) => {
      // Verifica se insert foi chamado na tabela noa_nft_reports
      expect(win.supabase.from).to.have.been.calledWith('noa_nft_reports')
    })
  })

  it('Deve atualizar tipo de usu√°rio na tabela noa_users', () => {
    // üóÑÔ∏è Testa atualiza√ß√£o de tipo de usu√°rio
    cy.log('üóÑÔ∏è Testando atualiza√ß√£o de tipo de usu√°rio')
    
    // Seleciona tipo de usu√°rio
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    cy.selectUserType('paciente')
    
    // Verifica se tipo foi atualizado
    cy.window().then((win) => {
      // Verifica se update foi chamado na tabela noa_users
      expect(win.supabase.from).to.have.been.calledWith('noa_users')
    })
  })

  it('Deve buscar blocos IMRE da tabela blocos_imre', () => {
    // üóÑÔ∏è Testa busca de blocos IMRE
    cy.log('üóÑÔ∏è Testando busca de blocos IMRE')
    
    // Inicia avalia√ß√£o
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    cy.selectUserType('paciente')
    cy.startClinicalEvaluation()
    
    // Verifica se blocos foram buscados
    cy.window().then((win) => {
      // Verifica se select foi chamado na tabela blocos_imre
      expect(win.supabase.from).to.have.been.calledWith('blocos_imre')
    })
  })

  it('Deve buscar prompts da tabela prompts', () => {
    // üóÑÔ∏è Testa busca de prompts
    cy.log('üóÑÔ∏è Testando busca de prompts')
    
    // Inicia conversa
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    
    // Verifica se prompts foram buscados
    cy.window().then((win) => {
      // Verifica se select foi chamado na tabela prompts
      expect(win.supabase.from).to.have.been.calledWith('prompts')
    })
  })

  it('Deve testar RLS (Row Level Security)', () => {
    // üóÑÔ∏è Testa seguran√ßa de dados
    cy.log('üóÑÔ∏è Testando RLS (Row Level Security)')
    
    // Simula usu√°rio n√£o autenticado
    cy.window().then((win) => {
      // Remove token de autentica√ß√£o
      win.localStorage.removeItem('sb-auth-token')
    })
    
    // Tenta acessar dados
    cy.sendChatMessage('teste RLS')
    cy.waitForNoaResponse()
    
    // Verifica se sistema continua funcionando
    cy.checkNoaMessage('N√¥a Esperanza')
  })

  it('Deve testar views anal√≠ticas', () => {
    // üóÑÔ∏è Testa views anal√≠ticas
    cy.log('üóÑÔ∏è Testando views anal√≠ticas')
    
    // Inicia conversa
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    
    // Verifica se views foram acessadas
    cy.window().then((win) => {
      // Verifica se select foi chamado nas views
      expect(win.supabase.from).to.have.been.calledWith('noa_conversation_stats')
      expect(win.supabase.from).to.have.been.calledWith('noa_user_profiles')
      expect(win.supabase.from).to.have.been.calledWith('noa_nft_summary')
    })
  })

  it('Deve testar fun√ß√µes SQL personalizadas', () => {
    // üóÑÔ∏è Testa fun√ß√µes SQL
    cy.log('üóÑÔ∏è Testando fun√ß√µes SQL personalizadas')
    
    // Inicia conversa
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    
    // Verifica se fun√ß√µes foram chamadas
    cy.window().then((win) => {
      // Verifica se RPC foi chamado para fun√ß√µes personalizadas
      expect(win.supabase.rpc).to.have.been.calledWith('get_noa_config')
      expect(win.supabase.rpc).to.have.been.calledWith('set_user_type')
      expect(win.supabase.rpc).to.have.been.calledWith('register_noa_conversation')
      expect(win.supabase.rpc).to.have.been.calledWith('save_ai_learning')
    })
  })

  it('Deve testar tratamento de erros do Supabase', () => {
    // üóÑÔ∏è Testa tratamento de erros
    cy.log('üóÑÔ∏è Testando tratamento de erros')
    
    // Simula erro de conex√£o
    cy.window().then((win) => {
      // Mock de erro
      win.supabase.from = cy.stub().returns({
        insert: cy.stub().returns({
          select: cy.stub().returns({
            single: cy.stub().rejects(new Error('Connection failed'))
          })
        })
      })
    })
    
    // Tenta opera√ß√£o que deve falhar
    cy.sendChatMessage('teste erro')
    cy.waitForNoaResponse()
    
    // Verifica se sistema continua funcionando
    cy.checkNoaMessage('N√¥a Esperanza')
  })

  it('Deve testar performance de queries', () => {
    // üóÑÔ∏è Testa performance
    cy.log('üóÑÔ∏è Testando performance de queries')
    
    const startTime = Date.now()
    
    // Inicia conversa
    cy.sendChatMessage('Ol√°, sou paciente')
    cy.waitForNoaResponse()
    
    // Verifica tempo de resposta
    cy.window().then(() => {
      const endTime = Date.now()
      const responseTime = endTime - startTime
      
      // Verifica se resposta foi r√°pida (menos de 5 segundos)
      expect(responseTime).to.be.lessThan(5000)
    })
  })
})
