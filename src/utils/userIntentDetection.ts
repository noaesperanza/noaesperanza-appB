// üß† SISTEMA INTELIGENTE DE DETEC√á√ÉO DE INTEN√á√ÉO DO USU√ÅRIO
// Detecta 10 perfis diferentes e m√∫ltiplas formas de falar

export interface UserIntent {
  type:
    | 'start_evaluation'
    | 'ask_about_method'
    | 'greeting'
    | 'presentation'
    | 'symptom'
    | 'question'
    | 'unknown'
  confidence: number
  detectedProfile?: 'paciente' | 'profissional' | 'aluno' | 'unknown'
  context?: any
}

export class UserIntentDetector {
  // ü©∫ DETECTA INTEN√á√ÉO DE INICIAR AVALIA√á√ÉO (10+ varia√ß√µes)
  static detectStartEvaluation(message: string): boolean {
    const lower = message.toLowerCase()

    const patterns = [
      // Direto
      'avalia√ß√£o cl√≠nica',
      'avaliacao clinica',
      'iniciar avalia√ß√£o',
      'iniciar avaliacao',
      'fazer avalia√ß√£o',
      'fazer avaliacao',

      // Arte da Entrevista
      'arte da entrevista',
      'entrevista cl√≠nica',
      'entrevista clinica',
      'm√©todo imre',
      'metodo imre',

      // Varia√ß√µes naturais
      'quero fazer uma avalia√ß√£o',
      'quero fazer uma avaliacao',
      'preciso de uma avalia√ß√£o',
      'preciso de uma avaliacao',
      'gostaria de fazer avalia√ß√£o',
      'gostaria de fazer avaliacao',
      'pode me avaliar',
      'quero ser avaliado',
      'avaliar minha sa√∫de',
      'avaliar minha saude',

      // In√≠cio r√°pido
      'come√ßar avalia√ß√£o',
      'come√ßar avaliacao',
      'iniciar entrevista',
      'come√ßar entrevista',
      'comecar entrevista',

      // Refer√™ncias ao Dr. Ricardo
      'consulta com dr ricardo',
      'consulta dr ricardo',
      'avalia√ß√£o dr ricardo',
      'avaliacao dr ricardo',
    ]

    return patterns.some(pattern => lower.includes(pattern))
  }

  // üìö DETECTA PERGUNTA SOBRE O M√âTODO
  static detectAskAboutMethod(message: string): boolean {
    const lower = message.toLowerCase()

    const patterns = [
      'o que √© arte da entrevista',
      'o que e arte da entrevista',
      'que √© entrevista cl√≠nica',
      'que e entrevista clinica',
      'como funciona a entrevista',
      'como funciona entrevista',
      'explique arte da entrevista',
      'explique entrevista cl√≠nica',
      'explique entrevista clinica',
      'o que √© imre',
      'o que e imre',
      'como funciona imre',
      'o que significa imre',
    ]

    return patterns.some(pattern => lower.includes(pattern))
  }

  // üë§ DETECTA SE USU√ÅRIO SE APRESENTOU
  static detectUserPresentation(message: string, allMessages: any[]): boolean {
    const lower = message.toLowerCase()

    // Verifica mensagem atual
    const hasName =
      lower.includes('meu nome') ||
      lower.includes('me chamo') ||
      lower.includes('sou ') ||
      Boolean(lower.match(/\b[A-Z][a-z]+ [A-Z][a-z]+\b/)) // Nome pr√≥prio

    // Verifica hist√≥rico de mensagens
    const hasIntroducedBefore = allMessages.some(
      msg =>
        msg.sender === 'user' &&
        (msg.message.toLowerCase().includes('meu nome') ||
          msg.message.toLowerCase().includes('me chamo') ||
          msg.message.toLowerCase().includes('sou '))
    )

    return hasName || hasIntroducedBefore
  }

  // üé≠ DETECTA PERFIL DO USU√ÅRIO (10 PERFIS DIFERENTES)
  static detectUserProfile(message: string): 'paciente' | 'profissional' | 'aluno' | 'unknown' {
    const lower = message.toLowerCase()

    // PERFIL 1-3: Pacientes (varia√ß√µes)
    const pacientePatterns = [
      'sou paciente',
      'estou doente',
      'tenho sintomas',
      'estou sentindo',
      'preciso de ajuda m√©dica',
      'quero consulta',
      'marcar consulta',
      'n√£o estou bem',
      'nao estou bem',
      'tenho dor',
    ]

    // PERFIL 4-6: Profissionais (varia√ß√µes)
    const profissionalPatterns = [
      'sou m√©dico',
      'sou medico',
      'sou doutor',
      'sou doutora',
      'sou profissional',
      'trabalho na sa√∫de',
      'trabalho na saude',
      'sou enfermeiro',
      'sou terapeuta',
      'sou psic√≥logo',
      'sou psicologo',
    ]

    // PERFIL 7-10: Alunos (varia√ß√µes)
    const alunoPatterns = [
      'sou aluno',
      'sou estudante',
      'estudo medicina',
      'curso de medicina',
      'faculdade de medicina',
      'estou estudando',
      'quero aprender',
      'estudante de sa√∫de',
      'estudante de saude',
      'resid√™ncia m√©dica',
      'residencia medica',
    ]

    if (pacientePatterns.some(p => lower.includes(p))) return 'paciente'
    if (profissionalPatterns.some(p => lower.includes(p))) return 'profissional'
    if (alunoPatterns.some(p => lower.includes(p))) return 'aluno'

    return 'unknown'
  }

  // üéØ DETECTA INTEN√á√ÉO COMPLETA
  static detectIntent(message: string, allMessages: any[]): UserIntent {
    // Detecta tipo de inten√ß√£o
    if (this.detectStartEvaluation(message)) {
      return {
        type: 'start_evaluation',
        confidence: 0.95,
        detectedProfile: this.detectUserProfile(message),
      }
    }

    if (this.detectAskAboutMethod(message)) {
      return {
        type: 'ask_about_method',
        confidence: 0.9,
      }
    }

    if (this.detectUserPresentation(message, allMessages)) {
      return {
        type: 'presentation',
        confidence: 0.85,
        detectedProfile: this.detectUserProfile(message),
      }
    }

    // Detecta sintomas (provavelmente paciente)
    const symptomPatterns = ['dor', 'febre', 'cansa√ßo', 'cansaco', 'tontura', 'n√°usea', 'nausea']
    if (symptomPatterns.some(s => message.toLowerCase().includes(s))) {
      return {
        type: 'symptom',
        confidence: 0.8,
        detectedProfile: 'paciente',
      }
    }

    // Sauda√ß√£o gen√©rica
    const greetingPatterns = ['oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite']
    if (greetingPatterns.some(g => message.toLowerCase().includes(g))) {
      return {
        type: 'greeting',
        confidence: 0.7,
      }
    }

    return {
      type: 'unknown',
      confidence: 0.5,
    }
  }

  // üîÑ DETECTA SE DEVE PULAR BLOCOS
  static shouldSkipBlock(blockOrder: number, allMessages: any[]): boolean {
    // Bloco 1 (apresenta√ß√£o) - pula se j√° se apresentou
    if (blockOrder === 1) {
      return this.detectUserPresentation('', allMessages)
    }

    // Outros blocos - pode expandir l√≥gica aqui
    return false
  }

  // üìä EXTRAI INFORMA√á√ïES DO CONTEXTO
  static extractContext(allMessages: any[]): {
    userName?: string
    userSymptoms?: string[]
    userProfile?: 'paciente' | 'profissional' | 'aluno'
    hasPresented?: boolean
  } {
    const context: any = {}

    // Extrai nome
    const nameMessages = allMessages.filter(
      msg =>
        msg.sender === 'user' &&
        (msg.message.toLowerCase().includes('meu nome') ||
          msg.message.toLowerCase().includes('me chamo'))
    )
    if (nameMessages.length > 0) {
      const match = nameMessages[0].message.match(
        /(?:meu nome √©|me chamo) ([A-Z][a-z]+(?: [A-Z][a-z]+)*)/i
      )
      if (match) context.userName = match[1]
    }

    // Extrai sintomas
    const symptomMessages = allMessages.filter(
      msg =>
        msg.sender === 'user' &&
        (msg.message.toLowerCase().includes('dor') ||
          msg.message.toLowerCase().includes('sintoma') ||
          msg.message.toLowerCase().includes('sinto'))
    )
    if (symptomMessages.length > 0) {
      context.userSymptoms = symptomMessages.map(m => m.message)
    }

    // Detecta perfil
    const userMessages = allMessages.filter(msg => msg.sender === 'user')
    for (const msg of userMessages) {
      const profile = this.detectUserProfile(msg.message)
      if (profile !== 'unknown') {
        context.userProfile = profile
        break
      }
    }

    // Detecta se j√° se apresentou
    context.hasPresented = this.detectUserPresentation('', allMessages)

    return context
  }
}

export default UserIntentDetector
