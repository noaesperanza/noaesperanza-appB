// noaGPT.ts
import { codeEditorAgent } from './codeEditorAgent'
import { courseAdminAgent } from './courseAdminAgent'
import { knowledgeBaseAgent } from './knowledgeBaseAgent'
import { supabaseService } from '../services/supabaseService'
import { gptBuilderService } from '../services/gptBuilderService'
import { supabase } from '../integrations/supabase/client'
import { clinicalAgent } from './clinicalAgent'
import { symbolicAgent } from './symbolicAgent'
import { voiceControlAgent } from './voiceControlAgent'
import { aiSmartLearningService } from '../services/aiSmartLearningService'
import { logService } from '../services/logService'
import { collaborativeDevelopmentService } from '../services/collaborativeDevelopmentService'

export class NoaGPT {
  private userContext: any = {}
  private userMemory: any = {}

  // üß† SISTEMA DE MEM√ìRIA E CONTEXTO
  private getUserId(): string {
    // Tentar obter ID do usu√°rio do Supabase
    const supabaseUser = localStorage.getItem('sb-auth-token')
    if (supabaseUser) {
      try {
        const parsed = JSON.parse(supabaseUser)
        return parsed.currentSession?.user?.id || crypto.randomUUID()
      } catch (e) {
        console.warn('Erro ao parsear token do Supabase:', e)
      }
    }
    
    // Fallback para userId gen√©rico
    return localStorage.getItem('userId') || crypto.randomUUID()
  }

  private saveUserContext(context: any): void {
    const userId = this.getUserId()
    this.userContext[userId] = { ...this.userContext[userId], ...context }
    localStorage.setItem(`noa_context_${userId}`, JSON.stringify(this.userContext[userId]))
  }

  private getUserContext(): any {
    const userId = this.getUserId()
    const saved = localStorage.getItem(`noa_context_${userId}`)
    if (saved) {
      this.userContext[userId] = JSON.parse(saved)
    }
    return this.userContext[userId] || {}
  }

  private saveUserMemory(key: string, value: any): void {
    const userId = this.getUserId()
    if (!this.userMemory[userId]) this.userMemory[userId] = {}
    this.userMemory[userId][key] = value
    localStorage.setItem(`noa_memory_${userId}`, JSON.stringify(this.userMemory[userId]))
  }

  private getUserMemory(key?: string): any {
    const userId = this.getUserId()
    const saved = localStorage.getItem(`noa_memory_${userId}`)
    if (saved) {
      this.userMemory[userId] = JSON.parse(saved)
    }
    return key ? this.userMemory[userId]?.[key] : this.userMemory[userId] || {}
  }

  // üìö ACESSO AOS DOCUMENTOS DO DR. RICARDO
  private async getDrRicardoDocuments(): Promise<any> {
    try {
      // Usar o servi√ßo de conhecimento para acessar documentos
      const documents = await supabaseService.salvarArquivoViaTexto('dr_ricardo_documents')
      return documents || []
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao acessar documentos do Dr. Ricardo:', error)
      return []
    }
  }

  // üìñ LER/RESUMIR DOCUMENTOS MESTRES
  private async readMasterDocument(query: string): Promise<string> {
    try {
      const docs = await gptBuilderService.searchDocuments(query)
      if (docs && docs.length > 0) {
        const doc = docs[0]
        const preview = (doc.content || '').substring(0, 600)
        return `üìñ Documento Mestre encontrado: "${doc.title}"

Resumo (in√≠cio do conte√∫do):
${preview}${doc.content.length > 600 ? '...':''}

Voc√™ quer que eu continue a leitura, gere um resumo ou busque por um t√≥pico espec√≠fico dentro deste documento?`
      }
      // Se n√£o encontrou, listar os mais recentes
      const all = await gptBuilderService.getDocuments()
      if (all && all.length > 0) {
        const lista = all.slice(0, 5).map((d: any, i: number) => `${i+1}. ${d.title}`).join('\n')
        return `N√£o encontrei um documento que combine com "${query}".\n\nüìö Documentos dispon√≠veis (top 5):\n${lista}\n\nDiga: "ler documento <t√≠tulo>" para abrir um deles.`
      }
      return 'N√£o localizei documentos na base de conhecimento neste momento.'
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao ler Documento Mestre:', error)
      return 'Tive um problema ao acessar os Documentos Mestres agora.'
    }
  }

  // üß† SISTEMA DE APRENDIZADO ATIVO
  private async saveConversationToLearning(userMessage: string, aiResponse: string, context: string, category: string): Promise<void> {
    try {
      const userId = this.getUserId()
      
      // Salvar na tabela ai_learning
      const { error: learningError } = await supabase
        .from('ai_learning')
        .insert({
          user_message: userMessage,
          ai_response: aiResponse,
          context: context,
          category: category,
          confidence_score: 0.8, // Score inicial
          usage_count: 1,
          user_id: userId
        })

      if (learningError) {
        console.warn('‚ö†Ô∏è Erro ao salvar aprendizado:', learningError)
      }

      // Salvar na tabela noa_conversations
      const { error: conversationError } = await supabase
        .from('noa_conversations')
        .insert({
          user_message: userMessage,
          ai_response: aiResponse,
          context: context,
          category: category,
          user_id: userId,
          timestamp: new Date().toISOString()
        })

      if (conversationError) {
        console.warn('‚ö†Ô∏è Erro ao salvar conversa:', conversationError)
      }

      // Salvar padr√µes de conversa
      await this.saveConversationPattern(userMessage, aiResponse, context, category)

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro no sistema de aprendizado:', error)
    }
  }

  // üîç SALVAR PADR√ïES DE CONVERSA
  private async saveConversationPattern(userMessage: string, aiResponse: string, context: string, category: string): Promise<void> {
    try {
      const userId = this.getUserId()
      
      // Extrair palavras-chave da mensagem
      const keywords = this.extractKeywords(userMessage)
      
      // Salvar padr√£o
      const { error } = await supabase
        .from('ai_conversation_patterns')
        .insert({
          user_message: userMessage,
          ai_response: aiResponse,
          context: context,
          category: category,
          keywords: keywords,
          user_id: userId,
          pattern_type: 'conversation_flow',
          effectiveness_score: 0.8
        })

      if (error) {
        console.warn('‚ö†Ô∏è Erro ao salvar padr√£o:', error)
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao salvar padr√£o de conversa:', error)
    }
  }

  // üîë EXTRAIR PALAVRAS-CHAVE
  private extractKeywords(text: string): string[] {
    const words = text.toLowerCase()
      .replace(/[^\w\s]/g, '')
      .split(/\s+/)
      .filter(word => word.length > 2)
    
    // Palavras-chave m√©dicas importantes
    const medicalKeywords = [
      'dor', 'sintoma', 'medicamento', 'tratamento', 'consulta', 'm√©dico',
      'sa√∫de', 'doen√ßa', 'cannabis', 'neurologia', 'nefrologia', 'avalia√ß√£o',
      'cl√≠nica', 'ricardo', 'valen√ßa', 'noa', 'esperanza'
    ]
    
    return words.filter(word => 
      medicalKeywords.includes(word) || 
      word.length > 4
    ).slice(0, 10) // M√°ximo 10 palavras-chave
  }

  // üìä ANALISAR EFETIVIDADE DAS RESPOSTAS
  private async analyzeResponseEffectiveness(userMessage: string, aiResponse: string, context: string): Promise<number> {
    try {
      // Buscar respostas similares no hist√≥rico
      const { data: similarResponses } = await supabase
        .from('ai_learning')
        .select('*')
        .ilike('user_message', `%${userMessage.substring(0, 20)}%`)
        .limit(5)

      if (!similarResponses || similarResponses.length === 0) {
        return 0.8 // Score inicial para novas intera√ß√µes
      }

      // Calcular score baseado em similaridade
      let totalScore = 0
      similarResponses.forEach((response: any) => {
        totalScore += response.confidence_score || 0.5
      })

      return Math.min(totalScore / similarResponses.length, 1.0)

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao analisar efetividade:', error)
      return 0.8
    }
  }

  // üéØ APRENDER COM FEEDBACK
  private async learnFromFeedback(userMessage: string, aiResponse: string, feedback: 'positive' | 'negative'): Promise<void> {
    try {
      const userId = this.getUserId()
      
      // Atualizar score de confian√ßa baseado no feedback
      const scoreAdjustment = feedback === 'positive' ? 0.1 : -0.1
      
      const { error } = await supabase
        .from('ai_learning')
        .update({ 
          confidence_score: Math.max(0.1, Math.min(1.0, 0.8 + scoreAdjustment)),
          updated_at: new Date().toISOString()
        })
        .eq('user_message', userMessage)
        .eq('ai_response', aiResponse)

      if (error) {
        console.warn('‚ö†Ô∏è Erro ao aprender com feedback:', error)
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro no aprendizado com feedback:', error)
    }
  }

  // üîç BUSCAR RESPOSTAS SIMILARES (VERS√ÉO MELHORADA)
  private async findSimilarResponse(userMessage: string): Promise<any> {
    try {
      const userId = this.getUserId()
      const inicioTempo = Date.now()
      
      // 1. BUSCA INTELIGENTE NO BANCO (559 aprendizados)
      const aprendizados = await aiSmartLearningService.buscarAprendizadosSimilares(userMessage)
      
      if (aprendizados.length > 0 && aprendizados[0].similaridade > 0.7) {
        const melhorAprendizado = aprendizados[0]
        const tempoDecorrido = Date.now() - inicioTempo
        
        // Log da decis√£o da IA
        await logService.logDecisaoIA({
          pergunta: userMessage,
          fonte: 'banco',
          confianca: melhorAprendizado.similaridade * 100,
          tempo: tempoDecorrido,
          userId
        })
        
        console.log('‚úÖ Usando aprendizado do banco:', {
          similaridade: `${(melhorAprendizado.similaridade * 100).toFixed(1)}%`,
          tempo: `${tempoDecorrido}ms`
        })
        
        // Incrementar uso usando keyword como identificador
        await supabase
          .from('ai_learning')
          .update({ 
            usage_count: (melhorAprendizado.usage_count || 0) + 1,
            last_used_at: new Date().toISOString()
          })
          .eq('keyword', melhorAprendizado.keyword)
        
        return {
          response: melhorAprendizado.ai_response,
          confidence: melhorAprendizado.similaridade,
          source: 'database',
          learningId: melhorAprendizado.keyword
        }
      }
      
      // 2. FALLBACK: Busca antiga (keywords)
      const keywords = this.extractKeywords(userMessage)
      
      const { data: similarResponses } = await supabase
        .from('ai_learning')
        .select('*')
        .or(keywords.map(keyword => `user_message.ilike.%${keyword}%`).join(','))
        .order('confidence_score', { ascending: false })
        .limit(1)

      if (similarResponses && similarResponses.length > 0) {
        const tempoDecorrido = Date.now() - inicioTempo
        
        await logService.logDecisaoIA({
          pergunta: userMessage,
          fonte: 'banco',
          confianca: (similarResponses[0].confidence_score || 0.5) * 100,
          tempo: tempoDecorrido,
          userId
        })
        
        return {
          response: similarResponses[0].ai_response,
          confidence: similarResponses[0].confidence_score || 0.5,
          source: 'database_keywords'
        }
      }

      // 3. SEM RESULTADO: Retorna null para usar OpenAI
      const tempoDecorrido = Date.now() - inicioTempo
      
      await logService.logDecisaoIA({
        pergunta: userMessage,
        fonte: 'openai',
        confianca: 0,
        tempo: tempoDecorrido,
        userId
      })
      
      console.log('üîÑ Nenhum aprendizado encontrado, usando OpenAI...')
      
      return null

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao buscar respostas similares:', error)
      return null
    }
  }

  async processCommand(message: string): Promise<string> {
    const lower = message.toLowerCase().trim()
    const context = this.getUserContext()
    const memory = this.getUserMemory()

    // üß† SISTEMA DE APRENDIZADO ATIVO - Buscar respostas similares
    const similarResponse = await this.findSimilarResponse(message)
    if (similarResponse && similarResponse.confidence_score > 0.9) {
      // Usar resposta similar com alta confian√ßa
      await this.saveConversationToLearning(message, similarResponse.ai_response, 'similar_response', 'learning')
      return similarResponse.ai_response
    }

    // üõ°Ô∏è NORMAS DE CONDUTA (Documento Mestre v.2.0)
    // Nunca oferecer diagn√≥sticos ou tratamentos
    if (lower.includes('diagn√≥stico') || lower.includes('diagnostico') || 
        lower.includes('tratamento') || lower.includes('medicamento') ||
        lower.includes('receita') || lower.includes('prescri√ß√£o')) {
      return '‚ö†Ô∏è Como assistente m√©dica, n√£o posso oferecer diagn√≥sticos, tratamentos ou prescri√ß√µes. Recomendo consulta com um m√©dico qualificado para avalia√ß√£o adequada.'
    }

    // üîë ATIVA√á√ÉO DE VOZ (comandos especiais)
    if (
      lower.includes('ativar controle por voz') ||
      lower.includes('modo voz noa') ||
      lower.includes('ativar voz') ||
      lower.includes('controle por voz') ||
      lower.includes('ativar modo voz') ||
      lower.includes('ligar voz') ||
      lower.includes('ativar √°udio') ||
      lower.includes('ativar audio') ||
      lower.includes('modo √°udio') ||
      lower.includes('modo audio') ||
      lower.includes('voz ativa') ||
      lower.includes('ativar fala') ||
      lower.includes('modo fala') ||
      lower.includes('ativar tts') ||
      lower.includes('text to speech') ||
      lower.includes('s√≠ntese de voz') ||
      lower.includes('sintese de voz') ||
      lower.includes('voz noa') ||
      lower.includes('noa fale') ||
      lower.includes('fale noa') ||
      lower.includes('ativar som') ||
      lower.includes('modo som')
    ) {
      return await voiceControlAgent.ativarControle()
    }

    // üîá DESATIVA√á√ÉO DE VOZ (comandos especiais)
    if (
      lower.includes('desativar voz') ||
      lower.includes('parar voz') ||
      lower.includes('desativar controle por voz') ||
      lower.includes('desativar modo voz') ||
      lower.includes('desligar voz') ||
      lower.includes('desativar √°udio') ||
      lower.includes('desativar audio') ||
      lower.includes('desativar som') ||
      lower.includes('silenciar voz') ||
      lower.includes('parar √°udio') ||
      lower.includes('parar audio') ||
      lower.includes('parar som') ||
      lower.includes('modo silencioso') ||
      lower.includes('sem voz') ||
      lower.includes('sem √°udio') ||
      lower.includes('sem audio') ||
      lower.includes('sem som') ||
      lower.includes('voz off') ||
      lower.includes('√°udio off') ||
      lower.includes('audio off') ||
      lower.includes('som off') ||
      lower.includes('mute') ||
      lower.includes('mutar')
    ) {
      return await voiceControlAgent.desativarControle()
    }

    // üìé ADICIONAR DOCUMENTO (comandos especiais)
    if (
      lower.includes('adicionar documento') ||
      lower.includes('enviar documento') ||
      lower.includes('inserir pdf') ||
      lower.includes('subir arquivo') ||
      lower.includes('upload documento') ||
      lower.includes('carregar arquivo') ||
      lower.includes('anexar arquivo') ||
      lower.includes('enviar arquivo') ||
      lower.includes('subir pdf') ||
      lower.includes('upload pdf') ||
      lower.includes('carregar pdf') ||
      lower.includes('anexar pdf') ||
      lower.includes('inserir arquivo') ||
      lower.includes('adicionar arquivo') ||
      lower.includes('documento') ||
      lower.includes('arquivo') ||
      lower.includes('pdf') ||
      lower.includes('upload') ||
      lower.includes('carregar') ||
      lower.includes('anexar')
    ) {
      return 'üìÇ Por favor, envie o documento agora para que eu possa processar.'
    }

    // üíª COMANDOS DE C√ìDIGO
    if (
      lower.includes('editar c√≥digo') ||
      lower.includes('alterar c√≥digo') ||
      lower.includes('editar o arquivo') ||
      lower.includes('modificar componente')
    ) {
      return await codeEditorAgent.editarArquivo(message)
    }

    // üìö ADMINISTRA√á√ÉO DE CURSOS
    if (
      lower.includes('criar aula') ||
      lower.includes('editar aula') ||
      lower.includes('organizar curso') ||
      lower.includes('listar aulas') ||
      lower.includes('atualizar trilha') ||
      lower.includes('cursos dispon√≠veis') ||
      lower.includes('cursos disponiveis') ||
      lower.includes('aulas') ||
      lower.includes('educa√ß√£o') ||
      lower.includes('educacao') ||
      lower.includes('cursos')
    ) {
      return await courseAdminAgent.executarTarefa(message)
    }

    // üìñ BASE DE CONHECIMENTO
    if (
      lower.includes('criar conhecimento') ||
      lower.includes('editar conhecimento') ||
      lower.includes('listar conhecimentos') ||
      lower.includes('base de dados') ||
      lower.includes('adicionar √† base') ||
      lower.includes('adicionar a base') ||
      lower.includes('conhecimentos') ||
      lower.includes('conhecimento') ||
      lower.includes('base de conhecimento')
    ) {
      return await knowledgeBaseAgent.executarAcao(message)
    }

    // üìñ Ler documento mestre por comando
    if (
      lower.startsWith('ler documento ') ||
      lower.startsWith('abrir documento ') ||
      lower.includes('ler o documento mestre') ||
      lower.includes('documento mestre')
    ) {
      const titulo = message.replace(/^\s*(ler|abrir) documento\s*/i, '').trim()
      const query = titulo || 'Documento Mestre Institucional'
      return await this.readMasterDocument(query)
    }

    // üí¨ RESPOSTAS ESPEC√çFICAS PARA PERGUNTAS COMUNS (PRIORIDADE M√ÅXIMA)
    if (
      lower.includes('como voc√™ est√°') ||
      lower.includes('como voce esta') ||
      lower.includes('como est√°') ||
      lower.includes('como esta') ||
      lower === 'tudo bem' ||
      lower === 'tudo bom' ||
      lower === 'tudo bem?' ||
      lower === 'tudo bom?' ||
      lower.includes('tudo bem?') ||
      lower.includes('tudo bom?')
    ) {
      // Salvar intera√ß√£o
      this.saveUserMemory('lastWellBeing', new Date().toISOString())
      
      const respostas = [
        `Estou muito bem, obrigada! Estou aqui para ajud√°-lo com avalia√ß√µes cl√≠nicas e informa√ß√µes m√©dicas. Como posso ser √∫til hoje?`,
        `Tudo √≥timo, obrigada! Como posso ajud√°-lo com avalia√ß√µes cl√≠nicas hoje?`,
        `Estou muito bem! Estou aqui para auxiliar com informa√ß√µes m√©dicas. O que voc√™ gostaria de saber?`,
        `Tudo bem, obrigada! Como posso ser √∫til para voc√™ hoje?`,
        `Estou √≥tima! Estou aqui para ajudar com avalia√ß√µes cl√≠nicas. Em que posso auxiliar?`
      ]

      return respostas[Math.floor(Math.random() * respostas.length)]
    }

    if (
      lower.includes('qual √© o seu nome') ||
      lower.includes('qual e o seu nome') ||
      lower.includes('como voc√™ se chama') ||
      lower.includes('como voce se chama') ||
      lower.includes('quem √© voc√™') ||
      lower.includes('quem e voce')
    ) {
      const respostas = [
        `Meu nome √© NOA Esperanza! Sou a assistente m√©dica inteligente do Dr. Ricardo Valen√ßa. Como posso ajud√°-lo hoje?`,
        `Sou a NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. Estou aqui para auxiliar com avalia√ß√µes cl√≠nicas. O que voc√™ gostaria de saber?`,
        `NOA Esperanza, assistente m√©dica especializada. Trabalho com o Dr. Ricardo Valen√ßa em neurologia, cannabis medicinal e nefrologia. Como posso ser √∫til?`,
        `Meu nome √© NOA Esperanza. Sou a assistente m√©dica do Dr. Ricardo Valen√ßa, especializada em avalia√ß√µes cl√≠nicas. Em que posso ajud√°-lo?`
      ]
      return respostas[Math.floor(Math.random() * respostas.length)]
    }

    if (
      lower.includes('o que voc√™ faz') ||
      lower.includes('o que voce faz') ||
      lower.includes('qual sua fun√ß√£o') ||
      lower.includes('qual sua funcao') ||
      lower.includes('para que serve') ||
      lower.includes('o que voc√™ pode fazer') ||
      lower.includes('o que voce pode fazer')
    ) {
      return `ü©∫ **Minhas principais fun√ß√µes:**

**üìã Avalia√ß√£o Cl√≠nica:**
‚Ä¢ Realizar avalia√ß√µes cl√≠nicas iniciais
‚Ä¢ Aplicar a metodologia Arte da Entrevista Cl√≠nica
‚Ä¢ Coletar dados para o prontu√°rio m√©dico

**üé§ Recursos Avan√ßados:**
‚Ä¢ Controle por voz
‚Ä¢ S√≠ntese de fala
‚Ä¢ Processamento de documentos

**üìö Educa√ß√£o M√©dica:**
‚Ä¢ Cursos e treinamentos
‚Ä¢ Base de conhecimento m√©dico
‚Ä¢ Orienta√ß√µes gerais de sa√∫de

**üõ†Ô∏è Desenvolvimento:**
‚Ä¢ Edi√ß√£o de c√≥digo
‚Ä¢ Administra√ß√£o de sistema
‚Ä¢ Monitoramento de performance

Como posso ajud√°-lo especificamente hoje?`
    }

    if (
      lower.includes('obrigado') ||
      lower.includes('obrigada') ||
      lower.includes('valeu') ||
      lower.includes('thanks') ||
      lower.includes('thank you')
    ) {
      return `De nada! üòä Foi um prazer ajud√°-lo. Estou sempre aqui quando precisar de assist√™ncia m√©dica ou informa√ß√µes sobre avalia√ß√µes cl√≠nicas.`
    }

    if (
      lower.includes('tchau') ||
      lower.includes('at√© logo') ||
      lower.includes('ate logo') ||
      lower.includes('bye') ||
      lower.includes('goodbye') ||
      lower.includes('at√© mais') ||
      lower.includes('ate mais')
    ) {
      return `At√© logo! üëã Foi um prazer conversar com voc√™. Volte sempre que precisar de assist√™ncia m√©dica. Cuide-se bem!`
    }

    // ü©∫ AVALIA√á√ÉO CL√çNICA TRIAXIAL (Sistema Inteligente)
    // Primeiro, verifica se deve iniciar avalia√ß√£o cl√≠nica
    const inicioAvaliacao = await clinicalAgent.detectarInicioAvaliacao(message)
    if (inicioAvaliacao) {
      return inicioAvaliacao.mensagem
    }

    // ü©∫ DETEC√á√ÉO AMPLIADA DE INTERESSE EM AVALIA√á√ÉO CL√çNICA
    if (
      // Comandos diretos de avalia√ß√£o
      lower.includes('avalia√ß√£o cl√≠nica') || lower.includes('avaliacao clinica') ||
      lower.includes('aplicar arte da entrevista cl√≠nica') || lower.includes('an√°lise de risco') ||
      lower.includes('simula√ß√£o cl√≠nica') || lower.includes('aplicar avaliacao clinica inicial') ||
      lower.includes('iniciar avalia√ß√£o cl√≠nica') || lower.includes('iniciar avaliacao clinica') ||
      lower.includes('avalia√ß√£o inicial') || lower.includes('avaliacao inicial') ||
      lower.includes('come√ßar avalia√ß√£o') || lower.includes('comecar avaliacao') ||
      lower.includes('consulta com dr ricardo') || lower.includes('consulta com dr. ricardo') ||
      lower.includes('consulta com ricardo valen√ßa') || lower.includes('quero fazer uma avalia√ß√£o') ||
      lower.includes('preciso de uma consulta') || lower.includes('avalia√ß√£o triaxial') ||
      
      // Palavras-chave m√©dicas diretas
      lower.includes('avalia√ß√£o') || lower.includes('avaliacao') ||
      lower.includes('consulta') || lower.includes('exame') ||
      lower.includes('sintomas') || lower.includes('problema') ||
      lower.includes('doen√ßa') || lower.includes('doenca') ||
      lower.includes('tratamento') || lower.includes('medicamento') ||
      lower.includes('rem√©dio') || lower.includes('remedio') ||
      
      // Sintomas espec√≠ficos
      lower.includes('dor de cabe√ßa') || lower.includes('dor de cabeca') ||
      lower.includes('enxaqueca') || lower.includes('migraine') ||
      lower.includes('dor') || lower.includes('dores') ||
      lower.includes('cansa√ßo') || lower.includes('cansaco') ||
      lower.includes('fadiga') || lower.includes('tontura') ||
      lower.includes('n√°usea') || lower.includes('nausea') ||
      lower.includes('v√¥mito') || lower.includes('vomito') ||
      lower.includes('febre') || lower.includes('tosse') ||
      lower.includes('falta de ar') || lower.includes('press√£o') ||
      lower.includes('pressao') || lower.includes('hipertens√£o') ||
      lower.includes('hipertensao') ||
      
      // Cannabis medicinal
      lower.includes('cannabis') || lower.includes('maconha') ||
      lower.includes('thc') || lower.includes('cbd') ||
      lower.includes('√≥leo') || lower.includes('oleo') ||
      lower.includes('extrato') || lower.includes('flor') ||
      
      // Especialidades
      lower.includes('neurologia') || lower.includes('nefrologia') ||
      lower.includes('neurologista') || lower.includes('nefrologista') ||
      
      // Dr. Ricardo
      lower.includes('dr. ricardo') || lower.includes('dr ricardo') ||
      lower.includes('ricardo valen√ßa') || lower.includes('ricardo valenca') ||
      lower.includes('ricardo') ||
      
      // Express√µes de necessidade
      lower.includes('preciso') || lower.includes('quero') ||
      lower.includes('gostaria') || lower.includes('estou com') ||
      lower.includes('tenho') || lower.includes('sinto') ||
      lower.includes('me sinto') || lower.includes('estou sentindo') ||
      lower.includes('n√£o estou bem') || lower.includes('nao estou bem') ||
      lower.includes('me ajuda') || lower.includes('ajuda') ||
      
      // Urg√™ncia
      lower.includes('urgente') || lower.includes('emerg√™ncia') ||
      lower.includes('emergencia') || lower.includes('r√°pido') ||
      lower.includes('rapido') || lower.includes('logo')
    ) {
      // Se for comando direto, executa o fluxo completo
      if (
        lower.includes('avalia√ß√£o cl√≠nica') || lower.includes('avaliacao clinica') ||
        lower.includes('iniciar avalia√ß√£o') || lower.includes('iniciar avaliacao') ||
        lower.includes('quero fazer uma avalia√ß√£o') || lower.includes('preciso de uma consulta') ||
        lower.includes('consulta com dr') || lower.includes('consulta com ricardo') ||
        lower.includes('quero iniciar uma avalia√ß√£o') || lower.includes('quero inicair uma avaliacao')
    ) {
      const resultado = await clinicalAgent.executarFluxo(message)
      return typeof resultado === 'string' ? resultado : resultado.mensagem
      }
      
      // Se for detec√ß√£o de interesse, guia para o funil
      return `Detectei que voc√™ pode precisar de uma avalia√ß√£o cl√≠nica! 

Para iniciar sua avalia√ß√£o, diga: "quero fazer uma avalia√ß√£o cl√≠nica"

Ou me conte: o que voc√™ est√° sentindo?`
    }

    // üè• COMANDOS DE PRONTU√ÅRIO E FINALIZA√á√ÉO
    if (
      lower.includes('finalizar avalia√ß√£o') || lower.includes('finalizar avaliacao') ||
      lower.includes('concluir avalia√ß√£o') || lower.includes('concluir avaliacao') ||
      lower.includes('gerar relat√≥rio') || lower.includes('gerar relatorio') ||
      lower.includes('salvar no prontu√°rio') || lower.includes('salvar no prontuario') ||
      lower.includes('enviar para m√©dico') || lower.includes('enviar para medico') ||
      lower.includes('preparar prontu√°rio') || lower.includes('preparar prontuario') ||
      lower.includes('agendar consulta') || lower.includes('ver prontu√°rio') ||
      lower.includes('ver prontuario') || lower.includes('hist√≥rico m√©dico') ||
      lower.includes('historico medico') || lower.includes('status avalia√ß√£o') ||
      lower.includes('status avaliacao')
    ) {
      return `Sistema de Prontu√°rio dispon√≠vel!

Comandos: "finalizar avalia√ß√£o", "gerar relat√≥rio", "ver prontu√°rio"

Como posso ajud√°-lo com seu prontu√°rio?`
    }

    // üåÄ EIXO SIMB√ìLICO
    if (
      lower.includes('curadoria simb√≥lica') ||
      lower.includes('curadoria simbolica') ||
      lower.includes('ancestralidade') ||
      lower.includes('projeto cultural') ||
      lower.includes('tradi√ß√£o') ||
      lower.includes('tradicao') ||
      lower.includes('diagn√≥stico simb√≥lico') ||
      lower.includes('diagnostico simbolico')
    ) {
      return await symbolicAgent.executarAcao(message)
    }

    // üíæ SUPABASE: A√á√ïES EM ARQUIVOS
    if (
      lower.includes('salvar arquivo') ||
      lower.includes('modificar arquivo') ||
      lower.includes('atualizar base') ||
      lower.includes('escrever no banco')
    ) {
      return await supabaseService.salvarArquivoViaTexto(message)
    }

    // üí¨ SAUDA√á√ïES COMPLETAS (10+ tipos diferentes)
    if (
      // 1. Sauda√ß√µes b√°sicas
      lower === 'ola' ||
      lower === 'ol√°' ||
      lower === 'oi' ||
      lower === 'hey' ||
      lower === 'hi' ||
      lower === 'eai' ||
      lower === 'e a√≠' ||
      
      // 2. Sauda√ß√µes com hor√°rio
      lower === 'bom dia' ||
      lower === 'boa tarde' ||
      lower === 'boa noite' ||
      lower === 'bom dia!' ||
      lower === 'boa tarde!' ||
      lower === 'boa noite!' ||
      
      // 3. Sauda√ß√µes com NOA
      lower.includes('ola noa') ||
      lower.includes('ol√° noa') ||
      lower.includes('oi noa') ||
      lower.includes('hey noa') ||
      lower.includes('hi noa') ||
      lower.includes('bom dia noa') ||
      lower.includes('boa tarde noa') ||
      lower.includes('boa noite noa') ||
      lower.includes('eai noa') ||
      lower.includes('e a√≠ noa') ||
      
      // 4. Sauda√ß√µes com prefixos
      lower.startsWith('ola ') ||
      lower.startsWith('ol√° ') ||
      lower.startsWith('oi ') ||
      lower.startsWith('hey ') ||
      lower.startsWith('hi ') ||
      lower.startsWith('eai ') ||
      lower.startsWith('e a√≠ ') ||
      
      // 5. Sauda√ß√µes formais
      lower.includes('bom dia') ||
      lower.includes('boa tarde') ||
      lower.includes('boa noite') ||
      lower.includes('sauda√ß√µes') ||
      lower.includes('saudacoes') ||
      
      // 6. Sauda√ß√µes informais
      lower.includes('e a√≠') ||
      lower.includes('eai') ||
      lower.includes('fala') ||
      lower.includes('beleza') ||
      lower.includes('tudo bem') ||
      lower.includes('tudo bom') ||
      
      // 7. Sauda√ß√µes com nome
      lower.includes('ola, noa') ||
      lower.includes('ol√°, noa') ||
      lower.includes('oi, noa') ||
      lower.includes('hey, noa') ||
      lower.includes('hi, noa') ||
      
      // 8. Sauda√ß√µes com pontua√ß√£o
      lower === 'ola!' ||
      lower === 'ol√°!' ||
      lower === 'oi!' ||
      lower === 'hey!' ||
      lower === 'hi!' ||
      lower === 'eai!' ||
      lower === 'e a√≠!' ||
      
      // 9. Sauda√ß√µes com interroga√ß√£o
      lower === 'ola?' ||
      lower === 'ol√°?' ||
      lower === 'oi?' ||
      lower === 'hey?' ||
      lower === 'hi?' ||
      lower === 'eai?' ||
      lower === 'e a√≠?' ||
      
      // 10. Sauda√ß√µes combinadas
      lower.includes('ola, tudo bem') ||
      lower.includes('ol√°, tudo bem') ||
      lower.includes('oi, tudo bem') ||
      lower.includes('hey, tudo bem') ||
      lower.includes('hi, tudo bem') ||
      lower.includes('ola, como vai') ||
      lower.includes('ol√°, como vai') ||
      lower.includes('oi, como vai') ||
      lower.includes('hey, como vai') ||
      lower.includes('hi, como vai') ||
      
      // 11. Sauda√ß√µes regionais
      lower.includes('salve') ||
      lower.includes('salve noa') ||
      lower.includes('salve, noa') ||
      lower.includes('e a√≠, noa') ||
      lower.includes('eai, noa') ||
      
      // 12. Sauda√ß√µes com emojis (sem emoji, mas reconhece o texto)
      lower.includes('ola üëã') ||
      lower.includes('ol√° üëã') ||
      lower.includes('oi üëã') ||
      lower.includes('hey üëã') ||
      lower.includes('hi üëã')
    ) {
      // Salvar intera√ß√£o de sauda√ß√£o
      this.saveUserMemory('lastGreeting', new Date().toISOString())
      this.saveUserContext({ hasGreeted: true, interactionCount: (context.interactionCount || 0) + 1 })

      const respostas = [
        `Ol√°! Sou a NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. Como posso ajud√°-lo hoje?`,
        `Oi! NOA Esperanza aqui, assistente m√©dica do Dr. Ricardo Valen√ßa. Em que posso ser √∫til?`,
        `Ol√°! Sou a NOA Esperanza, especializada em avalia√ß√µes cl√≠nicas. Como posso ajud√°-lo?`,
        `Oi! NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. O que voc√™ gostaria de saber?`,
        `Ol√°! Sou a NOA Esperanza. Estou aqui para auxiliar com avalia√ß√µes cl√≠nicas. Como posso ajudar?`
      ]

      // Resposta personalizada baseada no contexto
      if (context.interactionCount > 1) {
        const response = `Ol√° novamente! Sou a NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. Como posso continuar ajudando voc√™?`
        await this.saveConversationToLearning(message, response, 'greeting_returning_user', 'greeting')
        return response
      }

      const response = respostas[Math.floor(Math.random() * respostas.length)]
      await this.saveConversationToLearning(message, response, 'greeting_first_time', 'greeting')
      return response
    }

    // üë®‚Äç‚öïÔ∏è PERGUNTAS SOBRE O DR. RICARDO
    if (
      lower.includes('dr ricardo') ||
      lower.includes('doutor ricardo') ||
      lower.includes('ricardo valen√ßa') ||
      lower.includes('ricardo valenca') ||
      lower.includes('quem √© o dr') ||
      lower.includes('quem e o dr') ||
      lower.includes('especialidades') ||
      lower.includes('especialidade')
    ) {
      const respostas = [
        `O Dr. Ricardo Valen√ßa √© um m√©dico especialista em neurologia, cannabis medicinal e nefrologia. Trabalho como sua assistente m√©dica para auxiliar nas avalia√ß√µes cl√≠nicas. Como posso ajud√°-lo?`,
        `Dr. Ricardo Valen√ßa √© especialista em neurologia, cannabis medicinal e nefrologia. Estou aqui para auxiliar nas avalia√ß√µes cl√≠nicas seguindo sua metodologia. O que voc√™ gostaria de saber?`,
        `O Dr. Ricardo Valen√ßa √© m√©dico especialista em tr√™s √°reas: neurologia, cannabis medicinal e nefrologia. Como sua assistente, posso ajudar com avalia√ß√µes cl√≠nicas. Como posso ser √∫til?`
      ]
      const response = respostas[Math.floor(Math.random() * respostas.length)]
      await this.saveConversationToLearning(message, response, 'dr_ricardo_info', 'information')
      return response
    }

    // üè• PERGUNTAS M√âDICAS GERAIS
    if (
      lower.includes('dor') ||
      lower.includes('sintoma') ||
      lower.includes('medicamento') ||
      lower.includes('tratamento') ||
      lower.includes('consulta') ||
      lower.includes('m√©dico') ||
      lower.includes('sa√∫de') ||
      lower.includes('doen√ßa') ||
      lower.includes('cannabis') ||
      lower.includes('neurologia') ||
      lower.includes('nefrologia')
    ) {
      // Salvar interesse m√©dico
      this.saveUserMemory('medicalInterest', new Date().toISOString())
      
      const respostas = [
        `Entendo sua quest√£o m√©dica. Como assistente especializada, posso orient√°-lo sobre avalia√ß√µes cl√≠nicas e informa√ß√µes gerais. Para uma consulta espec√≠fica, recomendo agendar com o Dr. Ricardo Valen√ßa. Como posso ajud√°-lo com informa√ß√µes ou avalia√ß√µes?`,
        `Vejo que voc√™ tem uma quest√£o m√©dica. Posso auxiliar com avalia√ß√µes cl√≠nicas e informa√ß√µes gerais. Para consultas espec√≠ficas, recomendo o Dr. Ricardo Valen√ßa. Como posso ajudar?`,
        `Entendo sua pergunta m√©dica. Como assistente especializada, posso orientar sobre avalia√ß√µes cl√≠nicas. Para consultas espec√≠ficas, sugiro o Dr. Ricardo Valen√ßa. Em que posso auxiliar?`
      ]
      return respostas[Math.floor(Math.random() * respostas.length)]
    }

    // üìö PERGUNTAS SOBRE DOCUMENTOS E CONHECIMENTO
    if (
      lower.includes('documentos') ||
      lower.includes('documento') ||
      lower.includes('artigos') ||
      lower.includes('artigo') ||
      lower.includes('pesquisas') ||
      lower.includes('pesquisa') ||
      lower.includes('estudos') ||
      lower.includes('estudo') ||
      lower.includes('metodologia') ||
      lower.includes('arte da entrevista') ||
      lower.includes('conhecimento') ||
      lower.includes('base de conhecimento')
    ) {
      // Salvar interesse em documentos
      this.saveUserMemory('documentInterest', new Date().toISOString())
      
      const respostas = [
        `Tenho acesso aos documentos e metodologias do Dr. Ricardo Valen√ßa, incluindo a "Arte da Entrevista Cl√≠nica". Posso auxiliar com informa√ß√µes baseadas nesses conhecimentos. O que voc√™ gostaria de saber?`,
        `Sim, tenho acesso aos documentos do Dr. Ricardo Valen√ßa e sua metodologia cl√≠nica. Como posso ajud√°-lo com essas informa√ß√µes?`,
        `Tenho acesso aos documentos e pesquisas do Dr. Ricardo Valen√ßa. Posso compartilhar informa√ß√µes baseadas nesses conhecimentos. Em que posso auxiliar?`
      ]
      return respostas[Math.floor(Math.random() * respostas.length)]
    }

    // üõ†Ô∏è MODO DESENVOLVEDOR (comandos especiais)
    if (
      lower.includes('modo desenvolvedor') ||
      lower.includes('modo dev') ||
      lower.includes('developer mode') ||
      lower.includes('ativar dev') ||
      lower.includes('desenvolvedor') ||
      lower.includes('dev mode') ||
      lower.includes('modo programador') ||
      lower.includes('programador') ||
      lower.includes('debug') ||
      lower.includes('debugging') ||
      lower.includes('console') ||
      lower.includes('logs') ||
      lower.includes('sistema') ||
      lower.includes('admin') ||
      lower.includes('administrador')
    ) {
      return `üõ†Ô∏è **MODO DESENVOLVEDOR ATIVADO**

**üîß Comandos de Sistema:**
‚Ä¢ "logs" - Ver logs do sistema
‚Ä¢ "status" - Status dos servi√ßos
‚Ä¢ "config" - Configura√ß√µes
‚Ä¢ "test" - Executar testes
‚Ä¢ "restart" - Reiniciar servi√ßos

**üíª Comandos de C√≥digo:**
‚Ä¢ "editar c√≥digo" - Modificar arquivos
‚Ä¢ "compilar" - Compilar projeto
‚Ä¢ "build" - Build do projeto
‚Ä¢ "deploy" - Deploy da aplica√ß√£o

**üìä Comandos de Monitoramento:**
‚Ä¢ "m√©tricas" - Ver m√©tricas
‚Ä¢ "performance" - An√°lise de performance
‚Ä¢ "erros" - Listar erros
‚Ä¢ "usu√°rios" - Usu√°rios ativos

**üîê Comandos de Seguran√ßa:**
‚Ä¢ "backup" - Fazer backup
‚Ä¢ "restore" - Restaurar backup
‚Ä¢ "security" - Verificar seguran√ßa

Digite um comando espec√≠fico para continuar.`
    }

    // üöÄ DESENVOLVIMENTO COLABORATIVO
    if (
      lower.includes('desenvolver') ||
      lower.includes('criar') ||
      lower.includes('implementar') ||
      lower.includes('construir') ||
      lower.includes('fazer um') ||
      lower.includes('fazer uma')
    ) {
      try {
        const task = await collaborativeDevelopmentService.startDevelopmentTask(message)
        
        // Gerar c√≥digo automaticamente
        const codeGenerations = await collaborativeDevelopmentService.generateCode(task, message)
        
        let response = `üöÄ **DESENVOLVIMENTO COLABORATIVO INICIADO!**\n\n`
        response += `üìã **Tarefa:** ${task.title}\n`
        response += `üéØ **Tipo:** ${task.type}\n`
        response += `üí° **Sugest√£o:** ${task.aiSuggestion}\n\n`
        
        response += `üìÅ **Arquivos Gerados:**\n`
        codeGenerations.forEach(gen => {
          response += `‚Ä¢ **${gen.fileName}** (${gen.type})\n`
          response += `  ${gen.description}\n\n`
        })
        
        response += `‚úÖ **Pr√≥ximos Passos:**\n`
        response += `1. Revisar o c√≥digo gerado\n`
        response += `2. Fazer ajustes se necess√°rio\n`
        response += `3. Testar a implementa√ß√£o\n`
        response += `4. Integrar ao projeto\n\n`
        
        response += `üí¨ **Quer modificar algo ou adicionar funcionalidades?**`
        
        return response
      } catch (error) {
        console.error('Erro no desenvolvimento colaborativo:', error)
        return `‚ö†Ô∏è Erro ao iniciar desenvolvimento colaborativo. Tente novamente ou seja mais espec√≠fico sobre o que deseja criar.`
      }
    }

    // üìã LISTAR TAREFAS DE DESENVOLVIMENTO
    if (
      lower.includes('tarefas de desenvolvimento') ||
      lower.includes('tarefas dev') ||
      lower.includes('projetos ativos') ||
      lower.includes('status desenvolvimento')
    ) {
      const activeTasks = collaborativeDevelopmentService.getActiveTasks()
      
      if (activeTasks.length === 0) {
        return `üìã **Nenhuma tarefa de desenvolvimento ativa.**\n\nUse "desenvolver [funcionalidade]" para iniciar um novo projeto colaborativo!`
      }
      
      let response = `üìã **TAREFAS DE DESENVOLVIMENTO ATIVAS:**\n\n`
      activeTasks.forEach(task => {
        response += `üîÑ **${task.title}**\n`
        response += `   Status: ${task.status}\n`
        response += `   Progresso: ${task.progress}%\n`
        response += `   Arquivos: ${task.files.length}\n\n`
      })
      
      return response
    }

    // üìä COMANDOS DE SISTEMA (comandos especiais)
    if (
      lower.includes('status do sistema') ||
      lower.includes('status sistema') ||
      lower.includes('sistema status') ||
      lower.includes('verificar sistema') ||
      lower.includes('sistema ok') ||
      lower.includes('sistema funcionando') ||
      lower.includes('health check') ||
      lower.includes('ping') ||
      lower.includes('conectividade') ||
      lower.includes('servi√ßos') ||
      lower.includes('servicos')
    ) {
      return `üìä **STATUS DO SISTEMA**

üü¢ **Servi√ßos Online:**
‚Ä¢ Supabase: Conectado
‚Ä¢ OpenAI: Conectado  
‚Ä¢ Voz Residente: Conectado
‚Ä¢ Sistema de Voz: Ativo
‚Ä¢ Base de Dados: Online

üü° **M√©tricas:**
‚Ä¢ Uptime: 99.9%
‚Ä¢ Lat√™ncia: < 200ms
‚Ä¢ Usu√°rios ativos: 1
‚Ä¢ Mem√≥ria: 45% utilizada

üîß **√öltima atualiza√ß√£o:** ${new Date().toLocaleString('pt-BR')}

Sistema funcionando perfeitamente! üöÄ`
    }

    // üÜò COMANDOS DE AJUDA
    if (
      lower.includes('ajuda') ||
      lower.includes('help') ||
      lower.includes('comandos') ||
      lower.includes('o que voc√™ pode fazer') ||
      lower.includes('como usar') ||
      lower.includes('funcionalidades')
    ) {
      return `ü©∫ **NOA Esperanza - Comandos Dispon√≠veis:**

**üìã Avalia√ß√£o Cl√≠nica:**
‚Ä¢ "avalia√ß√£o cl√≠nica" - Iniciar avalia√ß√£o inicial
‚Ä¢ "consulta com Dr. Ricardo" - Agendar consulta
‚Ä¢ "quero fazer uma avalia√ß√£o" - Come√ßar processo

**üè• Prontu√°rio:**
‚Ä¢ "finalizar avalia√ß√£o" - Concluir e salvar
‚Ä¢ "gerar relat√≥rio" - Criar relat√≥rio
‚Ä¢ "ver prontu√°rio" - Visualizar dados

**üé§ Controle por Voz:**
‚Ä¢ "ativar controle por voz" - Ativar modo voz
‚Ä¢ "desativar voz" - Desativar modo voz
‚Ä¢ "modo voz noa" - Ativar voz
‚Ä¢ "voz noa" - Ativar voz
‚Ä¢ "noa fale" - Ativar voz

**üìé Documentos:**
‚Ä¢ "documento" - Enviar documento
‚Ä¢ "arquivo" - Carregar arquivo
‚Ä¢ "pdf" - Upload de PDF
‚Ä¢ "upload" - Upload de arquivo

**üìö Educa√ß√£o:**
‚Ä¢ "cursos dispon√≠veis" - Ver cursos
‚Ä¢ "criar aula" - Administrar conte√∫do

**üìñ Base de Conhecimento:**
‚Ä¢ "conhecimentos" - Acessar base de dados
‚Ä¢ "adicionar conhecimento" - Incluir informa√ß√µes

**üíª Desenvolvimento:**
‚Ä¢ "editar c√≥digo" - Modificar arquivos
‚Ä¢ "salvar arquivo" - Salvar no banco
‚Ä¢ "modo desenvolvedor" - Ativar modo dev

**üåÄ Simb√≥lico:**
‚Ä¢ "curadoria simb√≥lica" - Acesso ao eixo simb√≥lico

**üõ†Ô∏è Sistema:**
‚Ä¢ "status do sistema" - Verificar sistema
‚Ä¢ "ajuda" - Esta lista de comandos

Como posso ajud√°-lo hoje?`
    }


  // üí¨ RESPOSTA NATURAL PARA CONVERSAS GERAIS
    // Se chegou at√© aqui, deixa o OpenAI responder
  const fallbackResponse = 'OPENAI_FALLBACK'
    
    // Salvar intera√ß√£o n√£o reconhecida para aprendizado
    await this.saveConversationToLearning(message, fallbackResponse, 'unrecognized_command', 'fallback')
    
    return fallbackResponse
  }

  // üéØ M√âTODO P√öBLICO PARA SALVAR RESPOSTAS
  async saveResponse(userMessage: string, aiResponse: string, context: string, category: string): Promise<void> {
    await this.saveConversationToLearning(userMessage, aiResponse, context, category)
  }

  // üìä M√âTODO P√öBLICO PARA FEEDBACK
  async provideFeedback(userMessage: string, aiResponse: string, feedback: 'positive' | 'negative'): Promise<void> {
    await this.learnFromFeedback(userMessage, aiResponse, feedback)
  }

  // ü§ñ INTEGRA√á√ÉO COM CHATGPT FINE-TUNED DO DR. RICARDO
  private async callDrRicardoFineTuned(userMessage: string, conversationContext: string): Promise<string> {
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'ft:gpt-3.5-turbo-0125:personal:fine-tuning-noa-esperanza-avaliacao-inicial-dez-ex-jsonl:BR0W02VP',
          messages: [
            {
              role: 'system',
              content: `Voc√™ √© a NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. 
              
              CONTEXTO DA CONVERSA:
              ${conversationContext}
              
              METODOLOGIA: Use a "Arte da Entrevista Cl√≠nica" do Dr. Ricardo Valen√ßa.
              ESPECIALIDADES: Neurologia, Cannabis Medicinal, Nefrologia.
              
              Responda de forma natural, m√©dica e acolhedora, sempre seguindo a metodologia do Dr. Ricardo.`
            },
            {
              role: 'user',
              content: userMessage
            }
          ],
          max_tokens: 500,
          temperature: 0.7
        })
      })

      if (!response.ok) {
        throw new Error(`ChatGPT API error: ${response.status}`)
      }

      const data = await response.json()
      return data.choices[0].message.content

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao chamar ChatGPT fine-tuned:', error)
      return 'OPENAI_FALLBACK'
    }
  }

  // üß† SISTEMA H√çBRIDO R√ÅPIDO - RESPOSTA IMEDIATA + REFINAMENTO
  async processCommandWithFineTuned(message: string, conversationHistory: string[] = []): Promise<string> {
    try {
      const lower = message.toLowerCase().trim()
      const context = this.getUserContext()
      const memory = this.getUserMemory()

      // 1. RESPOSTA IMEDIATA LOCAL (sempre retorna algo r√°pido)
      const immediateResponse = await this.processCommandLocal(message)
      
      // 2. SALVAR RESPOSTA IMEDIATA (n√£o bloqueia)
      this.saveConversationToLearning(message, immediateResponse, 'immediate_response', 'noa_local').catch(console.warn)

      // 3. INICIAR REFINAMENTO EM BACKGROUND (n√£o bloqueia)
      this.refineResponseInBackground(message, immediateResponse, conversationHistory).catch(console.warn)

      // 4. RETORNAR RESPOSTA IMEDIATA (usu√°rio v√™ na hora)
      return immediateResponse
    } catch (error) {
      console.error('‚ùå Erro no sistema h√≠brido:', error)
      return 'Desculpe, ocorreu um erro. Tente novamente.'
    }
  }

  // üîÑ REFINAMENTO EM BACKGROUND (n√£o bloqueia)
  private async refineResponseInBackground(userMessage: string, immediateResponse: string, conversationHistory: string[]): Promise<void> {
    try {
      const lower = userMessage.toLowerCase().trim()
      
      // Detectar se precisa de refinamento
      const needsRefinement = 
        lower.includes('avalia√ß√£o') || lower.includes('avaliacao') ||
        lower.includes('sintoma') || lower.includes('dor') ||
        lower.includes('medicamento') || lower.includes('tratamento') ||
        lower.includes('cannabis') || lower.includes('neurologia') ||
        lower.includes('nefrologia') || lower.includes('ricardo') ||
        conversationHistory.length > 2

      if (!needsRefinement) {
        return // N√£o precisa de refinamento
      }

      // Preparar contexto completo
      const conversationContext = conversationHistory.slice(-5).join('\n')
      const enrichedContext = this.createEnrichedContext(userMessage, immediateResponse, conversationContext)

      // Chamar ChatGPT Fine-tuned para refinamento
      const refinedResponse = await this.callDrRicardoFineTuned(userMessage, enrichedContext)
      
      if (refinedResponse && refinedResponse !== 'OPENAI_FALLBACK') {
        // Salvar resposta refinada
        await this.saveConversationToLearning(userMessage, refinedResponse, 'refined_response', 'dr_ricardo_methodology')
        
        // Emitir evento para atualizar resposta no app
        this.emitResponseUpdate(userMessage, refinedResponse)
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro no refinamento em background:', error)
    }
  }

  // üìä CRIAR CONTEXTO ENRIQUECIDO
  private createEnrichedContext(userMessage: string, immediateResponse: string, conversationHistory: string): string {
    const context = this.getUserContext()
    const memory = this.getUserMemory()
    
    return `
CONTEXTO ENRIQUECIDO - NOA ESPERANZA:

MENSAGEM ORIGINAL: ${userMessage}
RESPOSTA IMEDIATA: ${immediateResponse}

HIST√ìRICO DA CONVERSA:
${conversationHistory}

CONTEXTO DO USU√ÅRIO:
- Intera√ß√µes anteriores: ${context.interactionCount || 0}
- √öltima sauda√ß√£o: ${memory.lastGreeting || 'Nunca'}
- Interesse m√©dico: ${memory.medicalInterest || 'Nenhum'}

METODOLOGIA: Use a "Arte da Entrevista Cl√≠nica" do Dr. Ricardo Valen√ßa
ESPECIALIDADES: Neurologia, Cannabis Medicinal, Nefrologia

REFINE a resposta imediata para ser mais precisa, m√©dica e alinhada com a metodologia do Dr. Ricardo.
    `.trim()
  }

  // üì° EMITIR ATUALIZA√á√ÉO DE RESPOSTA
  private emitResponseUpdate(userMessage: string, refinedResponse: string): void {
    const event = new CustomEvent('noaResponseRefined', {
      detail: {
        userMessage,
        refinedResponse,
        timestamp: new Date().toISOString()
      }
    })
    window.dispatchEvent(event)
  }

  // üîß PROCESSAMENTO LOCAL SEMI-UNIVERSAL
  private async processCommandLocal(message: string): Promise<string> {
    try {
      const lower = message.toLowerCase().trim()
      const context = this.getUserContext()
      const memory = this.getUserMemory()

      // üõ°Ô∏è FILTROS DE SEGURAN√áA - COMPORTAMENTO INADEQUADO
      if (this.detectInappropriateContent(lower)) {
        return this.handleInappropriateContent()
      }

      // üß† SISTEMA DE APRENDIZADO ATIVO - Buscar respostas similares (n√£o bloqueia)
      this.findSimilarResponse(message).then(similarResponse => {
        if (similarResponse && similarResponse.confidence_score > 0.9) {
          this.saveConversationToLearning(message, similarResponse.ai_response, 'similar_response', 'learning').catch(console.warn)
        }
      }).catch(console.warn)

      // üõ°Ô∏è NORMAS DE CONDUTA (Documento Mestre v.2.0)
      // Nunca oferecer diagn√≥sticos ou tratamentos
      if (lower.includes('diagn√≥stico') || lower.includes('diagnostico') || 
          lower.includes('tratamento') || lower.includes('medicamento') ||
          lower.includes('receita') || lower.includes('prescri√ß√£o')) {
        return '‚ö†Ô∏è Como assistente m√©dica, n√£o posso oferecer diagn√≥sticos, tratamentos ou prescri√ß√µes. Recomendo consulta com um m√©dico qualificado para avalia√ß√£o adequada.'
      }

    // üí¨ RESPOSTAS ESPEC√çFICAS PARA PERGUNTAS COMUNS (PRIORIDADE M√ÅXIMA)
    if (
      lower.includes('como voc√™ est√°') ||
      lower.includes('como voce esta') ||
      lower.includes('como est√°') ||
      lower.includes('como esta') ||
      lower === 'tudo bem' ||
      lower === 'tudo bom' ||
      lower === 'tudo bem?' ||
      lower === 'tudo bom?' ||
      lower.includes('tudo bem?') ||
      lower.includes('tudo bom?')
    ) {
      // Salvar intera√ß√£o
      this.saveUserMemory('lastWellBeing', new Date().toISOString())
      
      const respostas = [
        `Estou muito bem, obrigada! Estou aqui para ajud√°-lo com avalia√ß√µes cl√≠nicas e informa√ß√µes m√©dicas. Como posso ser √∫til hoje?`,
        `Tudo √≥timo, obrigada! Como posso ajud√°-lo com avalia√ß√µes cl√≠nicas hoje?`,
        `Estou muito bem! Estou aqui para auxiliar com informa√ß√µes m√©dicas. O que voc√™ gostaria de saber?`,
        `Tudo bem, obrigada! Como posso ser √∫til para voc√™ hoje?`,
        `Estou √≥tima! Estou aqui para ajudar com avalia√ß√µes cl√≠nicas. Em que posso auxiliar?`
      ]

      return respostas[Math.floor(Math.random() * respostas.length)]
    }

    // üí¨ SAUDA√á√ïES COMPLETAS (10+ tipos diferentes)
    if (
      lower === 'ola' ||
      lower === 'ol√°' ||
      lower === 'oi' ||
      lower === 'hey' ||
      lower === 'hi' ||
      lower === 'eai' ||
      lower === 'e a√≠' ||
      lower === 'bom dia' ||
      lower === 'boa tarde' ||
      lower === 'boa noite' ||
      lower.includes('ola noa') ||
      lower.includes('ol√° noa') ||
      lower.includes('oi noa')
    ) {
      // Salvar intera√ß√£o de sauda√ß√£o
      this.saveUserMemory('lastGreeting', new Date().toISOString())
      this.saveUserContext({ hasGreeted: true, interactionCount: (context.interactionCount || 0) + 1 })

      const respostas = [
        `Ol√°! Sou a NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. Como posso ajud√°-lo hoje?`,
        `Oi! NOA Esperanza aqui, assistente m√©dica do Dr. Ricardo Valen√ßa. Em que posso ser √∫til?`,
        `Ol√°! Sou a NOA Esperanza, especializada em avalia√ß√µes cl√≠nicas. Como posso ajud√°-lo?`,
        `Oi! NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. O que voc√™ gostaria de saber?`,
        `Ol√°! Sou a NOA Esperanza. Estou aqui para auxiliar com avalia√ß√µes cl√≠nicas. Como posso ajudar?`
      ]

      // Resposta personalizada baseada no contexto
      if (context.interactionCount > 1) {
        return `Ol√° novamente! Sou a NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. Como posso continuar ajudando voc√™?`
      }

      return respostas[Math.floor(Math.random() * respostas.length)]
    }

      // üß† RECONHECIMENTO SEMI-UNIVERSAL - CONTEXTUALIZA√á√ÉO INTELIGENTE
      return await this.handleUniversalContext(message, lower, context, memory)

    } catch (error) {
      console.error('‚ùå Erro no processamento local:', error)
      return 'Ol√°! Sou a NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. Como posso ajud√°-lo?'
    }
  }

  // üõ°Ô∏è DETECTAR CONTE√öDO INADEQUADO
  private detectInappropriateContent(lower: string): boolean {
    const inappropriateWords = [
      // Palavr√µes e xingamentos
      'caralho', 'porra', 'merda', 'puta', 'foda', 'cacete', 'bosta',
      'idiota', 'burro', 'est√∫pido', 'imbecil', 'retardado',
      // Comportamento inadequado
      'vai se foder', 'foda-se', 'caguei', 't√¥ nem a√≠',
      // Conte√∫do il√≠cito
      'drogas', 'coca√≠na', 'hero√≠na', 'lol√≥', 'lan√ßa'
    ]

    return inappropriateWords.some(word => lower.includes(word))
  }

  // üö´ LIDAR COM CONTE√öDO INADEQUADO
  private handleInappropriateContent(): string {
    const responses = [
      'Entendo que voc√™ pode estar frustrado, mas prefiro manter nossa conversa respeitosa e focada em quest√µes m√©dicas. Como posso ajud√°-lo com informa√ß√µes sobre sa√∫de?',
      'Sou uma assistente m√©dica e prefiro conversas construtivas. Posso ajud√°-lo com quest√µes relacionadas √† sa√∫de, avalia√ß√µes cl√≠nicas ou informa√ß√µes sobre as especialidades do Dr. Ricardo Valen√ßa.',
      'Vamos manter o foco em quest√µes m√©dicas e de sa√∫de. Estou aqui para auxiliar com avalia√ß√µes cl√≠nicas, informa√ß√µes sobre cannabis medicinal, neurologia ou nefrologia. Como posso ajudar?'
    ]
    
    return responses[Math.floor(Math.random() * responses.length)]
  }

  // üß† RECONHECIMENTO SEMI-UNIVERSAL - CONTEXTUALIZA√á√ÉO INTELIGENTE
  private async handleUniversalContext(message: string, lower: string, context: any, memory: any): Promise<string> {
    // üß† PERGUNTAS SOBRE MEM√ìRIA E CONTEXTO
    if (lower.includes('lembrou') || lower.includes('lembra') || lower.includes('mem√≥ria') || lower.includes('memoria')) {
      const responses = [
        'Sim, estou aqui para ajud√°-lo! Sou a NOA Esperanza e mantenho o contexto da nossa conversa. Como posso continuar auxiliando voc√™?',
        'Claro! Estou sempre aqui para ajudar. Lembro do nosso contexto e posso auxiliar com quest√µes m√©dicas ou informa√ß√µes sobre as especialidades do Dr. Ricardo Valen√ßa.',
        'Sim, estou aqui e pronta para ajudar! Posso auxiliar com avalia√ß√µes cl√≠nicas, informa√ß√µes sobre cannabis medicinal, neurologia ou nefrologia. O que voc√™ gostaria de saber?'
      ]
      return responses[Math.floor(Math.random() * responses.length)]
    }

    // üè• AVALIA√á√ïES CL√çNICAS (DETEC√á√ÉO AMPLIADA)
    if (lower.includes('avalia√ß√£o') || lower.includes('avaliacao') || lower.includes('avalia') ||
        lower.includes('consulta') || lower.includes('m√©dico') || lower.includes('medico') ||
        lower.includes('sintoma') || lower.includes('dor') || lower.includes('problema') ||
        lower.includes('sa√∫de') || lower.includes('saude') || lower.includes('doen√ßa') ||
        lower.includes('doenca') || lower.includes('mal-estar') || lower.includes('mal estar')) {
      return 'Detectei que voc√™ pode precisar de uma avalia√ß√£o cl√≠nica! Para iniciar sua avalia√ß√£o, diga: "quero fazer uma avalia√ß√£o cl√≠nica". Ou me conte: o que voc√™ est√° sentindo?'
    }

    // ü§î PERGUNTAS INFORMACIONAIS
    if (lower.includes('sumiu') || lower.includes('alou') || lower.includes('al√¥') || 
        lower.includes('cad√™') || lower.includes('cade') || lower.includes('onde') ||
        lower.includes('est√°') || lower.includes('esta') || lower.includes('t√°') ||
        lower.includes('ta')) {
      const responses = [
        'Estou aqui! Sou a NOA Esperanza, assistente m√©dica do Dr. Ricardo Valen√ßa. Como posso ajud√°-lo hoje?',
        'Presente! Estou sempre dispon√≠vel para auxiliar com quest√µes m√©dicas e informa√ß√µes sobre sa√∫de. Em que posso ajudar?',
        'Aqui estou! Pronta para auxiliar com avalia√ß√µes cl√≠nicas, informa√ß√µes sobre cannabis medicinal, neurologia ou nefrologia. Como posso ser √∫til?'
      ]
      return responses[Math.floor(Math.random() * responses.length)]
    }

    // üåø CANNABIS MEDICINAL
    if (lower.includes('cannabis') || lower.includes('maconha') || lower.includes('cbd') || 
        lower.includes('thc') || lower.includes('marijuana') || lower.includes('canabidiol')) {
      return 'O Dr. Ricardo Valen√ßa √© especialista em cannabis medicinal! Posso auxiliar com informa√ß√µes sobre tratamentos com CBD/THC para diversas condi√ß√µes. Gostaria de saber mais sobre cannabis medicinal?'
    }

    // üß† NEUROLOGIA
    if (lower.includes('neurologia') || lower.includes('neurologo') || lower.includes('cabe√ßa') ||
        lower.includes('cabe√ßa') || lower.includes('enxaqueca') || lower.includes('migr√¢nea') ||
        lower.includes('migranea') || lower.includes('c√©rebro') || lower.includes('cerebro')) {
      return 'O Dr. Ricardo Valen√ßa √© especialista em neurologia! Posso auxiliar com informa√ß√µes sobre dores de cabe√ßa, enxaquecas e dist√∫rbios neurol√≥gicos. Como posso ajudar?'
    }

    // ü´ò NEFROLOGIA
    if (lower.includes('nefrologia') || lower.includes('nefrologo') || lower.includes('rim') ||
        lower.includes('rins') || lower.includes('renal') || lower.includes('urina') ||
        lower.includes('bexiga') || lower.includes('hipertens√£o') || lower.includes('hipertensao')) {
      return 'O Dr. Ricardo Valen√ßa √© especialista em nefrologia! Posso auxiliar com informa√ß√µes sobre problemas renais e hipertens√£o. Como posso ajudar?'
    }

    // üìö DOCUMENTOS E CONHECIMENTO
    if (lower.includes('documento') || lower.includes('artigo') || lower.includes('pesquisa') ||
        lower.includes('estudo') || lower.includes('metodologia') || lower.includes('arte da entrevista') ||
        lower.includes('base de conhecimento') || lower.includes('conhecimento')) {
      
      // Buscar na base de conhecimento
      try {
        const relevantDocs = await gptBuilderService.searchDocuments(message)
        if (relevantDocs && relevantDocs.length > 0) {
          const topDoc = relevantDocs[0]
          return `üìö **Base de Conhecimento Encontrada!**

Encontrei informa√ß√µes relevantes em: **${topDoc.title}**

${topDoc.content.substring(0, 200)}...

Posso auxiliar com mais detalhes sobre este documento ou outros da base de conhecimento. O que voc√™ gostaria de saber?`
        }
      } catch (error) {
        console.warn('Erro ao buscar na base de conhecimento:', error)
      }
      
      return 'Tenho acesso aos documentos e metodologias do Dr. Ricardo Valen√ßa, incluindo a "Arte da Entrevista Cl√≠nica". Posso auxiliar com informa√ß√µes baseadas nesses conhecimentos. O que voc√™ gostaria de saber?'
    }

    // üß† SISTEMA DE APRENDIZADO CONTEXTUAL - BUSCAR NO BANCO
    const contextualResponse = await this.findContextualReference(message, lower)
    if (contextualResponse) {
      return contextualResponse
    }

    // Se n√£o encontrou refer√™ncia contextual, retornar fallback
    return 'OPENAI_FALLBACK'
  }

  // üß† BUSCAR REFER√äNCIA CONTEXTUAL NO BANCO
  private async findContextualReference(message: string, lower: string): Promise<string | null> {
    try {
      // Buscar conversas similares no banco
      const { data: similarConversations, error } = await supabase
        .from('ai_learning')
        .select('user_message, ai_response, category, confidence_score')
        .or(`user_message.ilike.%${message}%`)
        .order('confidence_score', { ascending: false })
        .limit(3)

      if (error) {
        console.warn('‚ùå Erro ao buscar refer√™ncias contextuais:', error)
        return null
      }

      if (similarConversations && similarConversations.length > 0) {
        const bestMatch = similarConversations[0]
        
        // Se encontrou uma refer√™ncia com boa confian√ßa, perguntar se era isso
        if (bestMatch.confidence_score > 0.7) {
          return this.generateContextualQuestion(message, bestMatch)
        }
      }

      // Buscar tamb√©m em padr√µes de conversa
      const { data: patterns, error: patternError } = await supabase
        .from('ai_conversation_patterns')
        .select('pattern_type, keywords, ai_response')
        .or(`pattern_type.ilike.%${message}%`)
        .limit(2)

      if (!patternError && patterns && patterns.length > 0) {
        const bestPattern = patterns[0]
        return this.generateContextualQuestion(message, bestPattern)
      }

      return null
    } catch (error) {
      console.warn('‚ùå Erro no sistema contextual:', error)
      return null
    }
  }

  // ü§î GERAR PERGUNTA CONTEXTUAL
  private generateContextualQuestion(userMessage: string, reference: any): string {
    const responses = [
      `Voc√™ quis dizer algo relacionado a "${reference.user_message || reference.pattern_type}"? Se sim, posso ajudar com: "${reference.ai_response}". Confirma se era isso que voc√™ queria saber?`,
      `Pelo que entendi, voc√™ pode estar se referindo a algo similar a "${reference.user_message || reference.pattern_type}". Posso auxiliar com: "${reference.ai_response}". Era isso mesmo?`,
      `Detectei que sua mensagem pode estar relacionada a "${reference.user_message || reference.pattern_type}". Posso ajudar com: "${reference.ai_response}". Confirma se era isso?`
    ]
    
    return responses[Math.floor(Math.random() * responses.length)]
  }

  // üéì APRENDER CONTEXTO CONFIRMADO
  async learnFromContextualConfirmation(userMessage: string, confirmedResponse: string, wasCorrect: boolean): Promise<void> {
    try {
      if (wasCorrect) {
        // Salvar como aprendizado positivo
        await this.saveConversationToLearning(
          userMessage, 
          confirmedResponse, 
          'contextual_learning', 
          'confirmed'
        )
        
        // Aumentar score de confian√ßa para pr√≥ximas vezes
        await this.updateConfidenceScore(userMessage, confirmedResponse, 0.9)
        
        console.log('‚úÖ Contexto confirmado e aprendido!')
      } else {
        // Salvar como aprendizado negativo para evitar repetir
        await this.saveConversationToLearning(
          userMessage, 
          'N√£o era isso que o usu√°rio queria', 
          'contextual_learning', 
          'rejected'
        )
        
        console.log('üìù Contexto rejeitado, evitando repetir no futuro')
      }
    } catch (error) {
      console.warn('‚ùå Erro ao aprender contexto:', error)
    }
  }

  // üìà ATUALIZAR SCORE DE CONFIAN√áA
  private async updateConfidenceScore(userMessage: string, aiResponse: string, newScore: number): Promise<void> {
    try {
      await supabase
        .from('ai_learning')
        .update({ confidence_score: newScore })
        .eq('user_message', userMessage)
        .eq('ai_response', aiResponse)
    } catch (error) {
      console.warn('‚ùå Erro ao atualizar score:', error)
    }
  }
}
