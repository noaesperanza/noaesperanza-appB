// clinicalAgent.ts - Sistema completo de avalia√ß√£o cl√≠nica triaxial integrado com Supabase

import { supabase } from '../integrations/supabase/client'
import { 
  withTimeout, 
  verificarAuthComFallback, 
  testarConectividade,
  SupabaseTimeoutError 
} from '../utils/supabaseTimeout'

// Fun√ß√£o utilit√°ria para verificar conectividade com Supabase
async function verificarConectividadeSupabase(): Promise<boolean> {
  try {
    // Testa conectividade b√°sica com um ping simples
    const { data, error } = await supabase
      .from('avaliacoes_iniciais')
      .select('id')
      .limit(1)
    
    return !error
  } catch (error) {
    console.warn('‚ö†Ô∏è Supabase n√£o acess√≠vel:', error)
    return false
  }
}

interface Etapa {
  id: string
  texto: string
  repetir?: boolean
  condicional?: 'ateNegar' // repete at√© o usu√°rio negar
  variavel?: string // nome do campo para armazenar resposta
}

interface Avaliacao {
  titulo: string
  conteudo: string
}

const etapas: Etapa[] = [
  {
    id: 'inicio',
    texto: 'Ol√°! Eu sou a N√¥a Esperanza. Vamos iniciar sua avalia√ß√£o inicial com base no m√©todo do Dr. Ricardo Valen√ßa. Pode come√ßar se apresentando.',
    variavel: 'apresentacao',
  },
  {
    id: 'motivo_detalhado',
    texto: `Entendo que voc√™ est√° aqui por uma raz√£o espec√≠fica. Me conte mais sobre isso:

O que exatamente voc√™ est√° sentindo?
H√° quanto tempo isso est√° acontecendo?
O que mais te preocupa nessa situa√ß√£o?

Quanto mais detalhes voc√™ me der, melhor poderei te ajudar. N√£o tenha pressa - fale tudo que achar importante.`,
    repetir: true,
    condicional: 'ateNegar',
    variavel: 'motivos_detalhados',
  },
  {
    id: 'queixa_principal',
    texto: `De tudo que voc√™ me contou, qual √© a quest√£o que mais te incomoda no momento?

Pode ser:
- Uma dor espec√≠fica
- Um sintoma que te preocupa
- Uma limita√ß√£o no seu dia a dia
- Qualquer coisa que esteja afetando sua qualidade de vida

Me conte qual √© a sua principal preocupa√ß√£o hoje.`,
    variavel: 'queixaPrincipal',
  },
  {
    id: 'localizacao',
    texto: `Vamos focar na sua queixa principal. Onde exatamente voc√™ sente isso?

- √â em uma parte espec√≠fica do corpo?
- Se espalha para outros lugares?
- √â mais intenso em algum local?

Seja o mais espec√≠fico poss√≠vel - isso me ajuda muito a entender melhor.`,
    variavel: 'localizacao',
  },
  {
    id: 'tempo_evolucao',
    texto: `Quando isso come√ßou? Me conte sobre o tempo:

- Quando foi a primeira vez que voc√™ notou isso?
- Como foi evoluindo desde ent√£o?
- Tem per√≠odos melhores e piores?
- O que piora ou melhora os sintomas?

Quanto mais detalhes sobre a evolu√ß√£o, melhor.`,
    variavel: 'tempo_evolucao',
  },
  {
    id: 'caracteristicas',
    texto: `üîç Vamos detalhar como √© essa queixa.

Me descreva:
- Como √© a sensa√ß√£o? (dor, queima√ß√£o, formigamento, press√£o, etc.)
- Qual a intensidade? (de 0 a 10, sendo 10 o pior poss√≠vel)
- √â constante ou vem e vai?- Tem alguma caracter√≠stica especial? (lateja, aperta, queima, etc.)

Seja bem descritivo - cada detalhe √© importante para o Dr. Ricardo.`,
    variavel: 'caracteristicas',
  },
  {
    id: 'fatores_modificadores',
    texto: `‚öñÔ∏è O que influencia essa queixa?
Me conte:- O que piora os sintomas? (movimento, posi√ß√£o, hor√°rio, etc.)
- O que melhora? (repouso, medicamento, calor, frio, etc.)
- Tem hor√°rios espec√≠ficos? (manh√£, tarde, noite, etc.)
- Alguma atividade espec√≠fica afeta?
Essas informa√ß√µes s√£o cruciais para entender melhor sua condi√ß√£o.`,
    variavel: 'fatores_modificadores',
  },
  {
    id: 'sintomas_associados',
    texto: `üîó Al√©m da queixa principal, voc√™ tem outros sintomas?
Pense em:- N√°useas, v√¥mitos, tonturas?- Altera√ß√µes no sono, apetite, humor?- Problemas de mem√≥ria, concentra√ß√£o?- Altera√ß√µes visuais, auditivas?- Outros sintomas que notou?
Mesmo que pare√ßa n√£o relacionado, me conte tudo - √†s vezes h√° conex√µes importantes.`,
    variavel: 'sintomas_associados',
  },
  {
    id: 'historia_medica',
    texto: `üìã Vamos falar sobre sua sa√∫de em geral...
Me conte:- Voc√™ tem alguma doen√ßa conhecida?- Toma algum medicamento regularmente?- J√° fez cirurgias?- Tem alergias a medicamentos?- Algu√©m da sua fam√≠lia tem problemas similares?
Essas informa√ß√µes ajudam o Dr. Ricardo a ter uma vis√£o completa.`,
    variavel: 'historia_medica',
  },
  {
    id: 'cannabis_medicinal',
    texto: `üåø Sobre Cannabis Medicinal...
Voc√™ j√° utilizou cannabis medicinal?- Se sim: Como foi? Que tipo? Te ajudou?
- Se n√£o: Tem interesse em saber mais?
- O que voc√™ sabe sobre CBD e THC?- Tem alguma preocupa√ß√£o espec√≠fica?
O Dr. Ricardo √© especialista em cannabis medicinal e pode esclarecer suas d√∫vidas.`,
    variavel: 'cannabis_medicinal',
  },
  {
    id: 'impacto_vida',
    texto: `üí≠ Como isso afeta sua vida?
Me conte:- Como isso impacta seu trabalho/estudos?- Afeta suas atividades di√°rias?- Influencia seus relacionamentos?- Muda sua qualidade de vida?- O que voc√™ mais sente falta de fazer?
Entender o impacto na sua vida √© fundamental para o Dr. Ricardo.`,
    variavel: 'impacto_vida',
  },
  {
    id: 'expectativas',
    texto: `üéØ O que voc√™ espera dessa consulta?
Me conte:- Qual seu principal objetivo?- O que voc√™ gostaria de melhorar?- Tem alguma expectativa espec√≠fica?- H√° algo que voc√™ gostaria de saber?- Como voc√™ imagina que podemos te ajudar?
Suas expectativas s√£o importantes para personalizar seu atendimento.`,
    variavel: 'expectativas',
  },
  {
    id: 'duvidas_finais',
    texto: `‚ùì Antes de finalizarmos...
Voc√™ tem alguma d√∫vida ou preocupa√ß√£o?- Alguma pergunta sobre o tratamento?- Preocupa√ß√µes sobre cannabis medicinal?- D√∫vidas sobre o processo?- Algo que esqueceu de mencionar?
Este √© o momento para esclarecer qualquer quest√£o que tenha ficado em aberto.`,
    variavel: 'duvidas_finais',
  },
  {
    id: 'finalizacao',
    texto: `üìã Avalia√ß√£o Cl√≠nica Conclu√≠da - Dr. Ricardo Valen√ßa
‚úÖ Sua avalia√ß√£o inicial foi finalizada com sucesso!
üìä O que foi coletado:‚Ä¢ Dados pessoais e apresenta√ß√£o
‚Ä¢ Queixa principal e sintomas
‚Ä¢ Hist√≥ria cl√≠nica detalhada
‚Ä¢ Fatores modificadores
‚Ä¢ Impacto na qualidade de vida
‚Ä¢ Expectativas do tratamento

üìù Pr√≥ximos passos:‚Ä¢ Seu prontu√°rio ser√° preparado
‚Ä¢ Dados ser√£o organizados para o Dr. Ricardo
‚Ä¢ Relat√≥rio ser√° gerado automaticamente
‚Ä¢ Voc√™ receber√° uma c√≥pia do resumo

ü©∫ Para continuar:‚Ä¢ Agende consulta presencial com o Dr. Ricardo
‚Ä¢ Ou aguarde contato da equipe m√©dica
‚Ä¢ Seus dados est√£o seguros e protegidos

üí¨ Deseja que eu gere o relat√≥rio final agora?`,
    variavel: 'finalizacao',
  },
  {
    id: 'melhora',
    texto: 'O que parece melhorar a queixa?',
    variavel: 'melhora',
  },
  {
    id: 'piora',
    texto: 'O que parece piorar a queixa?',
    variavel: 'piora',
  },
  {
    id: 'historicoDoenca',
    texto: 'E agora, sobre sua vida at√© aqui, quais as quest√µes de sa√∫de que voc√™ j√° viveu? Vamos ordenar do mais antigo para o mais recente, o que veio primeiro?',
    repetir: true,
    condicional: 'ateNegar',
    variavel: 'historicoDoenca',
  },
  {
    id: 'familiaMae',
    texto: 'Come√ßando pela parte da sua m√£e, quais as quest√µes de sa√∫de dela e desse lado da fam√≠lia?',
    repetir: true,
    condicional: 'ateNegar',
    variavel: 'familiaMae',
  },
  {
    id: 'familiaPai',
    texto: 'E por parte de seu pai?',
    repetir: true,
    condicional: 'ateNegar',
    variavel: 'familiaPai',
  },
  {
    id: 'habitos',
    texto: 'Al√©m dos h√°bitos de vida que j√° verificamos em nossa conversa, que outros h√°bitos voc√™ acha importante mencionar?',
    repetir: true,
    condicional: 'ateNegar',
    variavel: 'habitos',
  },
  {
    id: 'alergias',
    texto: 'Voc√™ tem alguma alergia (mudan√ßa de tempo, medica√ß√£o, poeira...)?',
    variavel: 'alergias',
  },
  {
    id: 'medicacaoRegular',
    texto: 'Quais as medica√ß√µes que voc√™ utiliza regularmente?',
    variavel: 'medicacaoRegular',
  },
  {
    id: 'medicacaoEsporadica',
    texto: 'Quais as medica√ß√µes voc√™ utiliza esporadicamente (de vez em quando) e porque utiliza?',
    variavel: 'medicacaoEsporadica',
  },
  {
    id: 'fechamento',
    texto: 'Vamos revisar a sua hist√≥ria rapidamente para garantir que n√£o perdemos nenhum detalhe importante.',
  },
  {
    id: 'validacao',
    texto: 'Voc√™ concorda com o meu entendimento? H√° mais alguma coisa que gostaria de adicionar sobre a hist√≥ria que constru√≠mos?',
    variavel: 'validacaoUsuario',
  },
  {
    id: 'final',
    texto: 'Essa √© uma avalia√ß√£o inicial de acordo com o m√©todo desenvolvido pelo Dr. Ricardo Valen√ßa com o objetivo de aperfei√ßoar o seu atendimento. Ao final, recomendo a marca√ß√£o de uma consulta com o Dr. Ricardo Valen√ßa pelo site.\n\nSeu relat√≥rio resumido est√° pronto para download.',
  },
]

let etapaAtual = 0
let respostas: Record<string, any> = {}
let sessionId: string = ''
let evaluationId: string | null = null
const bancoDeAvaliacoes: Avaliacao[] = []

export const clinicalAgent = {
  // Verifica se h√° uma avalia√ß√£o ativa
  temAvaliacaoAtiva(): boolean {
    return etapaAtual > 0 || Object.keys(respostas).length > 0 || sessionId !== ''
  },

  // Sistema de avalia√ß√£o cl√≠nica triaxial
  async executarFluxo(mensagem: string): Promise<string | { iniciar: boolean; mensagem: string }> {
    console.log(`üîÑ Executando fluxo - Etapa atual: ${etapaAtual}, Total etapas: ${etapas.length}`)
    const etapa = etapas[etapaAtual]
    console.log(`üìã Etapa atual:`, etapa)

    if (!etapa) {
      // Finaliza avalia√ß√£o no Supabase
      if (evaluationId) {
        try {
          await supabase
            .from('avaliacoes_iniciais')
            .update({
              status: 'completed',
              completed_at: new Date().toISOString()
            })
            .eq('id', evaluationId)
          console.log('‚úÖ Avalia√ß√£o finalizada no Supabase')
        } catch (error) {
          console.error('Erro ao finalizar avalia√ß√£o:', error)
        }
      }
      return '‚úÖ Avalia√ß√£o finalizada. Obrigado!'
    }

    if (etapa.variavel) {
      const valorAnterior = respostas[etapa.variavel]
      if (etapa.repetir && etapa.condicional === 'ateNegar') {
        // Palavras que indicam fim da lista
        const palavrasFim = ['nada', 'n√£o', 'nenhuma', 'nenhum', 'pronto', 'acabou', 'fim', '√© isso', 's√≥ isso', 'n√£o tem mais', '√© s√≥ isso', 'acabei', 'terminei', 'ok', 'beleza', 'tudo bem', 'pode continuar', 'avan√ßar', 'pr√≥xima', 'seguir']
        const deveParar = palavrasFim.some(palavra => mensagem.toLowerCase().includes(palavra))
        
        if (deveParar) {
          console.log('üõë Usu√°rio indicou fim da lista, avan√ßando para pr√≥xima etapa')
          etapaAtual += 1
        } else {
          // Adiciona √† lista de motivos
          respostas[etapa.variavel] = valorAnterior
            ? [...valorAnterior, mensagem]
            : [mensagem]
          
          // Salva resposta no Supabase
          await clinicalAgent.salvarRespostaNoSupabase(etapa.variavel, respostas[etapa.variavel])
          
          // Continua perguntando at√© o usu√°rio parar
          console.log('üìù Motivo adicionado, continuando a perguntar...')
          
          // Pergunta se h√° mais motivos ou se pode avan√ßar
          const motivosCount = respostas[etapa.variavel].length
          if (motivosCount === 1) {
            return `${etapa.texto}\n\n‚úÖ Entendi. Voc√™ mencionou: "${mensagem}". H√° mais alguma coisa que gostaria de me contar? Se n√£o, diga "n√£o" ou "√© isso" para continuarmos.`
          } else {
            return `‚úÖ Obrigado pelas informa√ß√µes. Voc√™ j√° me contou ${motivosCount} motivos. H√° mais alguma coisa? Se n√£o, diga "n√£o" ou "√© isso" para continuarmos.`
          }
        }
      } else {
        respostas[etapa.variavel] = mensagem
        etapaAtual += 1
        
        // Salva resposta no Supabase
        await clinicalAgent.salvarRespostaNoSupabase(etapa.variavel, mensagem)
        
        // Continua para pr√≥xima etapa
        const proximaEtapa = etapas[etapaAtual]
        console.log(`ü©∫ Avan√ßou para etapa ${etapaAtual}:`, proximaEtapa)
        if (proximaEtapa) {
          console.log('ü©∫ Retornando pr√≥xima pergunta:', proximaEtapa.texto)
          return proximaEtapa.texto
        }
      }
    } else {
      etapaAtual += 1
    }

    // Atualiza etapa atual no Supabase
    if (evaluationId) {
      try {
        await supabase
          .from('avaliacoes_iniciais')
          .update({
            etapa_atual: etapas[etapaAtual]?.id || 'finalizada'
          })
          .eq('id', evaluationId)
      } catch (error) {
        console.error('Erro ao atualizar etapa:', error)
      }
    }

    const proximaEtapa = etapas[etapaAtual]
    if (!proximaEtapa) {
      // Finaliza avalia√ß√£o no Supabase
      if (evaluationId) {
        try {
          await supabase
            .from('avaliacoes_iniciais')
            .update({
              status: 'completed',
              completed_at: new Date().toISOString()
            })
            .eq('id', evaluationId)
          console.log('‚úÖ Avalia√ß√£o finalizada no Supabase')
        } catch (error) {
          console.error('Erro ao finalizar avalia√ß√£o:', error)
        }
      }
      return '‚úÖ Avalia√ß√£o finalizada. Obrigado!'
    }

    return proximaEtapa.texto
  },

  // Salva resposta no Supabase
  async salvarRespostaNoSupabase(campo: string, valor: any) {
    if (!evaluationId) return

    // Verificar se √© uma avalia√ß√£o v√°lida
    if (!evaluationId || evaluationId.startsWith('local_')) {
      console.log('‚ùå Avalia√ß√£o inv√°lida ou local - n√£o √© poss√≠vel salvar')
      return
    }

    try {
      // Verificar se usu√°rio est√° autenticado com timeout
      const user = await verificarAuthComFallback(supabase)
      
      if (!user) {
        console.log('‚ùå Usu√°rio n√£o autenticado - n√£o √© poss√≠vel salvar')
        return
      }

      // Mapeia campos do clinicalAgent para campos da tabela
      const campoMapeado = clinicalAgent.mapearCampo(campo)
      const updateData: any = {}
      updateData[campoMapeado] = valor

      console.log(`ü©∫ Salvando: ${campo} ‚Üí ${campoMapeado} = ${valor}`)

      await supabase
        .from('avaliacoes_iniciais')
        .update(updateData)
        .eq('id', evaluationId)
      
      console.log(`‚úÖ Resposta salva no Supabase: ${campoMapeado} = ${valor}`)
    } catch (error) {
      console.error('Erro ao salvar resposta no Supabase:', error)
    }
  },

  // Mapeia campos do clinicalAgent para campos da tabela
  mapearCampo(campo: string): string {
    const mapeamento: Record<string, string> = {
      'apresentacao': 'apresentacao',
      'usoCanabis': 'abertura_exponencial', // Campo para cannabis
      'motivos': 'lista_indiciaria',
      'queixaPrincipal': 'queixa_principal',
      'onde': 'localizacao_queixa',
      'quando': 'inicio_queixa',
      'como': 'qualidade_queixa',
      'sintomasAssociados': 'sintomas_associados',
      'melhora': 'fatores_melhora',
      'piora': 'fatores_piora',
      'historicoDoenca': 'historia_patologica',
      'familiaMae': 'historia_familiar_mae',
      'familiaPai': 'historia_familiar_pai',
      'habitos': 'habitos_vida',
      'alergias': 'alergias',
      'medicacaoRegular': 'medicacoes_continuas',
      'medicacaoEsporadica': 'medicacoes_eventuais',
      'validacaoUsuario': 'concordancia_final'
    }
    
    return mapeamento[campo] || campo
  },

  // Detecta se deve iniciar avalia√ß√£o cl√≠nica
  async detectarInicioAvaliacao(mensagem: string): Promise<{ iniciar: boolean; mensagem: string; evaluationId?: string | null } | null> {
    const lower = mensagem.toLowerCase().trim()
    
    // Palavras-chave para iniciar avalia√ß√£o (mais flex√≠veis)
    const palavrasChave = [
      'avalia√ß√£o inicial',
      'avalia√ß√£o cl√≠nica',
      'avaliacao inicial',
      'avaliacao clinica',
      'consulta com dr ricardo',
      'consulta com dr. ricardo',
      'consulta com ricardo valen√ßa',
      'quero fazer uma avalia√ß√£o',
      'quero fazer uma avaliacao',
      'preciso de uma consulta',
      'avalia√ß√£o triaxial',
      'iniciar avalia√ß√£o',
      'come√ßar avalia√ß√£o',
      'fazer avalia√ß√£o',
      'avalia√ß√£o',
      'avaliacao',
      'consulta',
      'dor de cabe√ßa',
      'dor de cabeca',
      'dor',
      'sintoma',
      'problema',
      'mal-estar',
      'mal estar',
      'sentindo',
      'vamos come√ßar',
      'vamos comecar',
      'come√ßar',
      'comecar'
    ]

    // FRASE DE ATIVA√á√ÉO INSTITUCIONAL (Documento Mestre v.2.0)
    const fraseAtivacao = /^ol√°,?\sn√¥a\.?\s([^,]+),?\saqui\.?$/i
    const matchAtivacao = mensagem.match(fraseAtivacao)
    
    if (matchAtivacao) {
      const nomeUsuario = matchAtivacao[1].trim()
      console.log('üéØ FRASE DE ATIVA√á√ÉO INSTITUCIONAL detectada:', nomeUsuario)
      // Ativa todos os sistemas: Supabase, Voz Residente, Dashboards, Blockchain
      return {
        iniciar: true,
        mensagem: `Ol√°! Eu sou a N√¥a Esperanza. Identifiquei sua ativa√ß√£o institucional, ${nomeUsuario}. Todos os sistemas est√£o ativos: Supabase, Voz Residente, Dashboards e Blockchain. Como posso ajud√°-lo hoje?`
      }
    }

    // Tamb√©m detecta apresenta√ß√£o natural (nome pr√≥prio)
    const temNome = /^[A-Z][a-z]+(\s+[A-Z][a-z]+)$/.test(mensagem.trim())
    const temApresentacao = lower.includes('meu nome √©') || lower.includes('sou ') || lower.includes('aqui')

    const deveIniciar = palavrasChave.some(palavra => lower.includes(palavra)) || temNome || temApresentacao
    
    // Debug: Log das verifica√ß√µes
    console.log('üîç DEBUG detectarInicioAvaliacao:')
    console.log('  - Mensagem:', mensagem)
    console.log('  - Lower:', lower)
    console.log('  - Tem nome:', temNome)
    console.log('  - Tem apresenta√ß√£o:', temApresentacao)
    console.log('  - Palavras-chave encontradas:', palavrasChave.filter(palavra => lower.includes(palavra)))
    console.log('  - Deve iniciar:', deveIniciar)
    
    if (deveIniciar) {
      // Verifica se j√° h√° uma avalia√ß√£o em andamento
      if (!clinicalAgent.temAvaliacaoAtiva()) {
        // Reset do fluxo apenas se n√£o h√° avalia√ß√£o ativa
        console.log('üÜï Iniciando nova avalia√ß√£o...')
        etapaAtual = 0
        respostas = {}
        sessionId = `avaliacao_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      } else {
        // Se j√° h√° avalia√ß√£o em andamento, continua de onde parou
        console.log('üîÑ Avalia√ß√£o j√° em andamento, continuando...')
        console.log(`   Estado atual: Etapa ${etapaAtual}, Respostas: ${Object.keys(respostas).length}, SessionId: ${sessionId ? 'Ativo' : 'Inativo'}`)
        return null
      }
      
      // Cria nova avalia√ß√£o no Supabase (modo resiliente)
      try {
        console.log('üîê Verificando conectividade e autentica√ß√£o...')
        
        // Verificar se Supabase est√° configurado
        if (!supabase || !supabase.auth) {
          console.log('‚ö†Ô∏è Supabase n√£o configurado - continuando em modo local')
          return {
            iniciar: true,
            mensagem: 'Vamos iniciar sua avalia√ß√£o cl√≠nica! Como voc√™ se chama?',
            evaluationId: null
          }
        }
        
        // Verificar conectividade b√°sica primeiro
        const conectividadeOk = await testarConectividade(supabase)
        if (!conectividadeOk) {
          console.log('üåê Problema de conectividade com Supabase - continuando em modo local')
          return {
            iniciar: true,
            mensagem: 'Vamos iniciar sua avalia√ß√£o cl√≠nica! Como voc√™ se chama?\n\n‚ö†Ô∏è Nota: Problema de conectividade detectado. A avalia√ß√£o ser√° salva localmente.',
            evaluationId: null
          }
        }
        
        // Verificar autentica√ß√£o com fallback
        const user = await verificarAuthComFallback(supabase)
        
        if (!user) {
          console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado - continuando sem salvar no Supabase')
          // Permite continuar sem autentica√ß√£o, mas n√£o salva no Supabase
          return {
            iniciar: true,
            mensagem: 'Vamos iniciar sua avalia√ß√£o cl√≠nica! Como voc√™ se chama?',
            evaluationId: null // N√£o salva no Supabase
          }
        }

        const { data, error } = await supabase
          .from('avaliacoes_iniciais')
          .insert({
            user_id: user.id,
            session_id: sessionId,
            status: 'in_progress',
            etapa_atual: 'abertura',
            apresentacao: temNome || temApresentacao ? mensagem : null
          })
          .select()
          .single()
        
        if (error) {
          console.error('Erro ao criar avalia√ß√£o no Supabase:', error)
          return {
            iniciar: false,
            mensagem: '‚ùå Erro ao iniciar avalia√ß√£o. Verifique sua conex√£o e tente novamente.'
          }
        } else {
          evaluationId = data.id
          console.log('‚úÖ Avalia√ß√£o criada no Supabase:', evaluationId)
        }
      } catch (error: any) {
        console.error('‚ùå Erro ao conectar com Supabase:', error)
        
        // Tratamento espec√≠fico de diferentes tipos de erro
        if (error instanceof SupabaseTimeoutError || error?.message?.includes('Timeout')) {
          console.log('‚è∞ Timeout na verifica√ß√£o de auth - continuando sem Supabase')
          return {
            iniciar: true,
            mensagem: 'Vamos iniciar sua avalia√ß√£o cl√≠nica! Como voc√™ se chama?',
            evaluationId: null // N√£o salva no Supabase devido ao timeout
          }
        } else if (error?.message?.includes('Failed to fetch') || error?.code === 'NETWORK_ERROR') {
          console.log('üåê Erro de rede - verifique sua conex√£o com a internet')
          return {
            iniciar: true,
            mensagem: 'Vamos iniciar sua avalia√ß√£o cl√≠nica! Como voc√™ se chama?\n\n‚ö†Ô∏è Nota: H√° problemas de conectividade. A avalia√ß√£o ser√° salva localmente.',
            evaluationId: null // N√£o salva no Supabase devido ao erro de rede
          }
        } else if (error?.message?.includes('JWT') || error?.message?.includes('token')) {
          console.log('üîê Problema com token de autentica√ß√£o - usu√°rio precisa fazer login novamente')
          return {
            iniciar: true,
            mensagem: 'Vamos iniciar sua avalia√ß√£o cl√≠nica! Como voc√™ se chama?\n\n‚ö†Ô∏è Nota: Problema de autentica√ß√£o detectado. Fa√ßa login novamente se necess√°rio.',
            evaluationId: null // N√£o salva no Supabase devido ao erro de token
          }
        } else {
          console.log('‚ùå Erro de conex√£o com Supabase - continuando sem salvar')
          return {
            iniciar: true,
            mensagem: 'Vamos iniciar sua avalia√ß√£o cl√≠nica! Como voc√™ se chama?',
            evaluationId: null // N√£o salva no Supabase devido ao erro
          }
        }
      }
      
      // Se j√° tem apresenta√ß√£o, pula para pr√≥xima etapa
      if (temNome || temApresentacao) {
        etapaAtual = 1
        respostas.apresentacao = mensagem
        await clinicalAgent.salvarRespostaNoSupabase('apresentacao', mensagem)
        return {
          iniciar: true,
          mensagem: etapas[1].texto
        }
      }
      
      return {
        iniciar: true,
        mensagem: etapas[0].texto
      }
    }

    console.log('üîç detectarInicioAvaliacao: n√£o deve iniciar avalia√ß√£o')
    return null
  },

  // Comandos de gerenciamento de avalia√ß√µes
  async executarAcao(message: string): Promise<string> {
    const lower = message.toLowerCase().trim()

    // Resetar avalia√ß√£o
    if (lower.includes('resetar avalia√ß√£o') || lower.includes('reiniciar avalia√ß√£o') || lower.includes('come√ßar de novo') || lower.includes('nova avalia√ß√£o')) {
      etapaAtual = 0
      respostas = {}
      sessionId = `avaliacao_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      evaluationId = null
      return 'üîÑ Avalia√ß√£o resetada! Vamos come√ßar do in√≠cio. Como voc√™ se chama?'
    }

    // Status da avalia√ß√£o
    if (lower.includes('status da avalia√ß√£o') || lower.includes('onde estou')) {
      return `üìä Status da Avalia√ß√£o:
- Etapa atual: ${etapaAtual + 1} de ${etapas.length}
- Respostas coletadas: ${Object.keys(respostas).length}
- Sess√£o: ${sessionId ? 'Ativa' : 'Inativa'}
- Pr√≥xima pergunta: ${etapas[etapaAtual]?.texto || 'Avalia√ß√£o finalizada'}`
    }

    // Pular etapa
    if (lower.includes('pular etapa') || lower.includes('pr√≥xima pergunta')) {
      if (etapaAtual < etapas.length - 1) {
        etapaAtual += 1
        const proximaEtapa = etapas[etapaAtual]
        return `‚è≠Ô∏è Etapa pulada. ${proximaEtapa.texto}`
      } else {
        return '‚úÖ J√° estamos na √∫ltima etapa da avalia√ß√£o.'
      }
    }

    // Criar avalia√ß√£o
    if (lower.includes('criar avalia√ß√£o')) {
      const match = message.match(/criar avalia√ß√£o (.+?) com o conte√∫do (.+)/i)
      if (!match || match.length < 3) {
        return '‚ö†Ô∏è Para criar uma avalia√ß√£o, diga: "criar avalia√ß√£o Nome com o conte√∫do Texto..."'
      }

      const titulo = match[1].trim()
      const conteudo = match[2].trim()
      bancoDeAvaliacoes.push({ titulo, conteudo })

      return `‚úÖ Avalia√ß√£o "${titulo}" criada com sucesso.`
    }

    // Editar avalia√ß√£o
    if (lower.includes('editar avalia√ß√£o')) {
      const match = message.match(/editar avalia√ß√£o (.+?) com o conte√∫do (.+)/i)
      if (!match || match.length < 3) {
        return '‚ö†Ô∏è Para editar uma avalia√ß√£o, diga: "editar avalia√ß√£o Nome com o conte√∫do Texto..."'
      }

      const titulo = match[1].trim()
      const novoConteudo = match[2].trim()
      const avaliacao = bancoDeAvaliacoes.find(a => a.titulo === titulo)

      if (!avaliacao) {
        return `‚ùå Avalia√ß√£o "${titulo}" n√£o encontrada.`
      }

      avaliacao.conteudo = novoConteudo
      return `‚úÖ Avalia√ß√£o "${titulo}" atualizada com sucesso.`
    }

    // Listar avalia√ß√µes
    if (lower.includes('listar avalia√ß√µes')) {
      if (bancoDeAvaliacoes.length === 0) {
        return 'üì≠ Nenhuma avalia√ß√£o dispon√≠vel ainda.'
      }

      const lista = bancoDeAvaliacoes
        .map((a, i) => `${i + 1}. ${a.titulo}`)
        .join('\n')

      return `üìã Avalia√ß√µes dispon√≠veis:\n${lista}`
    }

    return '‚ö†Ô∏è Comando de avalia√ß√£o n√£o reconhecido. Use: criar, editar ou listar avalia√ß√µes.'
  },

  // Retorna as respostas coletadas
  getRespostas() {
    return respostas
  },

  // Retorna a etapa atual
  getEtapaAtual() {
    return etapaAtual
  },

  // Retorna todas as etapas
  getEtapas() {
    return etapas
  },

  // Gera relat√≥rio narrativo completo
  async gerarRelatorioNarrativo(): Promise<string> {
    if (!evaluationId) return 'Erro: Avalia√ß√£o n√£o encontrada'

    // Verificar se √© uma avalia√ß√£o v√°lida
    if (!evaluationId || evaluationId.startsWith('local_')) {
      console.log('‚ùå Avalia√ß√£o inv√°lida ou local - n√£o √© poss√≠vel gerar relat√≥rio')
      return '‚ùå Erro: Avalia√ß√£o n√£o encontrada ou inv√°lida'
    }

    try {
      // Verificar se usu√°rio est√° autenticado com timeout
      const user = await verificarAuthComFallback(supabase)
      
      if (!user) {
        console.log('‚ùå Usu√°rio n√£o autenticado - n√£o √© poss√≠vel gerar relat√≥rio')
        return '‚ùå Erro: Usu√°rio n√£o autenticado'
      }

      // Busca dados da avalia√ß√£o no Supabase
      const { data: avaliacao, error } = await supabase
        .from('avaliacoes_iniciais')
        .select('*')
        .eq('id', evaluationId)
        .single()

      if (error || !avaliacao) {
        console.error('Erro ao buscar avalia√ß√£o:', error)
        return '‚ùå Erro: N√£o foi poss√≠vel carregar os dados da avalia√ß√£o'
      }

      const relatorio = `
RELAT√ìRIO DE AVALIA√á√ÉO CL√çNICA INICIAL
M√©todo Triaxial - Dr. Ricardo Valen√ßa
Data: ${new Date().toLocaleDateString('pt-BR')}
APRESENTA√á√ÉO: ${avaliacao.apresentacao || 'N√£o informado'}

CANNABIS MEDICINAL: ${avaliacao.abertura_exponencial || 'N√£o informado'}

QUEIXAS PRINCIPAIS: ${Array.isArray(avaliacao.lista_indiciaria) ? avaliacao.lista_indiciaria.join(', ') : avaliacao.lista_indiciaria || 'N√£o informado'}

QUEIXA PRINCIPAL: ${avaliacao.queixa_principal || 'N√£o especificada'}

DESENVOLVIMENTO INDICI√ÅRIO:
- Localiza√ß√£o: ${avaliacao.localizacao_queixa || 'N√£o informado'}
- In√≠cio: ${avaliacao.inicio_queixa || 'N√£o informado'}
- Qualidade: ${avaliacao.qualidade_queixa || 'N√£o informado'}
- Sintomas associados: ${avaliacao.sintomas_associados || 'N√£o informado'}
- Fatores de melhora: ${avaliacao.fatores_melhora || 'N√£o informado'}
- Fatores de piora: ${avaliacao.fatores_piora || 'N√£o informado'}
q
HIST√ìRIA PATOL√ìGICA: ${Array.isArray(avaliacao.historia_patologica) ? avaliacao.historia_patologica.join(', ') : avaliacao.historia_patologica || 'Nenhuma'}

HIST√ìRIA FAMILIAR:
- M√£e: ${Array.isArray(avaliacao.historia_familiar_mae) ? avaliacao.historia_familiar_mae.join(', ') : avaliacao.historia_familiar_mae || 'Nenhuma'}
- Pai: ${Array.isArray(avaliacao.historia_familiar_pai) ? avaliacao.historia_familiar_pai.join(', ') : avaliacao.historia_familiar_pai || 'Nenhuma'}

H√ÅBITOS DE VIDA: ${Array.isArray(avaliacao.habitos_vida) ? avaliacao.habitos_vida.join(', ') : avaliacao.habitos_vida || 'N√£o informado'}

ALERGIAS: ${avaliacao.alergias || 'Nenhuma'}

MEDICA√á√ïES:
- Cont√≠nuas: ${avaliacao.medicacoes_continuas || 'Nenhuma'}
- Eventuais: ${avaliacao.medicacoes_eventuais || 'Nenhuma'}

CONSENTIMENTO INFORMADO: ${avaliacao.consentimento_informado ? 'Sim' : 'N√£o'}

AJUSTES DO PACIENTE: ${avaliacao.ajustes_paciente || 'Nenhum'}

CONCORD√ÇNCIA FINAL: ${avaliacao.concordancia_final ? 'Sim' : 'N√£o'}

---
Relat√≥rio gerado automaticamente pelo sistema NOA EsperanzaM√©todo desenvolvido pelo Dr. Ricardo Valen√ßa      `.trim()

      // Salva o relat√≥rio no Supabase
      await supabase
        .from('avaliacoes_iniciais')
        .update({
          relatorio_narrativo: relatorio,
          status: 'completed',
          completed_at: new Date().toISOString()
        })
        .eq('id', evaluationId)

      console.log('‚úÖ Relat√≥rio narrativo gerado e salvo')
      return relatorio

    } catch (error) {
      console.error('Erro ao gerar relat√≥rio:', error)
      return 'Erro ao gerar relat√≥rio narrativo'
    }
  },

  // üè• SISTEMA DE PRONTU√ÅRIO E ENVIO PARA M√âDICO
  async salvarNoProntuario(dados: any, userId: string): Promise<{sucesso: boolean, id?: string, erro?: string}> {
    try {
      const relatorio = await clinicalAgent.gerarRelatorioNarrativo()
      
      // Salvar avalia√ß√£o completa no Supabase
      const { data, error } = await supabase
        .from('avaliacoes_iniciais')
        .insert({
          user_id: userId,
          dados_completos: dados,
          relatorio_narrativo: relatorio,
          status: 'concluida',
          data_avaliacao: new Date().toISOString(),
          autorizacao_prontuario: dados.autorizacao_prontuario || false,
          data_autorizacao: dados.autorizacao_prontuario ? new Date().toISOString() : null
        })
        .select()

      if (error) {
        console.error('‚ùå Erro ao salvar no prontu√°rio:', error)
        return { sucesso: false, erro: error.message }
      }

      console.log('‚úÖ Avalia√ß√£o salva no prontu√°rio:', data[0]?.id)
      return { sucesso: true, id: data[0]?.id }
      
    } catch (error) {
      console.error('‚ùå Erro no sistema de prontu√°rio:', error)
      return { sucesso: false, erro: 'Erro interno do sistema' }
    }
  },

  // üì§ PREPARAR ENVIO PARA M√âDICO
  async prepararEnvioParaMedico(avaliacaoId: string, medicoId?: string): Promise<{sucesso: boolean, dados?: any, erro?: string}> {
    try {
      // Buscar dados da avalia√ß√£o
      const { data: avaliacao, error: errorAvaliacao } = await supabase
        .from('avaliacoes_iniciais')
        .select('*')
        .eq('id', avaliacaoId)
        .single()

      if (errorAvaliacao) {
        return { sucesso: false, erro: 'Avalia√ß√£o n√£o encontrada' }
      }

      // Buscar dados do m√©dico (se especificado)
      let medico = null
      if (medicoId) {
        const { data: medicoData, error: errorMedico } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', medicoId)
          .eq('user_type', 'doctor')
          .single()

        if (!errorMedico) {
          medico = medicoData
        }
      }

      // Preparar dados para envio
      const dadosEnvio = {
        avaliacao_id: avaliacaoId,
        paciente: {
          id: avaliacao.user_id,
          nome: avaliacao.dados_completos?.apresentacao || 'N√£o informado'
        },
        medico: medico ? {
          id: medico.id,
          nome: medico.full_name,
          especialidade: medico.especialidade
        } : null,
        relatorio: avaliacao.relatorio_narrativo,
        dados_clinicos: avaliacao.dados_completos,
        data_avaliacao: avaliacao.data_avaliacao,
        status: 'pendente_envio'
      }

      // Salvar na tabela de envios para m√©dicos
      const { data: envio, error: errorEnvio } = await supabase
        .from('envios_medicos')
        .insert({
          avaliacao_id: avaliacaoId,
          medico_id: medicoId,
          dados_enviados: dadosEnvio,
          status: 'preparado',
          data_preparacao: new Date().toISOString()
        })
        .select()

      if (errorEnvio) {
        console.error('‚ùå Erro ao preparar envio:', errorEnvio)
        return { sucesso: false, erro: errorEnvio.message }
      }

      console.log('‚úÖ Envio preparado para m√©dico:', envio[0]?.id)
      return { sucesso: true, dados: dadosEnvio }
      
    } catch (error) {
      console.error('‚ùå Erro ao preparar envio para m√©dico:', error)
      return { sucesso: false, erro: 'Erro interno do sistema' }
    }
  },

  // üìã FINALIZAR AVALIA√á√ÉO COMPLETA
  async finalizarAvaliacaoCompleta(dados: any, userId: string): Promise<{sucesso: boolean, relatorio?: string, prontuarioId?: string, erro?: string}> {
    try {
      // 1. Salvar no prontu√°rio
      const resultadoProntuario = await clinicalAgent.salvarNoProntuario(dados, userId)
      
      if (!resultadoProntuario.sucesso) {
        return { sucesso: false, erro: resultadoProntuario.erro }
      }

      // 2. Gerar relat√≥rio final
      const relatorio = await clinicalAgent.gerarRelatorioNarrativo()

      // 3. Preparar para envio ao m√©dico
      const resultadoEnvio = await clinicalAgent.prepararEnvioParaMedico(resultadoProntuario.id!)

      if (!resultadoEnvio.sucesso) {
        console.warn('‚ö†Ô∏è Avalia√ß√£o salva, mas erro ao preparar envio:', resultadoEnvio.erro)
      }

      // 4. Atualizar status da avalia√ß√£o
      await supabase
        .from('avaliacoes_iniciais')
        .update({ 
          status: 'finalizada',
          data_finalizacao: new Date().toISOString()
        })
        .eq('id', resultadoProntuario.id)

      console.log('‚úÖ Avalia√ß√£o finalizada com sucesso:', resultadoProntuario.id)
      
      return { 
        sucesso: true, 
        relatorio, 
        prontuarioId: resultadoProntuario.id 
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao finalizar avalia√ß√£o:', error)
      return { sucesso: false, erro: 'Erro interno do sistema' }
    }
  }
}
  