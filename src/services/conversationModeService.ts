// üéØ SERVI√áO DE MODOS DE CONVERSA - N√îA ESPERANZA
// Gerencia altern√¢ncia entre modo explicativo e avalia√ß√£o cl√≠nica

import { supabase } from '../integrations/supabase/client'
import { aiSmartLearningService } from './aiSmartLearningService'
import { avaliacaoClinicaService } from './avaliacaoClinicaService'
import { noaSystemService } from './noaSystemService'

export type ConversationMode = 'explicativo' | 'avaliacao_clinica' | 'curso'

export interface ConversationContext {
  sessionId: string
  userId: string
  currentMode: ConversationMode
  previousMode?: ConversationMode
  modeStartTime: Date
  contextData: any
  conversationHistory: any[]
  isFirstInteraction: boolean
}

export interface ModeTransition {
  from: ConversationMode
  to: ConversationMode
  trigger: string
  timestamp: Date
  confidence: number
}

export class ConversationModeService {
  private contexts: Map<string, ConversationContext> = new Map()
  private modeTransitions: ModeTransition[] = []

  // üéØ INICIALIZAR CONTEXTO DE CONVERSA
  inicializarContexto(sessionId: string, userId: string): ConversationContext {
    const ctx: ConversationContext = {
      sessionId,
      userId,
      currentMode: 'explicativo', // Modo padr√£o
      modeStartTime: new Date(),
      contextData: {},
      conversationHistory: [],
      isFirstInteraction: true
    }
    
    this.contexts.set(sessionId, ctx)
    this.logModeTransition('explicativo', 'explicativo', 'inicializacao', 1.0)
    
    return ctx
  }

  // üß† PROCESSAR MENSAGEM COM DETEC√á√ÉO DE MODO
  async processarMensagem(
    userMessage: string,
    sessionId: string,
    userId: string
  ): Promise<{
    response: string
    shouldChangeMode: boolean
    newMode?: ConversationMode
    context: ConversationContext
    confidence: number
  }> {
    
    let ctx = this.contexts.get(sessionId)
    if (!ctx) {
      ctx = this.inicializarContexto(sessionId, userId)
    }

    // Atualizar hist√≥rico
    ctx.conversationHistory.push({ 
      role: 'user', 
      content: userMessage,
      timestamp: new Date()
    })

    // üîç DETECTAR INTEN√á√ÉO E POSS√çVEL MUDAN√áA DE MODO
    const intentDetection = await this.detectarIntencaoEModo(userMessage, ctx)
    
    // üéØ SE DETECTOU MUDAN√áA DE MODO
    if (intentDetection.shouldChangeMode && intentDetection.newMode) {
      return await this.mudarModo(
        ctx,
        intentDetection.newMode,
        userMessage,
        intentDetection.confidence
      )
    }

    // üß† PROCESSAR NO MODO ATUAL
    const response = await this.processarNoModoAtual(userMessage, ctx)
    
    return {
      response,
      shouldChangeMode: false,
      context: ctx,
      confidence: intentDetection.confidence
    }
  }

  // üîç DETECTAR INTEN√á√ÉO E POSS√çVEL MUDAN√áA DE MODO
  private async detectarIntencaoEModo(
    userMessage: string, 
    ctx: ConversationContext
  ): Promise<{
    shouldChangeMode: boolean
    newMode?: ConversationMode
    confidence: number
    intent: string
  }> {
    
    const lower = userMessage.toLowerCase()
    
    // ü©∫ DETECTAR AVALIA√á√ÉO CL√çNICA (15+ varia√ß√µes)
    const avaliacaoPatterns = [
      'avalia√ß√£o cl√≠nica', 'avaliacao clinica',
      'iniciar avalia√ß√£o', 'iniciar avaliacao',
      'fazer avalia√ß√£o', 'fazer avaliacao',
      'quero fazer uma avalia√ß√£o', 'quero fazer uma avaliacao',
      'preciso de uma avalia√ß√£o', 'preciso de uma avaliacao',
      'gostaria de fazer avalia√ß√£o', 'gostaria de fazer avaliacao',
      'pode me avaliar', 'quero ser avaliado',
      'avaliar minha sa√∫de', 'avaliar minha saude',
      'come√ßar avalia√ß√£o', 'come√ßar avaliacao',
      'iniciar entrevista', 'come√ßar entrevista',
      'arte da entrevista', 'entrevista cl√≠nica',
      'm√©todo imre', 'metodo imre',
      'consulta com dr ricardo', 'avalia√ß√£o dr ricardo'
    ]

    // üìö DETECTAR MODO CURSO (10+ varia√ß√µes)
    const cursoPatterns = [
      'quero aprender', 'quero estudar',
      'curso de medicina', 'curso medicina',
      'estudar entrevista', 'aprender entrevista',
      'm√©todo dr ricardo', 'metodo dr ricardo',
      'como fazer entrevista', 'como fazer avaliacao',
      't√©cnicas de entrevista', 'tecnicas de entrevista',
      'aprender imre', 'estudar imre',
      'curso online', 'aula online'
    ]

    // üîÑ DETECTAR VOLTA AO MODO EXPLICATIVO
    const explicativoPatterns = [
      'voltar ao chat', 'sair da avalia√ß√£o',
      'cancelar avalia√ß√£o', 'parar avalia√ß√£o',
      'quero conversar', 'modo normal',
      'chat normal', 'conversa normal'
    ]

    // ü©∫ AVALIA√á√ÉO CL√çNICA
    if (avaliacaoPatterns.some(pattern => lower.includes(pattern))) {
      return {
        shouldChangeMode: true,
        newMode: 'avaliacao_clinica',
        confidence: 0.95,
        intent: 'start_evaluation'
      }
    }

    // üìö MODO CURSO
    if (cursoPatterns.some(pattern => lower.includes(pattern))) {
      return {
        shouldChangeMode: true,
        newMode: 'curso',
        confidence: 0.9,
        intent: 'start_course'
      }
    }

    // üîÑ VOLTA AO EXPLICATIVO
    if (explicativoPatterns.some(pattern => lower.includes(pattern))) {
      return {
        shouldChangeMode: true,
        newMode: 'explicativo',
        confidence: 0.9,
        intent: 'back_to_chat'
      }
    }

    // üß† BUSCAR NO BANCO DE APRENDIZADOS
    const aprendizado = await aiSmartLearningService.buscarAprendizadosSimilares(
      userMessage,
      'intent_detection',
      1
    )

    if (aprendizado.length > 0 && aprendizado[0].confidence_score > 0.8) {
      const intent = aprendizado[0].category
      
      if (intent === 'start_evaluation') {
        return {
          shouldChangeMode: true,
          newMode: 'avaliacao_clinica',
          confidence: aprendizado[0].confidence_score,
          intent
        }
      }
      
      if (intent === 'start_course') {
        return {
          shouldChangeMode: true,
          newMode: 'curso',
          confidence: aprendizado[0].confidence_score,
          intent
        }
      }
    }

    return {
      shouldChangeMode: false,
      confidence: 0.5,
      intent: 'general_chat'
    }
  }

  // üéØ MUDAR MODO DE CONVERSA
  private async mudarModo(
    ctx: ConversationContext,
    newMode: ConversationMode,
    trigger: string,
    confidence: number
  ): Promise<{
    response: string
    shouldChangeMode: boolean
    newMode: ConversationMode
    context: ConversationContext
    confidence: number
  }> {
    
    const previousMode = ctx.currentMode
    ctx.previousMode = previousMode
    ctx.currentMode = newMode
    ctx.modeStartTime = new Date()
    
    // Log da transi√ß√£o
    this.logModeTransition(previousMode, newMode, trigger, confidence)
    
    // ü©∫ MODO AVALIA√á√ÉO CL√çNICA
    if (newMode === 'avaliacao_clinica') {
      const avaliacaoResponse = await avaliacaoClinicaService.iniciarAvaliacao(ctx.userId)
      ctx.contextData = avaliacaoResponse
      
      return {
        response: `ü©∫ **Avalia√ß√£o Cl√≠nica Inicial Iniciada**\n\nOl√°! Vou conduzi-lo atrav√©s de uma avalia√ß√£o cl√≠nica completa seguindo o m√©todo IMRE do Dr. Ricardo Valen√ßa.\n\nEsta avalia√ß√£o possui 28 blocos estruturados que nos ajudar√£o a compreender melhor sua condi√ß√£o de sa√∫de.\n\nVamos come√ßar?`,
        shouldChangeMode: true,
        newMode,
        context: ctx,
        confidence
      }
    }

    // üìö MODO CURSO
    if (newMode === 'curso') {
      return {
        response: `üìö **Modo Curso Ativado**\n\nBem-vindo ao curso "Arte da Entrevista Cl√≠nica"!\n\nAqui voc√™ aprender√°:\n‚Ä¢ Os 28 blocos IMRE\n‚Ä¢ T√©cnicas de escuta ativa\n‚Ä¢ Como conduzir entrevistas cl√≠nicas\n‚Ä¢ Casos pr√°ticos e exemplos\n\nPor onde gostaria de come√ßar?`,
        shouldChangeMode: true,
        newMode,
        context: ctx,
        confidence
      }
    }

    // üîÑ VOLTA AO EXPLICATIVO
    if (newMode === 'explicativo') {
      return {
        response: `üí¨ **Modo Conversa Normal**\n\nVoltamos ao chat normal! Posso ajudar com:\n‚Ä¢ D√∫vidas sobre cannabis medicinal\n‚Ä¢ Informa√ß√µes sobre neuro e nefro\n‚Ä¢ Explica√ß√µes educativas\n‚Ä¢ Evid√™ncias cient√≠ficas\n\nO que gostaria de saber?`,
        shouldChangeMode: true,
        newMode,
        context: ctx,
        confidence
      }
    }

    return {
      response: 'Modo alterado com sucesso!',
      shouldChangeMode: true,
      newMode,
      context: ctx,
      confidence
    }
  }

  // üß† PROCESSAR MENSAGEM NO MODO ATUAL
  private async processarNoModoAtual(
    userMessage: string,
    ctx: ConversationContext
  ): Promise<string> {
    
    switch (ctx.currentMode) {
      case 'avaliacao_clinica':
        return await this.processarAvaliacaoClinica(userMessage, ctx)
      
      case 'curso':
        return await this.processarModoCurso(userMessage, ctx)
      
      case 'explicativo':
      default:
        return await this.processarModoExplicativo(userMessage, ctx)
    }
  }

  // ü©∫ PROCESSAR AVALIA√á√ÉO CL√çNICA
  private async processarAvaliacaoClinica(
    userMessage: string,
    ctx: ConversationContext
  ): Promise<string> {
    
    // Inicializar contexto se n√£o existir
    if (!ctx.contextData || !ctx.contextData.avaliacaoIniciada) {
      console.log('ü©∫ Inicializando contexto de avalia√ß√£o...')
      const avaliacaoContext = await avaliacaoClinicaService.iniciarAvaliacao(ctx.userId, ctx.sessionId)
      ctx.contextData = avaliacaoContext
    }
    
    // Se est√° em avalia√ß√£o, delega para o servi√ßo espec√≠fico
    const avaliacaoResponse = await avaliacaoClinicaService.processarResposta(
      ctx.sessionId,
      userMessage,
      ctx.contextData
    )
    
    // Se avalia√ß√£o terminou (etapa 28), volta ao modo explicativo
    if (avaliacaoResponse.etapaAtual >= 28) {
      await this.mudarModo(ctx, 'explicativo', 'avaliacao_completa', 1.0)
      return 'üéâ Avalia√ß√£o cl√≠nica conclu√≠da! Voltamos ao chat normal!'
    }
    
    // Retorna a pr√≥xima pergunta
    const proximaPergunta = await avaliacaoClinicaService.getProximaPergunta(avaliacaoResponse.etapaAtual)
    return proximaPergunta
  }

  // üìö PROCESSAR MODO CURSO
  private async processarModoCurso(
    userMessage: string,
    ctx: ConversationContext
  ): Promise<string> {
    
    // Buscar conte√∫do educacional no banco
    const conteudoEducacional = await aiSmartLearningService.buscarAprendizadosSimilares(
      userMessage,
      'curso_educativo',
      3
    )

    if (conteudoEducacional.length > 0) {
      const melhorConteudo = conteudoEducacional[0]
      return `üìö **Conte√∫do Educacional**\n\n${melhorConteudo.ai_response}\n\nQuer que eu explique mais detalhadamente ou tem alguma d√∫vida espec√≠fica?`
    }

    // Fallback para conte√∫do padr√£o do curso
    return `üìö **Curso - Arte da Entrevista Cl√≠nica**\n\nPosso explicar sobre:\n‚Ä¢ Blocos IMRE (1-28)\n‚Ä¢ T√©cnicas de escuta ativa\n‚Ä¢ Casos pr√°ticos\n‚Ä¢ M√©todo do Dr. Ricardo\n\nSobre qual t√≥pico gostaria de aprender?`
  }

  // üí¨ PROCESSAR MODO EXPLICATIVO
  private async processarModoExplicativo(
    userMessage: string,
    ctx: ConversationContext
  ): Promise<string> {
    
    // Buscar resposta inteligente no banco
    const respostaInteligente = await aiSmartLearningService.gerarRespostaContextualizada(
      userMessage,
      ctx.userId,
      'general'
    )

    if (respostaInteligente) {
      return respostaInteligente
    }

    // Fallback para resposta padr√£o educativa
    return `üí¨ Posso ajudar com informa√ß√µes sobre:\n‚Ä¢ Cannabis medicinal (CBD/THC)\n‚Ä¢ Efeitos neurol√≥gicos e renais\n‚Ä¢ Evid√™ncias cient√≠ficas\n‚Ä¢ Compara√ß√µes e estudos\n\nO que gostaria de saber?`
  }

  // üìä LOG DE TRANSI√á√ïES DE MODO
  private logModeTransition(
    from: ConversationMode,
    to: ConversationMode,
    trigger: string,
    confidence: number
  ) {
    const transition: ModeTransition = {
      from,
      to,
      trigger,
      timestamp: new Date(),
      confidence
    }
    
    this.modeTransitions.push(transition)
    
    // Salvar no Supabase (com session_id tempor√°rio)
    supabase.from('mode_transitions_log').insert({
      session_id: 'temp-session-' + Date.now(),
      from_mode: from,
      to_mode: to,
      trigger_text: trigger,
      confidence_score: confidence,
      timestamp: new Date().toISOString()
    }).then(({ error }) => {
      if (error) console.error('Erro ao salvar transi√ß√£o:', error)
    })
    
    console.log(`üîÑ Modo alterado: ${from} ‚Üí ${to} (${confidence * 100}%)`)
  }

  // üìä OBTER CONTEXTO ATUAL
  getContexto(sessionId: string): ConversationContext | undefined {
    return this.contexts.get(sessionId)
  }

  // üìä OBTER HIST√ìRICO DE TRANSI√á√ïES
  getTransicoes(): ModeTransition[] {
    return this.modeTransitions
  }

  // üîÑ FOR√áAR MUDAN√áA DE MODO (para admin)
  async forcarMudancaModo(
    sessionId: string,
    newMode: ConversationMode,
    motivo: string
  ): Promise<boolean> {
    const ctx = this.contexts.get(sessionId)
    if (!ctx) return false

    await this.mudarModo(ctx, newMode, `admin_force: ${motivo}`, 1.0)
    return true
  }

  // üßπ LIMPAR CONTEXTO (para logout)
  limparContexto(sessionId: string): void {
    this.contexts.delete(sessionId)
  }
}

// Singleton
export const conversationModeService = new ConversationModeService()
