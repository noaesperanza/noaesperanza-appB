// üéÆ SERVI√áO DE PROCESSAMENTO DE COMANDOS DIRETOS
// Executa comandos automaticamente sem necessidade de ativa√ß√£o pr√©via

import { supabase } from '../integrations/supabase/client'
import { aiSmartLearningService } from './aiSmartLearningService'
import { avaliacaoClinicaService } from './avaliacaoClinicaService'
import { noaSystemService } from './noaSystemService'
import { DirectCommand, UserProfile } from './identityRecognitionService'

export interface CommandResult {
  success: boolean
  message: string
  data?: any
  action?: string
  shouldShowInChat: boolean
  shouldExecuteAction: boolean
}

export class DirectCommandProcessor {
  
  // ‚ö° EXECUTAR COMANDO DIRETO
  async executeDirectCommand(command: DirectCommand, user: UserProfile): Promise<CommandResult> {
    console.log('üéÆ Executando comando direto:', command.type, 'para usu√°rio:', user.name)

    try {
      switch (command.type) {
        case 'review_imre':
          return await this.reviewImre(command.parameters, user)
        
        case 'show_learnings':
          return await this.showLearnings(command.parameters, user)
        
        case 'continue_session':
          return await this.continueSession(command.parameters, user)
        
        case 'show_logs':
          return await this.showLogs(command.parameters, user)
        
        case 'generate_report':
          return await this.generateReport(command.parameters, user)
        
        default:
          return {
            success: false,
            message: 'Comando n√£o reconhecido. Voc√™ pode repetir de outra forma ou escolher uma das op√ß√µes abaixo.',
            shouldShowInChat: true,
            shouldExecuteAction: false
          }
      }
    } catch (error: any) {
      console.error('‚ùå Erro ao executar comando direto:', error)
      return {
        success: false,
        message: `Erro ao executar comando: ${error.message}`,
        shouldShowInChat: true,
        shouldExecuteAction: false
      }
    }
  }

  // ü©∫ REVISAR IMRE DO PACIENTE
  private async reviewImre(parameters: any, user: UserProfile): Promise<CommandResult> {
    const { patientName } = parameters
    
    if (!patientName) {
      return {
        success: false,
        message: 'Por favor, especifique o nome do paciente. Exemplo: "Quero revisar o IMRE do paciente Jo√£o Silva"',
        shouldShowInChat: true,
        shouldExecuteAction: false
      }
    }

    try {
      // Buscar avalia√ß√µes do paciente
      const { data: evaluations, error } = await supabase
        .from('avaliacoes_em_andamento')
        .select('*')
        .ilike('responses->>nome_paciente', `%${patientName}%`)
        .order('created_at', { ascending: false })
        .limit(5)

      if (error) {
        throw new Error(error.message)
      }

      if (!evaluations || evaluations.length === 0) {
        return {
          success: true,
          message: `N√£o encontrei avalia√ß√µes para o paciente "${patientName}". Quer que eu busque por outro nome ou crie uma nova avalia√ß√£o?`,
          shouldShowInChat: true,
          shouldExecuteAction: false
        }
      }

      const latestEvaluation = evaluations[0]
      const progress = latestEvaluation.current_block || 0
      const totalBlocks = latestEvaluation.total_blocks || 28

      return {
        success: true,
        message: `üìã **IMRE do Paciente: ${patientName}**

üìä **Progresso:** ${progress}/${totalBlocks} blocos
üìÖ **√öltima atualiza√ß√£o:** ${new Date(latestEvaluation.updated_at).toLocaleDateString('pt-BR')}
üìù **Status:** ${latestEvaluation.status}

Quer que eu continue a avalia√ß√£o ou mostre os detalhes de algum bloco espec√≠fico?`,
        data: latestEvaluation,
        action: 'show_imre_details',
        shouldShowInChat: true,
        shouldExecuteAction: true
      }
    } catch (error: any) {
      return {
        success: false,
        message: `Erro ao buscar IMRE do paciente: ${error.message}`,
        shouldShowInChat: true,
        shouldExecuteAction: false
      }
    }
  }

  // üß† MOSTRAR APRENDIZADOS SALVOS
  private async showLearnings(parameters: any, user: UserProfile): Promise<CommandResult> {
    const { topic } = parameters
    
    try {
      // Buscar aprendizados relacionados ao t√≥pico
      const aprendizados = await aiSmartLearningService.buscarAprendizadosSimilares(
        topic || 'geral',
        undefined,
        10
      )

      if (!aprendizados || aprendizados.length === 0) {
        return {
          success: true,
          message: `N√£o encontrei aprendizados espec√≠ficos sobre "${topic}". Quer que eu busque por outro t√≥pico ou mostre todos os aprendizados dispon√≠veis?`,
          shouldShowInChat: true,
          shouldExecuteAction: false
        }
      }

      const topAprendizados = aprendizados.slice(0, 5)
      const learningList = topAprendizados.map((aprendizado, index) => 
        `${index + 1}. **${aprendizado.keyword}** (${aprendizado.category})
   - Pergunta: ${aprendizado.user_message}
   - Resposta: ${aprendizado.ai_response.substring(0, 100)}...`
      ).join('\n\n')

      return {
        success: true,
        message: `üß† **Aprendizados sobre "${topic}":**

${learningList}

**Total encontrado:** ${aprendizados.length} aprendizados
**Confian√ßa m√©dia:** ${(aprendizados.reduce((acc, a) => acc + a.confidence_score, 0) / aprendizados.length * 100).toFixed(1)}%

Quer que eu mostre mais detalhes de algum aprendizado espec√≠fico?`,
        data: aprendizados,
        action: 'show_learning_details',
        shouldShowInChat: true,
        shouldExecuteAction: true
      }
    } catch (error: any) {
      return {
        success: false,
        message: `Erro ao buscar aprendizados: ${error.message}`,
        shouldShowInChat: true,
        shouldExecuteAction: false
      }
    }
  }

  // üîÑ CONTINUAR SESS√ÉO ANTERIOR
  private async continueSession(parameters: any, user: UserProfile): Promise<CommandResult> {
    try {
      // Buscar sess√µes recentes do usu√°rio
      const { data: sessions, error } = await supabase
        .from('noa_conversations')
        .select('session_id, created_at, conversation_type')
        .eq('user_type', user.role)
        .order('created_at', { ascending: false })
        .limit(5)

      if (error) {
        throw new Error(error.message)
      }

      if (!sessions || sessions.length === 0) {
        return {
          success: true,
          message: 'N√£o encontrei sess√µes anteriores. Vamos come√ßar uma nova conversa!',
          shouldShowInChat: true,
          shouldExecuteAction: false
        }
      }

      const latestSession = sessions[0]
      const sessionDate = new Date(latestSession.created_at).toLocaleDateString('pt-BR')

      return {
        success: true,
        message: `üîÑ **Sess√£o Encontrada!**

üìÖ **Data:** ${sessionDate}
üéØ **Tipo:** ${latestSession.conversation_type}
üÜî **ID da Sess√£o:** ${latestSession.session_id}

Quer que eu continue esta sess√£o ou prefere come√ßar uma nova?`,
        data: latestSession,
        action: 'continue_session',
        shouldShowInChat: true,
        shouldExecuteAction: true
      }
    } catch (error: any) {
      return {
        success: false,
        message: `Erro ao buscar sess√µes: ${error.message}`,
        shouldShowInChat: true,
        shouldExecuteAction: false
      }
    }
  }

  // üìä MOSTRAR LOGS DA IA
  private async showLogs(parameters: any, user: UserProfile): Promise<CommandResult> {
    const { timeframe } = parameters
    
    try {
      // Buscar logs recentes
      const { data: logs, error } = await supabase
        .from('ai_learning')
        .select('*')
        .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
        .order('created_at', { ascending: false })
        .limit(20)

      if (error) {
        throw new Error(error.message)
      }

      if (!logs || logs.length === 0) {
        return {
          success: true,
          message: 'N√£o encontrei logs de atividade nas √∫ltimas 24 horas.',
          shouldShowInChat: true,
          shouldExecuteAction: false
        }
      }

      const logSummary = logs.slice(0, 5).map((log, index) => 
        `${index + 1}. **${log.keyword}** (${log.category})
   - Uso: ${log.usage_count}x
   - Confian√ßa: ${(log.confidence_score * 100).toFixed(1)}%`
      ).join('\n\n')

      return {
        success: true,
        message: `üìä **Logs da IA - √öltimas 24h:**

${logSummary}

**Total de atividades:** ${logs.length}
**Per√≠odo:** √öltimas 24 horas

Quer que eu mostre mais detalhes ou exporte um relat√≥rio completo?`,
        data: logs,
        action: 'show_log_details',
        shouldShowInChat: true,
        shouldExecuteAction: true
      }
    } catch (error: any) {
      return {
        success: false,
        message: `Erro ao buscar logs: ${error.message}`,
        shouldShowInChat: true,
        shouldExecuteAction: false
      }
    }
  }

  // üìã GERAR RELAT√ìRIO FINAL
  private async generateReport(parameters: any, user: UserProfile): Promise<CommandResult> {
    try {
      // Buscar dados para o relat√≥rio
      const { data: conversations, error: convError } = await supabase
        .from('noa_conversations')
        .select('*')
        .gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
        .order('created_at', { ascending: false })

      if (convError) {
        throw new Error(convError.message)
      }

      const { data: evaluations, error: evalError } = await supabase
        .from('avaliacoes_em_andamento')
        .select('*')
        .gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())

      if (evalError) {
        throw new Error(evalError.message)
      }

      const totalConversations = conversations?.length || 0
      const totalEvaluations = evaluations?.length || 0
      const completedEvaluations = evaluations?.filter(e => e.status === 'concluida').length || 0

      return {
        success: true,
        message: `üìã **Relat√≥rio Semanal - N√¥a Esperanza**

üìä **ESTAT√çSTICAS GERAIS:**
‚Ä¢ Total de conversas: ${totalConversations}
‚Ä¢ Avalia√ß√µes iniciadas: ${totalEvaluations}
‚Ä¢ Avalia√ß√µes conclu√≠das: ${completedEvaluations}
‚Ä¢ Taxa de conclus√£o: ${totalEvaluations > 0 ? ((completedEvaluations / totalEvaluations) * 100).toFixed(1) : 0}%

üìÖ **Per√≠odo:** √öltimos 7 dias
üë§ **Gerado por:** ${user.name}
üïí **Data:** ${new Date().toLocaleDateString('pt-BR')}

Quer que eu exporte este relat√≥rio em PDF ou mostre mais detalhes?`,
        data: { conversations, evaluations },
        action: 'export_report',
        shouldShowInChat: true,
        shouldExecuteAction: true
      }
    } catch (error: any) {
      return {
        success: false,
        message: `Erro ao gerar relat√≥rio: ${error.message}`,
        shouldShowInChat: true,
        shouldExecuteAction: false
      }
    }
  }
}

// Inst√¢ncia global do processador
export const directCommandProcessor = new DirectCommandProcessor()
