// üß© GPT MODULES SERVICE - Dr. Ricardo Valen√ßa
// Sistema de m√≥dulos GPT por fun√ß√£o

import { supabase } from '../integrations/supabase/client'
import { activeContextService } from './activeContextService'

export interface GPTModule {
  id: string
  name: string
  function: string
  description: string
  documents: string[]
  tags: string[]
  promptTemplate: string
  isActive: boolean
  createdAt: Date
  lastUpdated: Date
}

export interface ModuleProfile {
  nome: string
  fun√ß√£o: string
  documentos: string[]
  personalidade: string
  especialidades: string[]
  estiloComunicacao: string
}

export class GPTModulesService {
  
  // üß© CRIAR M√ìDULO GPT
  async createGPTModule(profile: ModuleProfile): Promise<GPTModule> {
    const module: GPTModule = {
      id: `module_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: profile.nome,
      function: profile.fun√ß√£o,
      description: `M√≥dulo ${profile.nome} especializado em ${profile.fun√ß√£o}`,
      documents: profile.documentos,
      tags: this.generateTagsFromProfile(profile),
      promptTemplate: this.generatePromptTemplate(profile),
      isActive: true,
      createdAt: new Date(),
      lastUpdated: new Date()
    }
    
    // Salvar no banco
    await this.saveModuleToDatabase(module)
    
    console.log('üß© M√≥dulo GPT criado:', profile.nome)
    return module
  }
  
  // üéØ ATIVAR M√ìDULO ESPEC√çFICO
  async activateModule(moduleId: string): Promise<void> {
    try {
      // Desativar todos os m√≥dulos
      await supabase
        .from('gpt_modules')
        .update({ is_active: false })
        .eq('user_id', 'dr-ricardo-valenca')
      
      // Ativar m√≥dulo espec√≠fico
      await supabase
        .from('gpt_modules')
        .update({ is_active: true, last_updated: new Date().toISOString() })
        .eq('id', moduleId)
      
      console.log('üéØ M√≥dulo ativado:', moduleId)
    } catch (error) {
      console.error('Erro ao ativar m√≥dulo:', error)
    }
  }
  
  // üìã OBTER M√ìDULOS DISPON√çVEIS
  async getAvailableModules(): Promise<GPTModule[]> {
    try {
      const { data } = await supabase
        .from('gpt_modules')
        .select('*')
        .eq('user_id', 'dr-ricardo-valenca')
        .order('created_at', { ascending: false })
      
      return data?.map(this.mapDatabaseToModule) || []
    } catch (error) {
      console.error('Erro ao buscar m√≥dulos:', error)
      return []
    }
  }
  
  // üîç OBTER M√ìDULO ATIVO
  async getActiveModule(): Promise<GPTModule | null> {
    try {
      const { data } = await supabase
        .from('gpt_modules')
        .select('*')
        .eq('user_id', 'dr-ricardo-valenca')
        .eq('is_active', true)
        .single()
      
      return data ? this.mapDatabaseToModule(data) : null
    } catch (error) {
      console.error('Erro ao buscar m√≥dulo ativo:', error)
      return null
    }
  }
  
  // üîÑ APLICAR DOCUMENTO AO M√ìDULO
  async applyDocumentToModule(docId: string, moduleId?: string): Promise<void> {
    try {
      const activeModule = moduleId ? 
        await this.getModuleById(moduleId) : 
        await this.getActiveModule()
      
      if (!activeModule) {
        console.error('Nenhum m√≥dulo ativo encontrado')
        return
      }
      
      // Buscar documento
      const { data: document } = await supabase
        .from('documentos_mestres')
        .select('*')
        .eq('id', docId)
        .single()
      
      if (!document) {
        console.error('Documento n√£o encontrado')
        return
      }
      
      // Atualizar m√≥dulo com novo documento
      const updatedDocuments = [...activeModule.documents, document.title]
      await supabase
        .from('gpt_modules')
        .update({ 
          documents: updatedDocuments,
          last_updated: new Date().toISOString()
        })
        .eq('id', activeModule.id)
      
      console.log('üîÑ Documento aplicado ao m√≥dulo:', document.title)
    } catch (error) {
      console.error('Erro ao aplicar documento ao m√≥dulo:', error)
    }
  }
  
  // üé® GERAR TEMPLATE DE PROMPT
  private generatePromptTemplate(profile: ModuleProfile): string {
    return `
Voc√™ √© ${profile.nome}, um m√≥dulo especializado da N√¥a Esperanza.

**FUN√á√ÉO:** ${profile.fun√ß√£o}

**PERSONALIDADE:** ${profile.personalidade}

**ESPECIALIDADES:**
${profile.especialidades.map(esp => `‚Ä¢ ${esp}`).join('\n')}

**ESTILO DE COMUNICA√á√ÉO:** ${profile.estiloComunicacao}

**DOCUMENTOS DE REFER√äNCIA:**
${profile.documentos.map(doc => `‚Ä¢ ${doc}`).join('\n')}

**INSTRU√á√ïES:**
- Mantenha o tom e estilo da N√¥a Esperanza
- Use seus conhecimentos especializados
- Seja preciso e √∫til em sua √°rea
- Integre escuta cl√≠nica e √©tica quando apropriado
- Evolua com cada intera√ß√£o
`
  }
  
  // üè∑Ô∏è GERAR TAGS DO PERFIL
  private generateTagsFromProfile(profile: ModuleProfile): string[] {
    const tags = ['gpt', 'modulo', profile.fun√ß√£o.toLowerCase()]
    
    // Adicionar tags baseadas nas especialidades
    profile.especialidades.forEach(esp => {
      tags.push(esp.toLowerCase().replace(/\s+/g, '-'))
    })
    
    return tags
  }
  
  // üìä MAPEAR DADOS DO BANCO
  private mapDatabaseToModule(data: any): GPTModule {
    return {
      id: data.id,
      name: data.name,
      function: data.function,
      description: data.description,
      documents: data.documents || [],
      tags: data.tags || [],
      promptTemplate: data.prompt_template,
      isActive: data.is_active,
      createdAt: new Date(data.created_at),
      lastUpdated: new Date(data.last_updated)
    }
  }
  
  // üîç OBTER M√ìDULO POR ID
  private async getModuleById(moduleId: string): Promise<GPTModule | null> {
    try {
      const { data } = await supabase
        .from('gpt_modules')
        .select('*')
        .eq('id', moduleId)
        .single()
      
      return data ? this.mapDatabaseToModule(data) : null
    } catch (error) {
      console.error('Erro ao buscar m√≥dulo por ID:', error)
      return null
    }
  }
  
  // üíæ SALVAR M√ìDULO NO BANCO
  private async saveModuleToDatabase(module: GPTModule): Promise<void> {
    try {
      await supabase
        .from('gpt_modules')
        .insert({
          id: module.id,
          name: module.name,
          function: module.function,
          description: module.description,
          documents: module.documents,
          tags: module.tags,
          prompt_template: module.promptTemplate,
          is_active: module.isActive,
          user_id: 'dr-ricardo-valenca',
          created_at: module.createdAt.toISOString(),
          last_updated: module.lastUpdated.toISOString()
        })
    } catch (error) {
      console.error('Erro ao salvar m√≥dulo no banco:', error)
    }
  }
  
  // üöÄ INICIALIZAR M√ìDULOS PADR√ÉO
  async initializeDefaultModules(): Promise<void> {
    const defaultModules: ModuleProfile[] = [
      {
        nome: "GPT Cl√≠nico",
        fun√ß√£o: "Realiza triagens e escuta ativa",
        documentos: ["Avalia√ß√£o Inicial", "An√°lise Cl√≠nica", "Curso Arte da Entrevista"],
        personalidade: "Emp√°tica, precisa, focada no bem-estar do paciente",
        especialidades: ["Triagem m√©dica", "Escuta ativa", "Avalia√ß√£o cl√≠nica"],
        estiloComunicacao: "Profissional, acolhedor, baseado em evid√™ncias"
      },
      {
        nome: "GPT Pedag√≥gico",
        fun√ß√£o: "Educa√ß√£o m√©dica e treinamento",
        documentos: ["Curso Arte da Entrevista", "Metodologias Educacionais"],
        personalidade: "Did√°tica, motivadora, adapt√°vel aos diferentes n√≠veis",
        especialidades: ["Educa√ß√£o m√©dica", "Treinamento cl√≠nico", "Desenvolvimento de compet√™ncias"],
        estiloComunicacao: "Clara, estruturada, encorajadora"
      },
      {
        nome: "GPT Narrativo",
        fun√ß√£o: "An√°lise de hist√≥rias cl√≠nicas e relatos",
        documentos: ["Casos Cl√≠nicos", "Relatos de Pacientes"],
        personalidade: "Anal√≠tica, emp√°tica, focada na narrativa humana",
        especialidades: ["An√°lise narrativa", "Hist√≥rias cl√≠nicas", "Compreens√£o do contexto"],
        estiloComunicacao: "Reflexiva, detalhada, humanizada"
      },
      {
        nome: "GPT T√©cnico",
        fun√ß√£o: "An√°lise de dados e metodologias",
        documentos: ["Protocolos de Pesquisa", "An√°lises Estat√≠sticas"],
        personalidade: "Precisa, sistem√°tica, baseada em evid√™ncias",
        especialidades: ["An√°lise de dados", "Metodologia cient√≠fica", "Protocolos cl√≠nicos"],
        estiloComunicacao: "T√©cnica, objetiva, fundamentada"
      }
    ]
    
    for (const profile of defaultModules) {
      await this.createGPTModule(profile)
    }
    
    console.log('üöÄ M√≥dulos padr√£o inicializados')
  }
}

export const gptModulesService = new GPTModulesService()
