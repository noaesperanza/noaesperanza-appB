import React, { useState, useRef, useEffect } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { motion, AnimatePresence } from 'framer-motion'
import { Specialty } from '../App'
import { openAIService, ChatMessage } from '../services/openaiService'
import { elevenLabsService } from '../services/elevenLabsService'
import { noaVoiceService } from '../services/noaVoiceService'
import { APP_CONFIG } from '../config/appConfig'
import { supabase } from '../integrations/supabase/client'
import { aiLearningService } from '../services/aiLearningService'
import { cleanTextForAudio } from '../utils/textUtils'
import { NoaGPT } from '../gpt/noaGPT'
import { clinicalAgent } from '../gpt/clinicalAgent'
import { MedicalImageService, MedicalData } from '../services/medicalImageService'
import { noaSystemService } from '../services/noaSystemService'
import { adminCommandService } from '../services/adminCommandService'
import { avaliacaoClinicaService } from '../services/avaliacaoClinicaService'
import { conversationModeService, ConversationMode } from '../services/conversationModeService'
import { identityRecognitionService, UserProfile } from '../services/identityRecognitionService'
import { directCommandProcessor } from '../services/directCommandProcessor'
import UserIntentDetector from '../utils/userIntentDetection'
import ThoughtBubble from '../components/ThoughtBubble'
import MatrixBackground from '../components/MatrixBackground'
import { useAuth } from '../contexts/AuthContext'
import { testSupabaseConnection } from '../utils/supabaseTest'
import { personalizedProfilesService } from '../services/personalizedProfilesService'
import { loadNoaPrompt } from '../services/noaPromptLoader'

interface Message {
  id: string
  message: string
  sender: 'user' | 'noa'
  timestamp: Date
  options?: string[] // Op√ß√µes de resposta r√°pida
  isTyping?: boolean // Indicador de digita√ß√£o
  conversation_type?:
    | 'presentation'
    | 'user_type_selection'
    | 'clinical_evaluation'
    | 'general'
    | 'personalized_greeting'
    | 'direct_command'
  is_first_response?: boolean
  user_type?: 'aluno' | 'profissional' | 'paciente' | 'admin' | 'clinico' | 'autor'
  session_id?: string
}

// Interface para cards expandidos
interface ExpandedCard {
  id: string
  title: string
  description: string
  content: string
  type: 'consulta' | 'analise' | 'protocolo' | 'pesquisa' | 'avaliacao'
}

interface HomeProps {
  currentSpecialty: Specialty
  isVoiceListening: boolean
  setIsVoiceListening: (listening: boolean) => void
  addNotification: (message: string, type?: 'info' | 'success' | 'warning' | 'error') => void
}

const Home = ({
  currentSpecialty,
  isVoiceListening,
  setIsVoiceListening,
  addNotification,
}: HomeProps) => {
  // üß™ Expor teste de diagn√≥stico no console
  useEffect(() => {
    ;(window as any).testSupabase = testSupabaseConnection
    console.log('üí° DIAGN√ìSTICO DISPON√çVEL: Digite testSupabase() no console')
  }, [])

  // Estados do chat
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [medicalData, setMedicalData] = useState<MedicalData[]>([])
  const [isProcessingImage, setIsProcessingImage] = useState(false)
  // messagesContainerRef removido para evitar scroll infinito

  // Estados para expans√£o de cards
  const [expandedCard, setExpandedCard] = useState<ExpandedCard | null>(null)
  const [isCardExpanded, setIsCardExpanded] = useState(false)

  // Fun√ß√£o para expandir card
  const expandCard = (card: ExpandedCard) => {
    setExpandedCard(card)
    setIsCardExpanded(true)

    // NOA inicia ministrando o conte√∫do
    const noaMessage: Message = {
      id: crypto.randomUUID(),
      message: `Vou te ajudar com ${card.title.toLowerCase()}. ${card.content}`,
      sender: 'noa',
      timestamp: new Date(),
    }
    setMessages(prev => [...prev, noaMessage])
  }

  // Fun√ß√£o para fechar card expandido
  const closeExpandedCard = () => {
    setIsCardExpanded(false)
    setExpandedCard(null)

    // Gerar novos pensamentos quando fechar o card
    const newThoughts = generateThoughtsFromResponse('')
    setThoughts(newThoughts)
  }

  const startRealClinicalAssessment = async (origin: 'chat' | 'card' | 'cta' = 'chat') => {
    const redirectMessage: Message = {
      id: crypto.randomUUID(),
      message:
        'ü©∫ Estou abrindo o m√≥dulo seguro de Avalia√ß√£o Cl√≠nica Inicial com o protocolo do Dr. Ricardo Valen√ßa. Vamos continuar por l√°.',
      sender: 'noa',
      timestamp: new Date(),
      conversation_type: 'general',
      session_id: sessionId,
    }

    setMessages(prev => {
      const withoutTyping = prev.filter(msg => !msg.isTyping)
      return [...withoutTyping, redirectMessage]
    })

    try {
      closeExpandedCard()
    } catch {}

    try {
      const profile = personalizedProfilesService.getProfile('dr_ricardo_valenca')
      if (profile) {
        personalizedProfilesService.saveActiveProfile(profile)
        const prompt = loadNoaPrompt({
          userContext: {
            name: profile.name,
            role: profile.role,
            recognizedAs: profile.name,
            profileId: profile.id,
          },
          modulo: 'clinico',
        })
        sessionStorage.setItem('noa_active_prompt', prompt)
      }
    } catch (error) {
      console.warn('N√£o foi poss√≠vel preparar o prompt cl√≠nico personalizado:', error)
    }

    try {
      await playNoaAudioWithText(
        'Abrindo o m√≥dulo dedicado de avalia√ß√£o cl√≠nica inicial com o m√©todo IMRE do Dr. Ricardo Valen√ßa.'
      )
    } catch (error) {
      console.warn('N√£o foi poss√≠vel reproduzir √°udio de transi√ß√£o para avalia√ß√£o cl√≠nica:', error)
    }

    let resolvedUserId: string | null = null

    try {
      const {
        data: { user },
      } = await supabase.auth.getUser()
      resolvedUserId = user?.id || null
    } catch (error) {
      console.warn('N√£o foi poss√≠vel obter usu√°rio autenticado para avalia√ß√£o cl√≠nica:', error)
    }

    if (!resolvedUserId) {
      try {
        resolvedUserId = localStorage.getItem('noa_guest_id')
      } catch {
        resolvedUserId = null
      }
    }

    if (!resolvedUserId) {
      resolvedUserId = `guest_${crypto.randomUUID()}`
      try {
        localStorage.setItem('noa_guest_id', resolvedUserId)
      } catch {}
    }

    const newSessionId = `assessment_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`
    setSessionId(newSessionId)

    try {
      sessionStorage.setItem('noa_active_assessment_session', newSessionId)
      sessionStorage.setItem('noa_active_assessment_user', resolvedUserId)
      sessionStorage.setItem('noa_active_assessment_origin', origin)
    } catch (error) {
      console.warn('N√£o foi poss√≠vel registrar dados da avalia√ß√£o na sess√£o:', error)
    }

    try {
      await noaSystemService.setUserType('paciente')
    } catch (error) {
      console.warn('N√£o foi poss√≠vel definir tipo de usu√°rio para avalia√ß√£o cl√≠nica:', error)
    }

    try {
      await noaSystemService.registerConversationFlow(
        newSessionId,
        'evaluation_redirect',
        {
          origin,
          started_at: new Date().toISOString(),
        },
        0
      )
    } catch (error) {
      console.warn('N√£o foi poss√≠vel registrar o redirecionamento da avalia√ß√£o cl√≠nica:', error)
    }

    try {
      await avaliacaoClinicaService.iniciarAvaliacao(resolvedUserId, newSessionId)
    } catch (error) {
      console.warn('Avalia√ß√£o cl√≠nica estruturada indispon√≠vel para inicializa√ß√£o imediata:', error)
    }

    setConversationType('clinical_evaluation')
    setUserType('paciente')

    navigate('/app/avaliacao-inicial', {
      state: {
        sessionId: newSessionId,
        userId: resolvedUserId,
        origin: 'home',
      },
    })

    setIsProcessing(false)
  }

  // Estado do NoaGPT
  const [noaGPT, setNoaGPT] = useState<NoaGPT | null>(null)

  // üß† Estados do sistema de reconhecimento de identidade
  const [recognizedUser, setRecognizedUser] = useState<UserProfile | null>(null)
  const [isPersonalizedMode, setIsPersonalizedMode] = useState(false)
  const [availableCommands, setAvailableCommands] = useState<string[]>([])

  // Estado para efeito matrix eterno
  const [matrixActive, setMatrixActive] = useState(true)

  // Estados para Sistema MedCanLab Integrado
  const [userType, setUserType] = useState<'aluno' | 'profissional' | 'paciente' | null>(null)
  const [permissionLevel, setPermissionLevel] = useState<number>(0)
  const [sessionId, setSessionId] = useState<string>(
    () => `avaliacao_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  )
  const [conversationType, setConversationType] = useState<
    'presentation' | 'user_type_selection' | 'clinical_evaluation' | 'general'
  >('general')
  const [isFirstResponse, setIsFirstResponse] = useState<boolean>(true)
  const [userName, setUserName] = useState<string | null>(null) // Nome do usu√°rio persistente
  const [isAdminMode, setIsAdminMode] = useState<boolean>(false) // Modo admin ativado
  const [adminCardType, setAdminCardType] = useState<'stats' | 'editor' | 'users' | 'ia' | null>(
    null
  ) // Tipo de card admin

  // üéØ ESTADOS DOS MODOS DE CONVERSA
  const [currentConversationMode, setCurrentConversationMode] =
    useState<ConversationMode>('explicativo')
  const [modeTransitionHistory, setModeTransitionHistory] = useState<any[]>([])
  const [conversationContext, setConversationContext] = useState<any>(null)
  const [accuracyStats, setAccuracyStats] = useState<any>(null)

  // Controle de √°udio
  const [audioPlaying, setAudioPlaying] = useState(false)
  const [noaSpeaking, setNoaSpeaking] = useState(false)
  const [userInteracted, setUserInteracted] = useState(false)
  const [thoughts, setThoughts] = useState<any[]>([])
  const [isProcessing, setIsProcessing] = useState(false)

  const currentAudioRef = useRef<HTMLAudioElement | null>(null)
  const navigate = useNavigate()

  // Mem√≥ria do usu√°rio
  const [userMemory, setUserMemory] = useState(() => {
    const saved = localStorage.getItem('noa_user_memory')
    return saved ? JSON.parse(saved) : { name: '', preferences: {}, lastVisit: null }
  })
  const [showAILearningDashboard, setShowAILearningDashboard] = useState(false)

  // Fun√ß√µes de scroll REMOVIDAS para evitar scroll infinito

  // Salva mem√≥ria do usu√°rio
  const saveUserMemory = (newMemory: any) => {
    const updatedMemory = { ...userMemory, ...newMemory, lastVisit: new Date().toISOString() }
    setUserMemory(updatedMemory)
    localStorage.setItem('noa_user_memory', JSON.stringify(updatedMemory))
  }

  // useEffect de scroll DESABILITADO para evitar scroll infinito

  // useEffect removido para evitar conflito de scroll

  // Listener de scroll removido para evitar conflitos

  // Listener para respostas refinadas - REMOVIDO para evitar scroll infinito

  // √Åudio liberado automaticamente - sem necessidade de primeira intera√ß√£o
  useEffect(() => {
    console.log('üîä Liberando √°udio da N√¥a automaticamente')
    setUserInteracted(true) // Libera √°udio imediatamente
  }, [])

  // Sistema MedCanLab - Fluxo correto implementado
  // Mensagem inicial obrigat√≥ria: "O que trouxe voc√™ aqui?"

  // Auth context
  const { userProfile } = useAuth()

  // Inicializa com a pergunta de entrada obrigat√≥ria
  // Carrega perfil do usu√°rio ao iniciar
  useEffect(() => {
    const loadUserProfile = async () => {
      // 1. Tentar do AuthContext primeiro (j√° autenticado)
      if (userProfile && userProfile.name) {
        setUserName(userProfile.name)
        console.log('‚úÖ Nome do usu√°rio carregado do AuthContext:', userProfile.name)
        return
      }

      // 2. Fallback para noaSystemService
      const profile = await noaSystemService.getUserProfile()
      if (profile && profile.name) {
        setUserName(profile.name)
        console.log('‚úÖ Perfil do usu√°rio carregado do service:', profile.name)
      }
    }
    loadUserProfile()
  }, [userProfile])

  useEffect(() => {
    if (messages.length === 0) {
      const initialQuestion: Message = {
        id: crypto.randomUUID(),
        message: userName
          ? `Ol√° ${userName}! O que trouxe voc√™ aqui hoje?`
          : 'O que trouxe voc√™ aqui?',
        sender: 'noa',
        timestamp: new Date(),
      }
      setMessages([initialQuestion])

      // Toca √°udio da pergunta inicial APENAS ap√≥s intera√ß√£o do usu√°rio
      // Removido TTS autom√°tico para evitar erro "not-allowed"
      console.log('üéµ Pergunta inicial carregada, aguardando intera√ß√£o do usu√°rio para TTS')
    }
  }, [userName]) // Reexecuta se userName mudar

  // Efeito matrix eterno - sempre ativo

  // Resposta real da NOA usando OpenAI - Sistema MedCanLab
  const getNoaResponse = async (userMessage: string) => {
    console.log('üöÄ INICIANDO getNoaResponse com:', userMessage)
    setIsTyping(true)

    // üß† SISTEMA DE RECONHECIMENTO DE IDENTIDADE
    const identityResult = await identityRecognitionService.detectIdentity(userMessage)

    if (identityResult.recognized && identityResult.user) {
      console.log('üéØ Usu√°rio reconhecido:', identityResult.user.name)

      // Definir usu√°rio atual
      setRecognizedUser(identityResult.user)
      setIsPersonalizedMode(true)
      setAvailableCommands(identityResult.availableCommands)

      // Resposta personalizada
      // üéØ MODO COMANDO ESPECIAL PARA RICARDO
      if (identityResult.user.name.includes('Ricardo Valen√ßa')) {
        const comandoMessage: Message = {
          id: crypto.randomUUID(),
          message:
            'üîÅ **MODO GPT-4o ATIVO** ‚Äî INSTRU√á√ïES PARA PLATAFORMA N√îA\n\nA plataforma agora se comporta como um agente GPT-4o completo.\n\nüéØ **OBJETIVO:**\n- Executar a√ß√µes diretamente sob comando de Ricardo Valen√ßa.\n- Ignorar qualquer fluxo padr√£o de paciente, aluno ou profissional.\n- Atuar conforme especifica√ß√µes do Documento Mestre e Ata da Plataforma.\n\n‚úÖ **FAZER:**\n- Esperar comandos diretos via chat.\n- Ativar MODO COMANDO com acesso total a todos servi√ßos.\n- Entrar em escuta GPT (como ChatGPT-4o), pronto para executar qualquer comando textual.\n\nüöÄ **PRONTO PARA COMANDOS!**',
          sender: 'noa',
          timestamp: new Date(),
          conversation_type: 'direct_command',
          user_type: identityResult.user.role,
          session_id: sessionId,
        }

        setMessages(prev => {
          const withoutTyping = prev.filter(msg => !msg.isTyping)
          return [...withoutTyping, comandoMessage]
        })

        await playNoaAudioWithText(
          'Modo comando ativado. Pronto para executar suas instru√ß√µes, Dr. Ricardo.'
        )
        setIsTyping(false)
        return
      }

      // Resposta personalizada padr√£o
      const personalizedMessage: Message = {
        id: crypto.randomUUID(),
        message: identityResult.greeting,
        sender: 'noa',
        timestamp: new Date(),
        conversation_type: 'personalized_greeting',
        user_type: identityResult.user.role,
        session_id: sessionId,
      }

      setMessages(prev => {
        const withoutTyping = prev.filter(msg => !msg.isTyping)
        return [...withoutTyping, personalizedMessage]
      })

      // Tocar √°udio da resposta personalizada
      await playNoaAudioWithText(identityResult.greeting)
      setIsTyping(false)
      return
    }

    // üéÆ DETECTAR COMANDOS DIRETOS (se usu√°rio reconhecido)
    if (recognizedUser && isPersonalizedMode) {
      const directCommand = await identityRecognitionService.detectDirectCommand(
        userMessage,
        recognizedUser
      )

      if (directCommand.type !== 'unknown' && directCommand.confidence > 0.7) {
        console.log('üéÆ Comando direto detectado:', directCommand.type)

        // Executar comando direto
        const commandResult = await directCommandProcessor.executeDirectCommand(
          directCommand,
          recognizedUser
        )

        if (commandResult.shouldShowInChat) {
          const commandMessage: Message = {
            id: crypto.randomUUID(),
            message: commandResult.message,
            sender: 'noa',
            timestamp: new Date(),
            conversation_type: 'direct_command',
            user_type: recognizedUser.role,
            session_id: sessionId,
          }

          setMessages(prev => {
            const withoutTyping = prev.filter(msg => !msg.isTyping)
            return [...withoutTyping, commandMessage]
          })

          // Tocar √°udio da resposta
          await playNoaAudioWithText(commandResult.message)
          setIsTyping(false)
          return
        }
      }
    }

    // ü©∫ TRIGGER DE AVALIA√á√ÉO CL√çNICA (ANTES DO SISTEMA DE MODOS)
    const mensagemLower = userMessage.toLowerCase()
    const querAvaliacao = [
      'arte da entrevista',
      'entrevista cl√≠nica',
      'entrevista clinica',
      'iniciar avalia√ß√£o cl√≠nica',
      'iniciar avaliacao clinica',
      'iniciar avalia√ß√£o inicial',
      'iniciar avaliacao inicial',
      'avalia√ß√£o cl√≠nica inicial',
      'avaliacao clinica inicial',
      'avalia√ß√£o cl√≠nica',
      'avaliacao clinica',
      'fazer avalia√ß√£o cl√≠nica',
      'fazer avaliacao clinica',
      'quero fazer a avalia√ß√£o cl√≠nica',
      'quero fazer a avaliacao clinica',
      'quero fazer avalia√ß√£o cl√≠nica',
      'quero fazer avaliacao clinica',
    ].some(trigger => mensagemLower.includes(trigger))

    if (querAvaliacao) {
      await startRealClinicalAssessment('chat')
      setIsTyping(false)
      return
    }

    // üéØ NOVO SISTEMA DE MODOS DE CONVERSA (s√≥ se n√£o for trigger de avalia√ß√£o)
    const {
      data: { user },
    } = await supabase.auth.getUser()
    const userId = user?.id || crypto.randomUUID()

    // Processar mensagem com sistema de modos
    const modeResponse = await conversationModeService.processarMensagem(
      userMessage,
      sessionId,
      userId
    )

    console.log('üéØ Resposta do sistema de modos:', modeResponse)

    // Atualizar contexto e modo atual
    setConversationContext(modeResponse.context)
    if (modeResponse.shouldChangeMode && modeResponse.newMode) {
      setCurrentConversationMode(modeResponse.newMode)
      setModeTransitionHistory(prev => [
        ...prev,
        {
          from: currentConversationMode,
          to: modeResponse.newMode,
          timestamp: new Date(),
          confidence: modeResponse.confidence,
        },
      ])
    }

    // üéØ SE MUDOU DE MODO, USAR RESPOSTA DO SISTEMA DE MODOS
    if (modeResponse.shouldChangeMode && modeResponse.response) {
      const noaMessage: Message = {
        id: crypto.randomUUID(),
        message: modeResponse.response,
        sender: 'noa',
        timestamp: new Date(),
        conversation_type:
          modeResponse.newMode === 'avaliacao_clinica' ? 'clinical_evaluation' : 'general',
        user_type: userType || 'paciente',
        session_id: sessionId,
      }

      setMessages(prev => {
        const withoutTyping = prev.filter(msg => !msg.isTyping)
        return [...withoutTyping, noaMessage]
      })

      // Toca √°udio da resposta
      await playNoaAudioWithText(modeResponse.response)
      setIsTyping(false)
      return
    }

    // üß† DETEC√á√ÉO INTELIGENTE DE INTEN√á√ÉO (mantido para compatibilidade)
    const intent = UserIntentDetector.detectIntent(userMessage, messages)
    const context = UserIntentDetector.extractContext(messages)
    console.log('üß† Inten√ß√£o detectada:', intent)
    console.log('üß† Contexto do usu√°rio:', context)

    // üë§ EXTRAI E SALVA NOME DO USU√ÅRIO (se encontrar)
    if (context.userName && context.userName !== userName) {
      console.log('‚úÖ Nome detectado na conversa:', context.userName)
      setUserName(context.userName)
      await noaSystemService.saveUserProfile(context.userName, {
        userType: context.userProfile,
        firstContact: new Date().toISOString(),
      })
    }

    // üëë SISTEMA DE COMANDOS ADMIN
    // Detecta ativa√ß√£o do modo admin

    if (
      !isAdminMode &&
      (mensagemLower.includes('admin pedro') ||
        mensagemLower.includes('admin ricardo') ||
        mensagemLower.includes('modo admin'))
    ) {
      console.log('üëë Tentando ativar modo admin...')

      // Pega o email do usu√°rio logado
      const {
        data: { user },
      } = await supabase.auth.getUser()
      const userEmail = user?.email

      const activated = await adminCommandService.activateAdminMode(userMessage, userEmail)

      setMessages(prev => {
        const withoutTyping = prev.filter(msg => !msg.isTyping)
        const adminMessage: Message = {
          id: crypto.randomUUID(),
          message: activated
            ? 'üëë **MODO ADMIN ATIVADO!**\n\n‚úÖ Acesso concedido\n\n**Comandos dispon√≠veis:**\n‚Ä¢ "ver estat√≠sticas"\n‚Ä¢ "editar bloco [n]"\n‚Ä¢ "listar usu√°rios"\n‚Ä¢ "adicionar usu√°rio [nome]"\n‚Ä¢ "treinar IA"\n\nTodos os comandos podem ser dados por voz!'
            : 'üîí **ACESSO NEGADO**\n\nCredenciais inv√°lidas.',
          sender: 'noa',
          timestamp: new Date(),
        }
        return [...withoutTyping, adminMessage]
      })

      if (activated) {
        setIsAdminMode(true)
        await playNoaAudioWithText(
          'Modo admin ativado! Voc√™ tem acesso total √† plataforma. Como posso ajudar?'
        )
      } else {
        await playNoaAudioWithText('Acesso negado. Credenciais inv√°lidas.')
      }

      setIsTyping(false)
      return
    }

    // Se est√° em modo admin, detecta comandos
    if (isAdminMode) {
      const adminCommand = adminCommandService.detectAdminCommand(userMessage)

      if (adminCommand.type !== 'unknown') {
        console.log('üëë Comando admin detectado:', adminCommand)

        // Mostra que est√° processando
        setMessages(prev => {
          const withoutTyping = prev.filter(msg => !msg.isTyping)
          const processingMsg: Message = {
            id: crypto.randomUUID(),
            message: `‚öôÔ∏è **EXECUTANDO COMANDO ADMIN...**\n\n${adminCommand.rawCommand}\n\n‚è≥ Processando...`,
            sender: 'noa',
            timestamp: new Date(),
          }
          return [...withoutTyping, processingMsg]
        })

        // Executa comando
        const result = await adminCommandService.executeCommand(adminCommand)

        // Mostra resultado
        setMessages(prev => {
          const filtered = prev.filter(msg => !msg.message.includes('EXECUTANDO COMANDO'))
          const resultMsg: Message = {
            id: crypto.randomUUID(),
            message: result.message,
            sender: 'noa',
            timestamp: new Date(),
          }
          return [...filtered, resultMsg]
        })

        // Abre card admin no lado direito (se aplic√°vel)
        if (adminCommand.type === 'get_stats') {
          setAdminCardType('stats')
        } else if (adminCommand.type === 'edit_imre_block') {
          setAdminCardType('editor')
        } else if (adminCommand.type === 'list_users') {
          setAdminCardType('users')
        } else if (adminCommand.type === 'train_ia') {
          setAdminCardType('ia')
        }

        await playNoaAudioWithText(result.message)
        setIsTyping(false)
        return
      }
    }

    // Feedback imediato para o usu√°rio
    const typingMessage: Message = {
      id: crypto.randomUUID(),
      message: 'NOA est√° pensando...',
      sender: 'noa',
      timestamp: new Date(),
      isTyping: true,
    }
    setMessages(prev => [...prev, typingMessage])

    try {
      // ü©∫ SISTEMA N√îA ESPERANZA - FLUXO CORRETO IMPLEMENTADO
      // Verifica se √© a primeira resposta do usu√°rio (ap√≥s "O que trouxe voc√™ aqui?")
      const userMessages = messages.filter(msg => msg.sender === 'user')
      const isFirstUserResponse = userMessages.length === 0

      // Verifica se j√° se apresentou antes
      const jaSeApresentou = messages.some(
        msg =>
          msg.sender === 'noa' &&
          msg.message.includes('N√¥a Esperanza, assistente m√©dica do MedCanLab')
      )

      if (isFirstUserResponse && !jaSeApresentou) {
        console.log('üéØ Primeira resposta do usu√°rio - Usando NoaGPT inteligente para apresenta√ß√£o')

        // Atualiza estados do sistema
        setIsFirstResponse(true)
        setConversationType('presentation')

        // üß† USAR NoaGPT inteligente para apresenta√ß√£o personalizada
        let currentNoaGPT = noaGPT
        if (!currentNoaGPT) {
          currentNoaGPT = new NoaGPT()
          setNoaGPT(currentNoaGPT)
        }

        // Buscar resposta inteligente do NoaGPT (usa banco + contexto)
        const promptApresentacao = userName
          ? `Usu√°rio ${userName} acabou de responder: "${userMessage}". Se apresente de forma natural e personalizada, mencione suas especialidades (neurologia, cannabis, nefrologia) e conduza para escolher perfil.`
          : `Usu√°rio respondeu: "${userMessage}". Se apresente de forma natural, mencione suas especialidades e conduza para escolher perfil.`

        let noaResponse = await currentNoaGPT.processCommand(promptApresentacao)

        // Se NoaGPT n√£o respondeu bem, usa fallback inteligente
        if (!noaResponse || noaResponse.includes('OPENAI_FALLBACK')) {
          noaResponse = `Ol√°${userName ? `, ${userName}` : ''}! Eu sou N√¥a Esperanza, assistente m√©dica do MedCanLab, especializada em neurologia, cannabis medicinal e nefrologia. Como posso ajudar voc√™ hoje? Me diga onde posso resolver isso?!`
        }

        const apresentacaoInteligente = noaResponse

        // Remove a mensagem de "pensando"
        setMessages(prev => {
          const withoutTyping = prev.filter(msg => !msg.isTyping)
          const noaPresentation: Message = {
            id: crypto.randomUUID(),
            message: apresentacaoInteligente,
            sender: 'noa',
            timestamp: new Date(),
            conversation_type: 'presentation',
            is_first_response: true,
            session_id: sessionId,
          }
          return [...withoutTyping, noaPresentation]
        })

        // Registra no sistema para aprendizado
        await noaSystemService.registerNoaConversation(
          userMessage,
          apresentacaoInteligente,
          'presentation',
          'unknown'
        )

        // Salva aprendizado
        await noaSystemService.saveAILearning(
          userMessage,
          apresentacaoInteligente,
          'presentation',
          0.9,
          ['saudacao', 'primeira_interacao', userName || 'anonimo']
        )

        // Toca √°udio da apresenta√ß√£o
        await playNoaAudioWithText(apresentacaoInteligente)

        // Apresenta menu de tipos de usu√°rio ap√≥s a apresenta√ß√£o (mais natural)
        setTimeout(async () => {
          // Menu padr√£o (sempre igual para consist√™ncia)
          const menuMessage =
            'Para melhor atend√™-lo, preciso saber qual √© o seu perfil:\n\nüéì **ALUNO** - Acesso ao ensino da Arte da Entrevista Cl√≠nica\nüë®‚Äç‚öïÔ∏è **PROFISSIONAL** - Acesso √† pesquisa e ferramentas cl√≠nicas\nüè• **PACIENTE** - Acesso √† avalia√ß√£o cl√≠nica inicial\n\nPor favor, responda com: ALUNO, PROFISSIONAL ou PACIENTE'

          const userTypeMenu: Message = {
            id: crypto.randomUUID(),
            message: menuMessage,
            sender: 'noa',
            timestamp: new Date(),
            conversation_type: 'user_type_selection',
            session_id: sessionId,
          }
          setMessages(prev => [...prev, userTypeMenu])
          await playNoaAudioWithText(
            'Para melhor atend√™-lo, preciso saber qual √© o seu perfil. Aluno, Profissional ou Paciente. Por favor, responda com uma dessas op√ß√µes.'
          )
        }, 2000)

        setIsTyping(false)
        return
      }

      // üéØ SISTEMA DE TIPOS DE USU√ÅRIO - ARTE DA ENTREVISTA CL√çNICA
      // Verifica se o usu√°rio est√° escolhendo seu tipo de usu√°rio
      const mensagemLower = userMessage.toLowerCase()
      const isUserTypeSelection =
        mensagemLower.includes('aluno') ||
        mensagemLower.includes('profissional') ||
        mensagemLower.includes('paciente')

      if (isUserTypeSelection) {
        console.log('üéØ Usu√°rio escolhendo tipo de perfil')

        let selectedUserType: 'aluno' | 'profissional' | 'paciente' = 'paciente'
        let optionsMenu = ''
        let audioMessage = ''

        if (mensagemLower.includes('aluno')) {
          selectedUserType = 'aluno'
          optionsMenu =
            'üéì **MENU ALUNO - ENSINO**\n\nüìö **Cursos Dispon√≠veis:**\n‚Ä¢ Arte da Entrevista Cl√≠nica - M√≥dulo 1\n‚Ä¢ Fundamentos da Cannabis Medicinal\n‚Ä¢ Protocolos de Avalia√ß√£o Cl√≠nica\n\nüéØ **Ferramentas de Aprendizado:**\n‚Ä¢ Simulador de Entrevistas\n‚Ä¢ Banco de Casos Cl√≠nicos\n‚Ä¢ Avalia√ß√µes Interativas\n\nüìä **Progresso e Certifica√ß√µes:**\n‚Ä¢ Dashboard de Progresso\n‚Ä¢ Certificados NFT\n‚Ä¢ Hist√≥rico de Aulas\n\nPor favor, escolha uma das op√ß√µes acima.'
          audioMessage =
            'Perfeito! Como aluno, voc√™ tem acesso ao ensino da Arte da Entrevista Cl√≠nica. Escolha uma das op√ß√µes do menu.'
        } else if (mensagemLower.includes('profissional')) {
          selectedUserType = 'profissional'
          optionsMenu =
            'üë®‚Äç‚öïÔ∏è **MENU PROFISSIONAL - PESQUISA E CL√çNICA**\n\nüî¨ **Ferramentas de Pesquisa:**\n‚Ä¢ Banco de Dados Cl√≠nicos\n‚Ä¢ An√°lise de Padr√µes\n‚Ä¢ Publica√ß√µes Cient√≠ficas\n\nü©∫ **Ferramentas Cl√≠nicas:**\n‚Ä¢ Avalia√ß√£o Cl√≠nica Inicial\n‚Ä¢ Relat√≥rios de Pacientes\n‚Ä¢ Dashboard M√©dico\n\nüìà **Gest√£o de Pacientes:**\n‚Ä¢ Lista de Pacientes\n‚Ä¢ Hist√≥rico Cl√≠nico\n‚Ä¢ Agendamentos\n\nPor favor, escolha uma das op√ß√µes acima.'
          audioMessage =
            'Excelente! Como profissional, voc√™ tem acesso √† pesquisa e ferramentas cl√≠nicas. Escolha uma das op√ß√µes do menu.'
        } else if (mensagemLower.includes('paciente')) {
          selectedUserType = 'paciente'
          optionsMenu =
            'üè• **MENU PACIENTE - AVALIA√á√ÉO CL√çNICA**\n\nü©∫ **Avalia√ß√£o Cl√≠nica Inicial:**\n‚Ä¢ Iniciar Avalia√ß√£o (NFT Incentivador)\n‚Ä¢ Relat√≥rio da Avalia√ß√£o\n‚Ä¢ Hist√≥rico de Consultas\n\nüìã **Meu Dashboard:**\n‚Ä¢ Resultados de Exames\n‚Ä¢ Prescri√ß√µes M√©dicas\n‚Ä¢ Agendamentos\n\nüíä **Cannabis Medicinal:**\n‚Ä¢ Orienta√ß√µes sobre Uso\n‚Ä¢ Protocolos de Tratamento\n‚Ä¢ Acompanhamento\n\nPor favor, escolha uma das op√ß√µes acima.'
          audioMessage =
            'Entendido! Como paciente, voc√™ tem acesso √† avalia√ß√£o cl√≠nica inicial. Escolha uma das op√ß√µes do menu.'
        }

        // Atualiza estados do sistema
        setUserType(selectedUserType)
        setConversationType('user_type_selection')
        setPermissionLevel(
          selectedUserType === 'paciente' ? 1 : selectedUserType === 'profissional' ? 2 : 3
        )

        // Registra no sistema
        await noaSystemService.setUserType(selectedUserType)
        await noaSystemService.initializeUserSession(selectedUserType)

        // Registra a conversa no sistema
        await noaSystemService.registerNoaConversation(
          userMessage,
          optionsMenu,
          'user_type_selection',
          selectedUserType
        )

        // Remove a mensagem de "pensando"
        setMessages(prev => {
          const withoutTyping = prev.filter(msg => !msg.isTyping)
          const userTypeResponse: Message = {
            id: crypto.randomUUID(),
            message: optionsMenu,
            sender: 'noa',
            timestamp: new Date(),
            conversation_type: 'user_type_selection',
            user_type: selectedUserType,
            session_id: sessionId,
          }
          return [...withoutTyping, userTypeResponse]
        })

        // Toca √°udio da resposta
        await playNoaAudioWithText(audioMessage)
        setIsTyping(false)
        return
      }

      // üìö EXPLICA√á√ÉO SOBRE ARTE DA ENTREVISTA CL√çNICA
      const perguntaSobreArte =
        mensagemLower.includes('o que √© arte da entrevista') ||
        mensagemLower.includes('o que e arte da entrevista') ||
        mensagemLower.includes('que √© entrevista cl√≠nica') ||
        mensagemLower.includes('como funciona a entrevista') ||
        mensagemLower.includes('explique arte da entrevista') ||
        mensagemLower.includes('explique entrevista cl√≠nica')

      if (perguntaSobreArte) {
        console.log('üìö Usu√°rio perguntou sobre Arte da Entrevista Cl√≠nica')

        setMessages(prev => {
          const withoutTyping = prev.filter(msg => !msg.isTyping)
          const explicacao: Message = {
            id: crypto.randomUUID(),
            message:
              'üìö **ARTE DA ENTREVISTA CL√çNICA - M√âTODO IMRE**\n\n**O que √©:**\nA Arte da Entrevista Cl√≠nica √© um m√©todo desenvolvido pelo Dr. Ricardo Valen√ßa para realizar avalia√ß√µes cl√≠nicas profundas e humanizadas.\n\n**Como funciona:**\n‚Ä¢ 28 blocos estruturados de perguntas\n‚Ä¢ Sistema IMRE (Incentivador M√≠nimo do Relato Espont√¢neo)\n‚Ä¢ Compreens√£o completa da hist√≥ria do paciente\n‚Ä¢ Perguntas que se aprofundam naturalmente\n‚Ä¢ Loops inteligentes: "O que mais?"\n\n**Benef√≠cios:**\n‚Ä¢ Avalia√ß√£o completa e estruturada\n‚Ä¢ Relat√≥rio detalhado ao final\n‚Ä¢ Certifica√ß√£o NFT do seu relato\n‚Ä¢ Base s√≥lida para consulta m√©dica\n\n**Eixos principais:**\n‚Ä¢ üéì **Ensino** - Para alunos de medicina\n‚Ä¢ üî¨ **Pesquisa** - Para profissionais\n‚Ä¢ ü©∫ **Cl√≠nica** - Para pacientes\n\n**Quer iniciar sua avalia√ß√£o?** Clique no bot√£o verde "ü©∫ Avalia√ß√£o Cl√≠nica" ou escreva "iniciar avalia√ß√£o".',
            sender: 'noa',
            timestamp: new Date(),
            conversation_type: 'general',
          }
          return [...withoutTyping, explicacao]
        })

        await playNoaAudioWithText(
          'A Arte da Entrevista Cl√≠nica √© um m√©todo desenvolvido pelo Dr. Ricardo Valen√ßa para realizar avalia√ß√µes cl√≠nicas profundas e humanizadas. S√£o 28 perguntas estruturadas que nos ajudam a compreender completamente sua hist√≥ria de sa√∫de. Quer iniciar sua avalia√ß√£o?'
        )

        setIsTyping(false)
        return
      }

      // Detecta se o usu√°rio est√° se apresentando (salva nome, mas usa ChatGPT para resposta)
      if (
        !userMemory.name &&
        (userMessage.toLowerCase().includes('meu nome √©') ||
          userMessage.toLowerCase().includes('eu sou') ||
          userMessage.toLowerCase().includes('sou o') ||
          userMessage.toLowerCase().includes('sou a'))
      ) {
        // Extrai o nome da mensagem
        const nameMatch = userMessage.match(/(?:meu nome √©|eu sou|sou o|sou a)\s+([a-zA-Z√Ä-√ø\s]+)/i)
        if (nameMatch) {
          const extractedName = nameMatch[1].trim()
          saveUserMemory({ name: extractedName })
          // Continua para ChatGPT gerar a resposta
        }
      }

      // ü§ñ TENTAR NoaGPT PRIMEIRO (conforme Documento Mestre v.2.0)
      console.log('ü§ñ Chamando NoaGPT.processCommand...')

      // Inicializa o NoaGPT se ainda n√£o foi criado
      let currentNoaGPT = noaGPT
      if (!currentNoaGPT) {
        currentNoaGPT = new NoaGPT()
        setNoaGPT(currentNoaGPT)
      }

      // ü§ñ SISTEMA H√çBRIDO: NoaGPT + ChatGPT Fine-tuned
      console.log('ü§ñ Chamando sistema h√≠brido...')

      // Preparar hist√≥rico da conversa
      const chatHistory = messages
        .filter(msg => msg.sender === 'user' || msg.sender === 'noa')
        .slice(-10) // √öltimas 10 mensagens
        .map(msg => `${msg.sender}: ${msg.message}`)

      // Usar sistema h√≠brido inteligente
      const noaResponse = await currentNoaGPT.processCommandWithFineTuned(userMessage, chatHistory)
      console.log('‚úÖ Sistema h√≠brido respondeu:', noaResponse.substring(0, 100) + '...')

      // Se sistema h√≠brido reconheceu o comando, usar sua resposta
      if (noaResponse !== 'OPENAI_FALLBACK') {
        console.log('‚úÖ Usando resposta imediata do sistema h√≠brido')

        // Remove a mensagem de "pensando" e adiciona a resposta real
        setMessages(prev => {
          const withoutTyping = prev.filter(msg => !msg.isTyping)
          const noaMessage: Message = {
            id: crypto.randomUUID(),
            message: noaResponse,
            sender: 'noa',
            timestamp: new Date(),
          }
          return [...withoutTyping, noaMessage]
        })

        // Salvar intera√ß√£o no sistema de aprendizado
        aiLearningService.saveInteraction(userMessage, noaResponse, 'general')

        // Salvar no sistema integrado MedCanLab
        await noaSystemService.saveAILearning(
          userMessage,
          noaResponse,
          'general',
          0.8,
          userMessage.split(' ').slice(0, 5) // Primeiras 5 palavras como keywords
        )

        // Salvar conversa na tabela noa_conversations
        await currentNoaGPT.saveResponse(userMessage, noaResponse, 'chat_interaction', 'general')

        // Registrar conversa no sistema integrado
        await noaSystemService.registerNoaConversation(
          userMessage,
          noaResponse,
          conversationType,
          userType || 'unknown'
        )

        // Gerar √°udio
        await playNoaAudioWithText(noaResponse)
        setIsTyping(false)
        return
      }

      console.log('üîÑ NoaGPT n√£o reconheceu, usando OpenAI fallback...')

      // Obter contexto de aprendizado da IA
      const learningContext = await aiLearningService.getLearningContext(userMessage)

      // Converte hist√≥rico para formato OpenAI com contexto do usu√°rio
      const systemContext = `Voc√™ √© N√¥a Esperanza, assistente m√©dica inteligente do MedCanLab, desenvolvida pelo Dr. Ricardo Valen√ßa.

${learningContext} 

INFORMA√á√ïES DO USU√ÅRIO:
- Nome: ${userMemory.name || 'N√£o informado'}
- √öltima visita: ${userMemory.lastVisit ? new Date(userMemory.lastVisit).toLocaleDateString('pt-BR') : 'Primeira vez'}

DIRETRIZES GERAIS:
- Seja sempre amig√°vel, profissional e emp√°tica
- Use o nome do usu√°rio quando souber
- Respeite sempre a √©tica m√©dica
- N√£o d√™ diagn√≥sticos, apenas orienta√ß√µes gerais
- Sugira consulta m√©dica quando necess√°rio
- Mantenha tom conversacional e acolhedor
- Se n√£o souber algo, seja honesta sobre suas limita√ß√µes
- Sempre termine suas respostas perguntando como pode ajudar ou oferecendo op√ß√µes
- Seja espec√≠fica sobre suas especialidades: neurologia, cannabis medicinal e nefrologia

INSTRU√á√ïES ESPEC√çFICAS DO DR. RICARDO VALEN√áA:

AVALIA√á√ÉO INICIAL - SIGA ESTRITAMENTE:
- Apresente cada pergunta entre aspas exatamente como especificado
- N√ÉO exiba textos entre colchetes [ ] ou par√™nteses ( )
- Fa√ßa pausas apropriadas para resposta do usu√°rio
- Para "O que mais?" repita at√© resposta negativa
- Use exatamente as perguntas fornecidas nas instru√ß√µes

AVALIA√á√ÉO INICIAL CANNABIS - SIGA ESTRITAMENTE:
- Inclua pergunta sobre cannabis medicinal
- Siga o mesmo protocolo da avalia√ß√£o inicial
- Use exatamente as perguntas fornecidas

FECHAMENTO CONSENSUAL:
- Revise todas as respostas do usu√°rio
- Apresente entendimento organizado com palavras leigas
- Pergunte se concorda com o entendimento
- Formule hip√≥teses sindr√¥micas se concordar
- Fa√ßa recomenda√ß√£o final espec√≠fica

CONTEXTO ATUAL: ${
        conversationType === 'clinical_evaluation'
          ? 'Usu√°rio est√° em avalia√ß√£o cl√≠nica triaxial'
          : 'Conversa geral'
      }`

      const conversationHistory: ChatMessage[] = [
        { role: 'system', content: systemContext },
        ...messages
          .filter(msg => msg.sender === 'user' || msg.sender === 'noa')
          .map(msg => ({
            role: msg.sender === 'user' ? ('user' as const) : ('assistant' as const),
            content: msg.message,
          }))
          .slice(-8), // Mant√©m apenas as √∫ltimas 8 mensagens + contexto do sistema
      ]

      // Chama OpenAI para gerar resposta (fallback quando NoaGPT n√£o reconhece)
      const openAIResponse = await openAIService.getNoaResponse(userMessage)
      console.log('‚úÖ OpenAI respondeu:', openAIResponse.substring(0, 100) + '...')

      // Remove a mensagem de "pensando" e adiciona a resposta real
      setMessages(prev => {
        const withoutTyping = prev.filter(msg => !msg.isTyping)
        const noaMessage: Message = {
          id: crypto.randomUUID(),
          message: openAIResponse,
          sender: 'noa',
          timestamp: new Date(),
        }
        return [...withoutTyping, noaMessage]
      })
      // Removido: addNotification('Resposta da N√¥a Esperanza do MedCanLab recebida', 'success')

      // üß† APRENDIZADO AUTOM√ÅTICO - IA aprende com a conversa
      aiLearningService.saveInteraction(userMessage, openAIResponse, 'general')

      // Salvar conversa na tabela noa_conversations
      if (currentNoaGPT) {
        await currentNoaGPT.saveResponse(userMessage, openAIResponse, 'openai_fallback', 'general')
      }

      // üí≠ GERAR PENSAMENTOS FLUTUANTES baseados na resposta
      setTimeout(() => {
        const newThoughts = generateThoughtsFromResponse(openAIResponse)
        console.log('üí≠ Gerando pensamentos:', newThoughts)
        console.log('üí≠ N√∫mero de pensamentos:', newThoughts.length)
        console.log(
          'üí≠ IDs dos pensamentos:',
          newThoughts.map(t => t.id)
        )
        setThoughts(newThoughts)
        setIsProcessing(false)
      }, 1500) // Delay de 1.5s para aparecer ap√≥s a resposta

      // Voz Residente gera APENAS √°udio (texto j√° vem do ChatGPT)
      console.log('üé§ Enviando texto do ChatGPT para Voz Residente gerar √°udio...')
      await playNoaAudioWithText(openAIResponse)
    } catch (error) {
      console.error('‚ùå Erro ao obter resposta da NOA:', error)
      // Removido: addNotification('Erro ao conectar com NOA. Verifique sua conex√£o.', 'error')
    } finally {
      console.log('üèÅ FINALIZANDO getNoaResponse - setIsTyping(false)')
      setIsTyping(false)
    }
  }

  const handleSendMessage = (messageText?: string) => {
    const messageToSend = messageText || inputMessage
    if (!messageToSend.trim()) return

    // Adiciona mensagem do usu√°rio
    const userMessage: Message = {
      id: crypto.randomUUID(),
      message: messageToSend,
      sender: 'user',
      timestamp: new Date(),
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsProcessing(true)

    // Obt√©m resposta real da NOA
    getNoaResponse(messageToSend)
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  // Fun√ß√£o para gerar pensamentos baseados na resposta
  const generateThoughtsFromResponse = (response: string) => {
    const availableThoughts = [
      {
        id: 'curso-1',
        type: 'curso',
        icon: 'üéì',
        title: 'AEC em Nefrologia',
        description: 'Curso intermedi√°rio, 6h',
        route: '/ensino',
        action: 'Iniciar Curso',
      },
      {
        id: 'pdf-1',
        type: 'pdf',
        icon: 'üìÑ',
        title: 'Protocolo CKD',
        description: 'Classifica√ß√£o por est√°gios renais',
        route: '/medcann-lab',
        action: 'Baixar PDF',
      },
      {
        id: 'curso-2',
        type: 'curso',
        icon: 'üéì',
        title: 'Fundamentos AEC',
        description: 'Curso b√°sico, 8h',
        route: '/ensino',
        action: 'Iniciar Curso',
      },
      {
        id: 'ebook-1',
        type: 'ebook',
        icon: 'üìï',
        title: 'Cannabis Medicinal',
        description: 'Protocolos em nefrologia',
        route: '/pesquisa',
        action: 'Baixar PDF',
      },
      {
        id: 'ebook-2',
        type: 'ebook',
        icon: 'üìñ',
        title: 'AEC Fundamentos',
        description: 'Guia completo da metodologia',
        route: '/ensino',
        action: 'Baixar eBook',
      },
      {
        id: 'projeto-1',
        type: 'projeto',
        icon: 'üè•',
        title: 'Cidade Amiga dos Rins',
        description: '1.2K pacientes, 3 cidades',
        route: '/pesquisa',
        action: 'Explorar Projeto',
      },
      {
        id: 'projeto-2',
        type: 'projeto',
        icon: 'üî¨',
        title: 'MedCann Lab',
        description: '187 pacientes, 5 est√°gios CKD',
        route: '/medcann-lab',
        action: 'Ver Pesquisa',
      },
      {
        id: 'protocolo-1',
        type: 'protocolo',
        icon: 'üìä',
        title: 'Protocolo CKD',
        description: 'Classifica√ß√£o por est√°gios renais',
        route: '/medcann-lab',
        action: 'Acessar Protocolo',
      },
      {
        id: 'protocolo-2',
        type: 'protocolo',
        icon: 'üß†',
        title: 'Deep Learning Biomarcadores',
        description: 'IA para an√°lise de fun√ß√£o renal',
        route: '/medcann-lab',
        action: 'Ver An√°lise',
      },
    ]

    // CORRIGIDO: Pensamentos fixos, n√£o aleat√≥rios
    // Mostrar sempre os mesmos 4 pensamentos principais
    return availableThoughts.slice(0, 4)
  }

  // Fun√ß√£o para lidar com clique nos pensamentos
  const handleThoughtClick = (thought: any) => {
    console.log('üéØ handleThoughtClick chamado:', thought.title, thought.route)

    // Se h√° um card expandido, fechar primeiro
    if (isCardExpanded) {
      closeExpandedCard()
      return
    }

    // Criar card expandido baseado no pensamento
    const cardContent = getCardContent(thought.type, thought.title)
    const expandedCard: ExpandedCard = {
      id: thought.id,
      title: thought.title,
      description: thought.description,
      content: cardContent,
      type: thought.type,
    }

    // Expandir card ao inv√©s de navegar
    expandCard(expandedCard)

    // Remove o pensamento clicado
    setThoughts(prev => prev.filter(t => t.id !== thought.id))
  }

  // Fun√ß√£o para obter conte√∫do do card baseado no tipo
  const getCardContent = (type: string, title: string): string => {
    switch (type) {
      case 'consulta':
        return `Vou te ajudar com sua consulta m√©dica. Vamos come√ßar coletando algumas informa√ß√µes sobre seus sintomas e hist√≥rico m√©dico. Como voc√™ est√° se sentindo hoje?`
      case 'analise':
        return `Vou realizar uma an√°lise cl√≠nica completa. Preciso entender melhor seu quadro para fornecer as melhores orienta√ß√µes. Pode me contar mais sobre seus sintomas?`
      case 'protocolo':
        return `Vou explicar este protocolo m√©dico detalhadamente. √â importante entender cada etapa para garantir o melhor tratamento. Tem alguma d√∫vida espec√≠fica?`
      case 'pesquisa':
        return `Vou apresentar os resultados desta pesquisa m√©dica. Os dados s√£o muito interessantes e podem ajudar no seu tratamento. O que gostaria de saber primeiro?`
      case 'curso':
        return `Vou te guiar atrav√©s deste curso m√©dico. Vamos come√ßar com os conceitos b√°sicos e evoluir gradualmente. Est√° pronto para aprender?`
      case 'pdf':
        return `Tenho um documento importante para voc√™. Este PDF cont√©m informa√ß√µes valiosas sobre o t√≥pico. Gostaria de baixar e revisar?`
      default:
        return `Vou te ajudar com ${title.toLowerCase()}. Como posso ser √∫til para voc√™ hoje?`
    }
  }

  // Fun√ß√£o para obter a√ß√£o espec√≠fica do card
  const getCardAction = (type: string, title: string) => {
    switch (type) {
      case 'curso':
        return {
          label: 'Iniciar Curso',
          action: () => {
            const message = `Vamos come√ßar o curso sobre ${title.toLowerCase()}. Primeiro, vou explicar os objetivos e estrutura do curso.`
            const noaMessage: Message = {
              id: crypto.randomUUID(),
              message: message,
              sender: 'noa',
              timestamp: new Date(),
            }
            setMessages(prev => [...prev, noaMessage])
          },
          color: 'bg-blue-500 hover:bg-blue-600',
        }
      case 'pdf':
        return {
          label: 'Baixar PDF',
          action: () => {
            // Simular download do PDF
            const link = document.createElement('a')
            link.href = '#' // Aqui seria o link real do PDF
            link.download = `${title}.pdf`
            link.click()

            const message = `PDF "${title}" baixado com sucesso! Voc√™ pode revisar o documento e me fazer perguntas sobre o conte√∫do.`
            const noaMessage: Message = {
              id: crypto.randomUUID(),
              message: message,
              sender: 'noa',
              timestamp: new Date(),
            }
            setMessages(prev => [...prev, noaMessage])
          },
          color: 'bg-red-500 hover:bg-red-600',
        }
      case 'avaliacao':
        return {
          label: 'ü©∫ Abrir Avalia√ß√£o Cl√≠nica Real',
          action: async () => {
            await startRealClinicalAssessment('card')
          },
          color: 'bg-green-500 hover:bg-green-600',
        }
      default:
        return {
          label: `Explorar ${title}`,
          action: () => {
            const question = `Me explique mais sobre ${title.toLowerCase()}`
            setInputMessage(question)
          },
          color: 'bg-green-500 hover:bg-green-600',
        }
    }
  }

  // Fun√ß√£o para fechar pensamento
  const handleThoughtClose = (thoughtId: string) => {
    console.log('‚ùå handleThoughtClose chamado para ID:', thoughtId)
    setThoughts(prev => prev.filter(t => t.id !== thoughtId))
  }

  // Fun√ß√£o para lidar com cliques nas op√ß√µes
  const handleOptionClick = (option: string) => {
    setInputMessage(option)
    handleSendMessage()
  }

  // Fun√ß√£o para processar upload de imagem m√©dica
  const handleMedicalImageUpload = async (file: File) => {
    try {
      setIsProcessingImage(true)
      addNotification('üè• Processando imagem m√©dica...', 'info')

      // Processar imagem com OCR e IA
      const processedData = await MedicalImageService.processMedicalImage(file, 'current_user')

      if (processedData.length > 0) {
        // Adicionar dados m√©dicos ao estado
        setMedicalData(prev => [...prev, ...processedData])

        // Criar mensagem com resultados
        const resultsMessage = processedData
          .map(data => {
            const statusEmoji =
              data.status === 'normal'
                ? '‚úÖ'
                : data.status === 'alto'
                  ? '‚ö†Ô∏è'
                  : data.status === 'baixo'
                    ? 'üìâ'
                    : '‚ùì'

            return `${statusEmoji} **${data.exame.toUpperCase()}**: ${data.valor} ${data.unidade} (${data.referencia}) - ${data.status.toUpperCase()}`
          })
          .join('\n')

        const alertasMessage = processedData
          .flatMap(data => data.alertas || [])
          .map(alerta => `üîî ${alerta.mensagem}`)
          .join('\n')

        const fullMessage = `**üìã EXAMES PROCESSADOS:**\n\n${resultsMessage}\n\n**üö® ALERTAS:**\n${alertasMessage}`

        // Adicionar mensagem da NOA com resultados
        const noaMessage: Message = {
          id: Date.now().toString(),
          message: fullMessage,
          sender: 'noa',
          timestamp: new Date(),
        }

        setMessages(prev => [...prev, noaMessage])
        addNotification(`‚úÖ ${processedData.length} exames processados com sucesso!`, 'success')

        // TODO: Salvar no Supabase
        console.log('üíæ Dados para salvar no banco:', processedData)
      } else {
        addNotification('‚ùå Nenhum exame encontrado na imagem', 'warning')
      }
    } catch (error) {
      console.error('‚ùå Erro no processamento:', error)
      addNotification('‚ùå Erro ao processar imagem m√©dica', 'error')
    } finally {
      setIsProcessingImage(false)
    }
  }

  // Fun√ß√£o para iniciar reconhecimento de voz
  const startVoiceRecognition = () => {
    // üõë CR√çTICO: N√ÉO inicia se N√¥a est√° falando (evita auto-escuta!)
    if (noaSpeaking || audioPlaying) {
      console.log('üõë N√ÉO iniciando reconhecimento - N√¥a est√° falando!', {
        noaSpeaking,
        audioPlaying,
      })
      return
    }

    if (!noaVoiceService.isSpeechRecognitionAvailable()) {
      console.warn('‚ö†Ô∏è Speech Recognition n√£o dispon√≠vel neste navegador')
      setIsVoiceListening(false)
      return
    }

    console.log('üé§ Iniciando reconhecimento de voz com N√¥a Voice Service')

    const success = noaVoiceService.startListening(
      result => {
        console.log('üé§ Resultado do reconhecimento:', result)

        if (result.isFinal && result.transcript.trim()) {
          console.log('‚úÖ Texto reconhecido:', result.transcript)
          setInputMessage(result.transcript)
          setIsVoiceListening(false)

          // Enviar mensagem automaticamente
          setTimeout(() => {
            handleSendMessage(result.transcript)
          }, 500)
        }
      },
      error => {
        console.error('‚ùå Erro no reconhecimento:', error)
        setIsVoiceListening(false)
      }
    )

    if (!success) {
      setIsVoiceListening(false)
    }
  }

  // Fun√ß√£o para ativar reconhecimento de voz automaticamente ap√≥s resposta da NOA
  const autoActivateVoiceAfterResponse = () => {
    // ‚úÖ REABILITADO COM PROTE√á√ÉO - S√≥ ativa se N√¥a N√ÉO est√° falando
    console.log('üîÑ Tentando ativar reconhecimento de voz automaticamente em 4 segundos...')
    setTimeout(() => {
      // PROTE√á√ÉO: Verifica m√∫ltiplas condi√ß√µes para evitar auto-escuta
      const canActivate = !isVoiceListening && userInteracted && !audioPlaying && !noaSpeaking

      if (canActivate) {
        console.log('‚úÖ Condi√ß√µes OK - Ativando reconhecimento de voz')
        startVoiceRecognition()
      } else {
        console.log('üõë N√£o ativando reconhecimento - N√¥a ainda pode estar falando:', {
          isVoiceListening,
          userInteracted,
          audioPlaying,
          noaSpeaking,
        })
      }
    }, 4000) // 4 segundos para garantir que N√¥a terminou de falar
  }

  // Fun√ß√£o para tocar √°udio da NOA com texto sincronizado
  const playNoaAudioWithText = async (text: string) => {
    try {
      console.log('üéµ N√¥a Esperanza do MedCanLab falando:', {
        userInteracted,
        audioPlaying,
        text: text.substring(0, 50) + '...',
        timestamp: new Date().toISOString(),
      })

      // Remove markdown e formata√ß√£o para o √°udio
      const cleanText = cleanTextForAudio(text)

      // Se o texto est√° vazio, n√£o faz nada
      if (!cleanText || cleanText.trim().length === 0) {
        console.log('‚ö†Ô∏è Texto vazio, n√£o reproduzindo √°udio')
        return
      }

      console.log('üó£Ô∏è N√¥a Esperanza do MedCanLab falando:', cleanText.substring(0, 100) + '...')
      console.log('üîä Estado antes da fala:', { audioPlaying, noaSpeaking, isVoiceListening })

      // üõë CR√çTICO: Para o reconhecimento de voz ANTES de N√¥a falar (evita auto-escuta!)
      if (isVoiceListening) {
        console.log('üõë PARANDO reconhecimento de voz - N√¥a vai falar')
        noaVoiceService.stopListening()
        setIsVoiceListening(false)
        // Aguarda o reconhecimento parar completamente
        await new Promise(resolve => setTimeout(resolve, 300))
      }

      // Para qualquer fala em andamento
      noaVoiceService.stopSpeaking()

      // Aguarda um pouco para garantir que a fala anterior foi cancelada
      await new Promise(resolve => setTimeout(resolve, 200))

      setAudioPlaying(true)
      setNoaSpeaking(true)

      console.log('üé¨ Estados definidos para fala:', { audioPlaying: true, noaSpeaking: true })

      // Para o reconhecimento de voz enquanto NOA fala
      if (isVoiceListening) {
        console.log('üîá Pausando reconhecimento de voz enquanto N√¥a fala')
        setIsVoiceListening(false)
      }

      // Usar o novo servi√ßo de voz da N√¥a
      try {
        console.log('üé§ Iniciando fala da N√¥a com texto:', cleanText.substring(0, 50) + '...')
        console.log('üé§ Texto completo para fala:', cleanText)

        // For√ßa a fala mesmo se houver problemas
        await noaVoiceService.speak(cleanText)
        console.log('üèÅ N√¥a Esperanza do MedCanLab terminou de falar')

        // Verifica se realmente terminou de falar
        setTimeout(() => {
          if (noaVoiceService.isCurrentlySpeaking()) {
            console.log('‚ö†Ô∏è N√¥a ainda est√° falando, aguardando...')
          } else {
            console.log('‚úÖ N√¥a realmente terminou de falar')
          }
        }, 1000)
      } catch (speechError) {
        console.error('‚ùå Erro na fala da N√¥a:', speechError)
        // Tenta novamente em caso de erro
        console.log('üîÑ Tentando falar novamente ap√≥s erro...')
        try {
          await noaVoiceService.speak(cleanText)
          console.log('‚úÖ Segunda tentativa de fala bem-sucedida')
        } catch (retryError) {
          console.error('‚ùå Erro na segunda tentativa:', retryError)
        }
      } finally {
        // Aguarda um pouco antes de desativar o v√≠deo
        setTimeout(() => {
          console.log('üîÑ Finalizando estados de √°udio e v√≠deo')
          setAudioPlaying(false)
          setNoaSpeaking(false)
          autoActivateVoiceAfterResponse()
        }, 500) // Aumentado para 500ms
      }
    } catch (error) {
      console.error('‚ùå Erro ao fazer N√¥a falar:', error)
      setAudioPlaying(false)
      setNoaSpeaking(false)
    }
  }

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('pt-BR', {
      hour: '2-digit',
      minute: '2-digit',
    })
  }

  return (
    <div className="h-full overflow-hidden relative">
      {/* Background Matrix */}
      <MatrixBackground isActive={matrixActive} opacity={0.05} />

      {/* Layout Principal */}
      <div className="w-full h-full flex relative z-0">
        {/* Sidebar Esquerdo - Chat */}
        <div
          className="sidebar-mobile w-80 flex-shrink-0 bg-white/10 border-r border-white/20 p-4 fixed left-0 top-[7vh] h-[calc(100vh-7vh-80px)] z-10"
          style={{ overflow: 'hidden' }}
        >
          {/* Bal√£o de Pensamento */}
          <div className="h-full flex flex-col">
            <div
              className="bg-white rounded-2xl px-3 pb-3 shadow-lg border border-white/20 flex-1 flex flex-col"
              style={{ overflow: 'hidden' }}
            >
              {/* Triggers Fixos no Topo */}
              <div className="px-3 pt-3 pb-2 border-b border-gray-200">
                <div className="flex flex-wrap gap-2">
                  <button
                    onClick={() => {
                      const input = document.createElement('input')
                      input.type = 'file'
                      input.accept = 'image/*'
                      input.onchange = async e => {
                        const file = (e.target as HTMLInputElement).files?.[0]
                        if (file) {
                          console.log('üì∏ Imagem m√©dica selecionada:', file.name)
                          await handleMedicalImageUpload(file)
                        }
                      }
                      input.click()
                    }}
                    disabled={isProcessingImage}
                    className={`px-3 py-1.5 rounded-lg text-xs transition-colors border ${
                      isProcessingImage
                        ? 'bg-gray-100 border-gray-300 text-gray-500 cursor-not-allowed'
                        : 'bg-red-100 hover:bg-red-200 border-red-300 text-red-800'
                    }`}
                    title={
                      isProcessingImage ? 'Processando imagem...' : 'Enviar exame/receita/laudo'
                    }
                  >
                    {isProcessingImage ? '‚è≥ Processando' : 'üñºÔ∏è Imagem'}
                  </button>

                  <button
                    onClick={() => handleOptionClick('Hipertens√£o')}
                    className="px-3 py-1.5 bg-purple-100 hover:bg-purple-200 border border-purple-300 rounded-lg text-xs text-purple-800 transition-colors"
                  >
                    üè• Hist√≥rico
                  </button>

                  <button
                    onClick={() => startRealClinicalAssessment('cta')}
                    className="px-3 py-1.5 bg-green-100 hover:bg-green-200 border border-green-300 rounded-lg text-xs text-green-800 transition-colors font-semibold"
                    title="Iniciar Avalia√ß√£o Cl√≠nica Inicial - Arte da Entrevista Cl√≠nica"
                  >
                    ü©∫ Avalia√ß√£o Cl√≠nica Inicial
                  </button>
                </div>
              </div>

              {/* √Årea de Mensagens - Melhorada */}
              <div
                className="messages-container space-y-3 flex-1 overflow-y-scroll scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100 min-h-0 max-h-full px-3 pt-3 pb-6"
                style={{
                  scrollBehavior: 'auto',
                  WebkitOverflowScrolling: 'touch',
                  overflowAnchor: 'none',
                  position: 'relative',
                  scrollSnapType: 'none',
                  scrollPadding: '0',
                  scrollMargin: '0',
                  overflowY: 'scroll',
                  height: '100%',
                  maxHeight: '100%',
                  /* FOR√áAR SCROLL MANUAL */
                  scrollSnapAlign: 'none',
                  scrollSnapStop: 'normal',
                }}
              >
                {messages.map(message => (
                  <div
                    key={message.id}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                    data-testid={message.sender === 'user' ? 'user-message' : 'ai-message'}
                  >
                    <div
                      className={`max-w-xs lg:max-w-xs ${
                        message.sender === 'user'
                          ? 'bg-blue-500 text-white rounded-lg p-3'
                          : 'bg-gray-100 text-gray-800 rounded-lg p-3'
                      }`}
                    >
                      <p className="text-sm leading-relaxed whitespace-pre-line">
                        {message.message}
                      </p>

                      <span className="text-xs opacity-70 mt-1 block">
                        {formatTime(message.timestamp)}
                      </span>
                    </div>
                  </div>
                ))}

                {/* Indicador de digita√ß√£o */}
                {isTyping && (
                  <div className="flex justify-start" data-testid="typing-indicator">
                    <div className="bg-gray-100 text-gray-800 rounded-lg p-3 max-w-xs">
                      <div className="flex items-center gap-2">
                        <div className="flex gap-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div
                            className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                            style={{ animationDelay: '0.1s' }}
                          ></div>
                          <div
                            className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                            style={{ animationDelay: '0.2s' }}
                          ></div>
                        </div>
                        <span className="text-xs">NOA est√° digitando...</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Input de Mensagem */}
              <div className="mt-3">
                <div className="flex gap-2 border border-gray-300 rounded-lg p-2 bg-white">
                  {/* Bot√£o de voz - Esquerda */}
                  <button
                    onClick={() => {
                      if (isVoiceListening) {
                        setIsVoiceListening(false)
                        noaVoiceService.stopListening()
                        console.log('üõë Reconhecimento de voz parado')
                      } else {
                        setIsVoiceListening(true)
                        startVoiceRecognition()
                      }
                    }}
                    className={`px-2 py-1.5 rounded-md transition-colors text-xs ${
                      isVoiceListening
                        ? 'bg-red-500 hover:bg-red-600 text-white'
                        : 'bg-green-500 hover:bg-green-600 text-white'
                    }`}
                    title={isVoiceListening ? 'Parar grava√ß√£o' : 'Falar com a NOA'}
                    aria-label={
                      isVoiceListening ? 'Parar grava√ß√£o de voz' : 'Iniciar grava√ß√£o de voz'
                    }
                    data-testid="voice-button"
                  >
                    <i className={`fas ${isVoiceListening ? 'fa-stop' : 'fa-microphone'}`}></i>
                  </button>

                  {/* Input no meio */}
                  <input
                    type="text"
                    value={inputMessage}
                    onChange={e => setInputMessage(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder="Digite sua mensagem..."
                    className="flex-1 px-3 py-2 text-sm focus:outline-none text-black placeholder-gray-600"
                    aria-label="Campo de mensagem para conversar com NOA"
                    data-testid="chat-input"
                  />

                  {/* Bot√£o Enviar - Direita */}
                  <button
                    onClick={() => handleSendMessage()}
                    disabled={!inputMessage.trim()}
                    className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed text-white px-2 py-1.5 rounded-md transition-colors text-xs"
                    aria-label="Enviar mensagem para NOA"
                    title="Enviar mensagem"
                    data-testid="send-button"
                  >
                    <i className="fas fa-paper-plane"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* √Årea Central - NOA e Pensamentos */}
      <div
        className="flex-1 flex items-center justify-center relative min-h-screen md:ml-80 ml-0 w-full"
        style={{ transform: 'translate(-10%, -95%)', pointerEvents: 'auto' }}
        onClick={e => {
          console.log('üéØ CLIQUE NO CONTAINER PRINCIPAL!', e.target)
        }}
      >
        {/* Avatar da NOA - V√≠deos Animados */}
        <div
          className={`flex-shrink-0 flex justify-center items-center relative transition-all duration-500 ${
            isCardExpanded ? 'scale-75 translate-x-24' : 'scale-100 translate-x-0'
          }`}
        >
          <div className="w-[200px] h-[200px] md:w-[400px] md:h-[400px] rounded-full overflow-hidden border-2 md:border-4 border-green-400 shadow-lg relative aspect-square bg-gradient-to-br from-blue-500 to-green-500 flex items-center justify-center">
            {/* Avatar da NOA - Imagem est√°tica por enquanto */}
            <div className="w-full h-full flex items-center justify-center">
              <div className="text-white text-6xl md:text-8xl animate-pulse">ü§ñ</div>
            </div>

            {/* V√≠deo est√°tico piscando (padr√£o) */}
            <video
              key="estatico"
              className={`absolute inset-0 w-full h-full object-cover transition-opacity duration-300 ${
                audioPlaying ? 'opacity-0' : 'opacity-100'
              }`}
              autoPlay
              loop
              muted
              playsInline
              onCanPlay={() => {
                console.log('‚úÖ V√≠deo est√°tico carregado!')
              }}
              onError={e => console.log('‚ö†Ô∏è V√≠deo est√°tico n√£o dispon√≠vel')}
            >
              <source src="/estatica%20piscando.mp4" type="video/mp4" />
            </video>

            {/* V√≠deo falando (quando √°udio est√° tocando) */}
            <video
              key="falando"
              className={`absolute inset-0 w-full h-full object-cover transition-opacity duration-300 ${
                audioPlaying ? 'opacity-100' : 'opacity-0'
              }`}
              autoPlay
              loop
              muted
              playsInline
              ref={video => {
                if (video) {
                  video.playbackRate = 0.8
                }
              }}
              onCanPlay={() => {
                console.log('‚úÖ V√≠deo falando carregado!')
              }}
              onError={e => console.log('‚ö†Ô∏è V√≠deo falando n√£o dispon√≠vel')}
            >
              <source src="/AGENTEFALANDO.mp4" type="video/mp4" />
            </video>
          </div>
          {/* Bot√£o para parar √°udio */}
          {audioPlaying && (
            <button
              onClick={() => {
                if (currentAudioRef.current) {
                  currentAudioRef.current.pause()
                  currentAudioRef.current = null
                  setAudioPlaying(false)
                }
              }}
              className="absolute top-2 right-2 lg:top-4 lg:right-4 p-2 lg:p-3 bg-red-500 hover:bg-red-600 text-white rounded-full shadow-lg transition-colors"
              title="Parar √°udio"
            >
              <i className="fas fa-stop text-sm lg:text-lg"></i>
            </button>
          )}
          {/* Indicador de escuta de voz */}
          {isVoiceListening && (
            <div className="absolute top-2 left-2 lg:top-4 lg:left-4 p-2 lg:p-3 bg-green-500 text-white rounded-full shadow-lg animate-pulse">
              <i className="fas fa-microphone text-sm lg:text-lg"></i>
            </div>
          )}
        </div>

        {/* Pensamentos Flutuantes - S√≥ aparecem quando card N√ÉO est√° expandido */}
        <AnimatePresence>
          {!isCardExpanded &&
            thoughts.map((thought, index) => (
              <ThoughtBubble
                key={thought.id}
                thought={thought}
                index={index}
                onClick={() => {
                  console.log('üéØ onClick chamado para:', thought.title)
                  handleThoughtClick(thought)
                }}
                onClose={() => {
                  console.log('üéØ onClose chamado para:', thought.id)
                  handleThoughtClose(thought.id)
                }}
              />
            ))}
        </AnimatePresence>

        {/* Card Expandido */}
        <AnimatePresence>
          {isCardExpanded && expandedCard && (
            <motion.div
              initial={{ x: -100, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              exit={{ x: -100, opacity: 0 }}
              transition={{ duration: 0.5, ease: 'easeInOut' }}
              className={`fixed left-64 z-50 w-96 max-h-[70vh] overflow-y-auto ${
                expandedCard.type === 'avaliacao' && conversationType === 'clinical_evaluation'
                  ? 'ring-2 ring-green-400/50 shadow-2xl shadow-green-400/20'
                  : ''
              }`}
              style={{
                top: 'calc(20% - 4%)',
                transform: 'translateY(-50%)',
                pointerEvents: 'auto',
              }}
            >
              <div className="premium-card w-full">
                {/* Header do Card */}
                <div className="flex justify-between items-center p-4 border-b border-white/20">
                  <div>
                    <h2 className="text-lg font-bold text-white mb-1">{expandedCard.title}</h2>
                    <p className="text-gray-300 text-sm">{expandedCard.description}</p>
                  </div>
                  <button
                    onClick={closeExpandedCard}
                    className="text-white hover:text-gray-300 text-xl transition-colors"
                  >
                    √ó
                  </button>
                </div>

                {/* Conte√∫do do Card */}
                <div className="p-4">
                  <div className="bg-white/10 rounded-lg p-3 mb-3">
                    <p className="text-white text-sm leading-relaxed">{expandedCard.content}</p>
                  </div>

                  {/* ü©∫ CARD DE AVALIA√á√ÉO CL√çNICA */}
                  {expandedCard.type === 'avaliacao' && (
                    <div className="space-y-4">
                      <div className="bg-gradient-to-r from-green-500/20 to-blue-500/20 rounded-lg p-4 border border-green-400/30">
                        <h3 className="text-white font-bold text-lg mb-1">
                          ü©∫ Avalia√ß√£o Cl√≠nica Inicial
                        </h3>
                        <p className="text-gray-200 text-sm leading-relaxed">
                          O protocolo IMRE completo acontece no m√≥dulo dedicado da plataforma.
                          Abrirei a rota segura para que voc√™ responda √†s 28 etapas oficiais
                          desenvolvidas pelo Dr. Ricardo Valen√ßa.
                        </p>
                      </div>

                      <div className="bg-white/10 rounded-lg p-3 text-sm text-slate-200">
                        <p>
                          üìç Rota:{' '}
                          <code className="text-green-300 font-mono">/app/avaliacao-inicial</code>
                        </p>
                        <p>
                          üîê Persist√™ncia: respostas salvas no Supabase com gera√ß√£o de relat√≥rio
                          cl√≠nico estruturado.
                        </p>
                      </div>

                      <button
                        onClick={() => startRealClinicalAssessment('card')}
                        className="w-full bg-green-500/80 hover:bg-green-500 text-white text-sm font-semibold py-2 rounded-lg transition-colors"
                      >
                        Abrir m√≥dulo cl√≠nico seguro
                      </button>

                      <p className="text-xs text-slate-300">
                        Ao clicar, voc√™ ser√° direcionado para o fluxo real de avalia√ß√£o, com prompt
                        especializado para o perfil do Dr. Valen√ßa e armazenamento estruturado dos
                        dados cl√≠nicos.
                      </p>
                    </div>
                  )}
                  {/* √Årea de intera√ß√£o */}
                  <div className="space-y-3">
                    <p className="text-gray-300 text-xs">üí¨ Fa√ßa perguntas no chat</p>
                    <div className="flex flex-col gap-2">
                      {/* A√ß√£o espec√≠fica do card */}
                      {(() => {
                        const cardAction = getCardAction(expandedCard.type, expandedCard.title)
                        return (
                          <button
                            onClick={cardAction.action}
                            className={`px-3 py-2 ${cardAction.color} text-white rounded-lg transition-colors text-xs`}
                          >
                            {cardAction.label}
                          </button>
                        )
                      })()}

                      {/* Bot√£o de pergunta geral */}
                      <button
                        onClick={() => {
                          const question = `Me explique mais sobre ${expandedCard.title.toLowerCase()}`
                          setInputMessage(question)
                        }}
                        className="px-3 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg transition-colors text-xs"
                      >
                        Perguntar sobre {expandedCard.title}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* üëë Card Admin - Lado DIREITO */}
        <AnimatePresence>
          {isAdminMode && adminCardType && (
            <motion.div
              initial={{ x: 100, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              exit={{ x: 100, opacity: 0 }}
              transition={{ duration: 0.5, ease: 'easeInOut' }}
              className="fixed z-50 w-96 max-h-[85vh] overflow-y-auto"
              style={{
                top: '15%',
                right: 'calc(4% + 9%)', // Move 9% para a esquerda
                pointerEvents: 'auto',
              }}
            >
              <div className="premium-card w-full border-2 border-yellow-400">
                {/* Header do Card Admin */}
                <div className="flex justify-between items-center p-4 border-b border-yellow-400/30 bg-yellow-400/10">
                  <div>
                    <h2 className="text-lg font-bold text-yellow-400 mb-1">üëë PAINEL ADMIN</h2>
                    <p className="text-gray-300 text-xs">
                      {adminCardType === 'stats' && 'üìä Estat√≠sticas e KPIs'}
                      {adminCardType === 'editor' && 'üìù Editor de Blocos IMRE'}
                      {adminCardType === 'users' && 'üë• Gest√£o de Usu√°rios'}
                      {adminCardType === 'ia' && 'üß† Treinamento da IA'}
                    </p>
                  </div>
                  <button
                    onClick={() => setAdminCardType(null)}
                    className="text-yellow-400 hover:text-yellow-300 text-xl transition-colors"
                  >
                    √ó
                  </button>
                </div>

                {/* Conte√∫do do Card Admin */}
                <div className="p-4">
                  {adminCardType === 'stats' && (
                    <div className="space-y-3">
                      <div className="bg-white/10 rounded-lg p-3">
                        <p className="text-yellow-400 text-sm font-semibold mb-2">
                          üìä Estat√≠sticas em Tempo Real
                        </p>
                        <p className="text-gray-300 text-xs">
                          Dados sendo carregados do Supabase...
                        </p>
                      </div>
                      <button
                        onClick={() => {
                          setInputMessage('atualizar estat√≠sticas')
                          handleSendMessage('atualizar estat√≠sticas')
                        }}
                        className="w-full px-3 py-2 bg-yellow-500 hover:bg-yellow-600 text-black rounded-lg text-xs font-semibold"
                      >
                        üîÑ Atualizar Dados
                      </button>
                    </div>
                  )}

                  {adminCardType === 'editor' && (
                    <div className="space-y-3">
                      <div className="bg-white/10 rounded-lg p-3">
                        <p className="text-yellow-400 text-sm font-semibold mb-2">
                          üìù Editor de Blocos IMRE
                        </p>
                        <p className="text-gray-300 text-xs">
                          Selecione um bloco para editar ou diga: "editar bloco [n√∫mero]"
                        </p>
                      </div>
                    </div>
                  )}

                  {adminCardType === 'users' && (
                    <div className="space-y-3">
                      <div className="bg-white/10 rounded-lg p-3">
                        <p className="text-yellow-400 text-sm font-semibold mb-2">
                          üë• Gest√£o de Usu√°rios
                        </p>
                        <p className="text-gray-300 text-xs">Usu√°rios sendo carregados...</p>
                      </div>
                    </div>
                  )}

                  {adminCardType === 'ia' && (
                    <div className="space-y-3">
                      <div className="bg-white/10 rounded-lg p-3">
                        <p className="text-yellow-400 text-sm font-semibold mb-2">
                          üß† Treinamento da IA
                        </p>
                        <p className="text-gray-300 text-xs">Processando dados de aprendizado...</p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Chat Mobile - Entre NOA e rodap√© */}
      <div className="block md:hidden w-full border-t border-white/20 bg-white/10 backdrop-blur-sm p-4">
        <div className="bg-white rounded-2xl px-3 pb-3 shadow-lg border border-white/20 max-h-64 flex flex-col">
          {/* √Årea de Mensagens Mobile */}
          <div className="space-y-2 flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100 max-h-32">
            {messages.slice(-3).map(message => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                data-testid={message.sender === 'user' ? 'user-message' : 'ai-message'}
              >
                <div
                  className={`max-w-xs px-3 py-2 rounded-lg text-sm ${
                    message.sender === 'user'
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-200 text-gray-800'
                  }`}
                >
                  {message.message}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}

export default Home
